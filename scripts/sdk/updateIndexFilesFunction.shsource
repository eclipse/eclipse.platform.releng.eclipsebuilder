#!/usr/bin/env bash

# this function accomplished "from a client" the same function that
# could be done like this, on the download server (in .../eclipse/downloads directory):
# php createIndex4x.php > index.html
# php eclipse3x.php > eclipse3x.html



function internalUpdateIndex ()
{

    # this buildeclipse.shsource file is to ease local builds to override some variables. 
    # It should not be used for production builds.
    source buildeclipse.shsource 2>/dev/null
    SITE_HOST=${SITE_HOST:-download.eclipse.org}
    #echo "SITE_HOST: $SITE_HOST"

    if [[ $# != 2 ]]
    then
        echo "PROGRAM ERROR: this function requires two arguments, in order, "
        echo "    the php page to use to create the html page, named in second argument)."
        exit 1
    fi

    PHP_PAGE=$1
    HTML_PAGE=$2

    TEMP_INDEX_TXT=tempIndex.txt

    wget --no-verbose -O ${TEMP_INDEX_TXT} http://${SITE_HOST}/eclipse/downloads/${PHP_PAGE} 2>&1
    rccode=$?
    if [[ $rccode = 0 ]]
    then
        rsync ${TEMP_INDEX_TXT} /home/data/httpd/download.eclipse.org/eclipse/downloads/${HTML_PAGE}
        rccode=$?
        if [[ $rccode = 0 ]]
        then
            echo "INFO: Upated http://${SITE_HOST}/eclipse/downloads/${HTML_PAGE}"
            # normal exit. Return out the bottom, to include 'remove' temp file. 
            # return 0
        else
            echo "ERROR: Could not copy ${HTML_PAGE} to downlaods. rccode: $rccode"
            return $rccode
        fi
    else
        echo "ERROR: Could not create or pull ${TEMP_INDEX_TXT} from downloads file ${PHP_PAGE}. rccode: $rccode"
        return $rccode
    fi

    rm  ${TEMP_INDEX_TXT}
}

function updateIndexPDE ()
{
    internalUpdateIndex ${x4X_PHP_PAGE} ${x4X_HTML_PAGE}
    internalUpdateIndex ${x3X_PHP_PAGE} ${x3X_HTML_PAGE}
}

function updateIndexCBI ()
{
    internalUpdateIndex ${x4X_PHP_PAGE_CBI} ${x4X_HTML_PAGE_CBI}
    internalUpdateIndex ${x3X_PHP_PAGE_CBI} ${x3X_HTML_PAGE_CBI}
}

function updateIndex ()
{


    x4X_PHP_PAGE="createIndex4x.php"
    x4X_HTML_PAGE="index.html"
    x3X_PHP_PAGE="eclipse3x.php"
    x3X_HTML_PAGE="eclipse3x.html"
    x4X_PHP_PAGE_CBI="cbibasedcreateIndex4x.php"
    x4X_HTML_PAGE_CBI="cbibasedindex.html"
    x3X_PHP_PAGE_CBI="cbibasedeclipse3x.php"
    x3X_HTML_PAGE_CBI="cbibasedeclipse3x.html"

    # if no arguments, do all
    # TODO: would be polite to detect unexpected arguments and give warnings.
    if [[ $# == 0 ]]
    then
        # if 0 args, assume to do all
        updateIndexPDE
        updateIndexCBI
    elif [[ $# == 1 ]] 
    then
        # assume the one argument is build_tech, and still call for both 3 and 4
        BUILD_TECH=$1
        if [[ "$BUILD_TECH" == "PDE" ]]
        then
            internalUpdateIndex ${x4X_PHP_PAGE} ${x4X_HTML_PAGE}
            internalUpdateIndex ${x3X_PHP_PAGE} ${x3X_HTML_PAGE}
        elif [[ "$BUILD_TECH" == "CBI" ]]
        then
            internalUpdateIndex ${x4X_PHP_PAGE_CBI} ${x4X_HTML_PAGE_CBI}
            internalUpdateIndex ${x3X_PHP_PAGE_CBI} ${x3X_HTML_PAGE_CBI}
        else
            echo "ERROR: BUILD_TECH not recognized as 'CBI' or 'PDE'. Found ${BUILD_TECH}"
        fi
    elif [[ $# == 2 ]] 
    then
        # two arguments given for specific update
        MAJOR=$1
        BUILD_TECH=$2
        #echo "BUILD_TECH: $BUILD_TECH"
        #echo "MAJOR: $MAJOR"
        if [[ "$BUILD_TECH" == "PDE" && "$MAJOR" == "3" ]]
        then
            internalUpdateIndex ${x3X_PHP_PAGE} ${x3X_HTML_PAGE}
        elif [[ "$BUILD_TECH" == "PDE" && "$MAJOR" == "4" ]]
        then
            internalUpdateIndex ${x4X_PHP_PAGE} ${x4X_HTML_PAGE}
        elif [[ "$BUILD_TECH" == "CBI" && "$MAJOR" == "3" ]]
        then
            internalUpdateIndex ${x3X_PHP_PAGE_CBI} ${x3X_HTML_PAGE_CBI}
        elif [[ "$BUILD_TECH" == "CBI" && "$MAJOR" == "4" ]]
        then
            internalUpdateIndex ${x4X_PHP_PAGE_CBI} ${x4X_HTML_PAGE_CBI}
        else
            echo "ERROR. Combination of parameters did not patch any conditions."
        fi
    fi

}


