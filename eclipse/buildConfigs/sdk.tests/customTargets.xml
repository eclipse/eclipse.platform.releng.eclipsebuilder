<project name="Build specific targets and properties" default="noDefault" basedir=".">

	<property name="postingDirectory" value="${buildDirectory}" />

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- ===================================================================== -->
	<target name="allElements">

		<ant antfile="${genericTargets}" target="${target}">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.sdk.tests" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Targets to assemble the built elements for particular configurations  -->
	<!-- These generally call the generated assemble scripts (named in -->
	<!-- ${assembleScriptName}) but may also add pre and post processing -->
	<!-- Add one target for each root element and each configuration -->
	<!-- ===================================================================== -->

	<target name="assemble.org.eclipse.sdk.tests.group.group.group">
		<!-- workaround for Bug 127747 Grouped config build failing on missing group.group.group folder-->
		<mkdir dir="${buildDirectory}/tmp/eclipse/group.group.group/eclipse" />
		<property name="archiveName" value="eclipse-junit-tests-${buildId}.zip" />
		<antcall target="assemble" />
	</target>

	<target name="assemble">
		<ant antfile="${assembleScriptName}" />
	</target>
	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for cvsRoot, package and mapVersionTag as desired. -->
	<!-- ===================================================================== -->
	<target name="checkLocal">
		<available property="mapsLocal" file="${buildDirectory}/maps/org.eclipse.releng" />
	</target>

	<target name="getMapFiles" depends="checkLocal" unless="mapsLocal">

		<!-- ***  change the repo info -->
		<property name="mapCvsRoot" value=":pserver:anonymous@dev.eclipse.org:/cvsroot/eclipse" />

		<property name="mapVersionTag" value="HEAD" />
		<cvs cvsRoot="${mapCvsRoot}" package="org.eclipse.releng" dest="${buildDirectory}/maps" tag="${mapVersionTag}" />
		<!--tag the map files project-->
		<antcall target="tagMapFiles" />
		<antcall target="getPrebuiltElements" />
	</target>

	<target name="compareMapFiles" if="compareMaps">
		<property file="${mapTag.properties}" />
		<property name="cvsDiffFile" value="${buildDirectory}/cvsDiff.txt" />
		<cvs cvsRoot="${mapCvsRoot}" dest="${buildDirectory}/maps" command="diff -w -r ${lastMapTag}" output="${cvsDiffFile}" />
		<modifiedMaps mapDiffFile="${cvsDiffFile}" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<!-- Stores tag on the filesystem so map files can be compared -->
		<echo file="${mapTag.properties}">
	lastMapTag=${buildId}
</echo>
		<cvs dest="${buildDirectory}/maps/org.eclipse.releng" command="tag ${buildId}" />
	</target>

	<target name="getPrebuiltElements">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch" if="performance.base">
		<mkdir dir="${buildDirectory}/${buildLabel}" />
		<property name="eclipse.base" value="${downloadUrl}/eclipse-SDK-${testedBuildId}-win32.zip" />
		<property name="linux.base" value="${downloadUrl}/eclipse-SDK-${testedBuildId}-linux-gtk.tar.gz" />
		<get src="${eclipse.base}" dest="${buildDirectory}/${buildLabel}/eclipse-SDK-${buildId}-win32.zip" usetimestamp="true" />
		<parallel>
			<get src="${linux.base}" dest="${buildDirectory}/${buildLabel}/eclipse-SDK-${buildId}-linux-gtk.tar.gz" usetimestamp="true" />
			<unzip src="${buildDirectory}/${buildLabel}/eclipse-SDK-${buildId}-win32.zip" dest="${buildDirectory}" />
		</parallel>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the fetch -->
	<!-- ===================================================================== -->
	<target name="postFetch">
		<replace dir="${buildDirectory}/plugins" value="${buildId}" token="@buildid@">
			<include name="**/about.mappings" />
		</replace>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating build scripts -->
	<!-- ===================================================================== -->
	<target name="preGenerate">

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before assembling -->
	<!-- ===================================================================== -->
	<target name="preAssemble">

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after assembling-->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>


	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
		<replace dir="${buildDirectory}/plugins" value="${buildId}" token="@build@">
			<include name="**/about.mappings" />
		</replace>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
		<antcall target="gatherLogs" />
	</target>

	<target name="prePackage" />
	<target name="postPackage" />

	<!-- ===================================================================== -->
	<!-- Steps to do after everything is built and assembled -->
	<!-- (e.g., testing, posting, emailing, ...) -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="packageTestFramework" />
	</target>

	<!-- ===================================================================== -->
	<!-- Helper targets -->
	<!-- ===================================================================== -->
	<target name="gatherLogs">
		<mkdir dir="${postingDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>

		<unzip dest="${postingDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features/org.eclipse.sdk.tests">
				<include name="*.log.zip" />
			</fileset>
		</unzip>
	</target>
	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="packageTestFramework">
		<!--package automated test framework used in Eclipse builds-->

		<property name="workingDirectory" value="${buildDirectory}/test.assembly" />

		<!--unzip the junit tests-->
		<exec dir="${buildDirectory}/${buildLabel}" executable="unzip">
			<arg line="-o -qq eclipse*junit*.zip -d ${workingDirectory}" />
		</exec>

		<!-- create top level testing directory-->
		<mkdir dir="${workingDirectory}/eclipse-testing" />

		<!--eclipse.home is relative to the scripts directory in the org.eclipse.pde.build plugin.  Assume the plugins used in the classpath are in the same directory as org.eclipse.pde.build-->
		<property name="eclipse.home" value="../../.." />

		<!--copy label.properties file for use in performance testing-->
		<copy file="${buildDirectory}/label.properties" tofile="${workingDirectory}/eclipse-testing/label.properties" />

		<property name="test.properties" value="${workingDirectory}/eclipse-testing/test.properties" />

		<!--generate test.properties.  Custom Ant task contributed by org.eclipse.build.tools in org.eclipse.releng.basebuilder.-->
		<generateTestProperties buildDirectory="${buildDirectory}" featureId="org.eclipse.sdk.tests" outputFile="${test.properties}" />

		<!--load the property file created with the directory names for all test plugins-->
		<property file="${test.properties}" />

		<!-- Remove the plugin version number appended to the org.eclipse.test plugin directory.
   	     This is so that contributors of test.xml's do not have to update their paths to 
   	     library.xml in org.eclipse.test whenever its version is updated.
   	 -->
		<property file="${buildDirectory}/finalPluginsVersions.properties" />
		<move todir="${workingDirectory}/eclipse/plugins/org.eclipse.test">
			<fileset dir="${workingDirectory}/eclipse/plugins/org.eclipse.test_${org.eclipse.test}" />
		</move>
		<!--the Ant move task leaves behind an empty directory-->
		<delete dir="${workingDirectory}/eclipse/plugins/org.eclipse.test_${org.eclipse.test}" includeEmptyDirs="true" />

		<!--create properties file for use in equinoxp2 tests -->
		<property name="equinoxp2tests.properties" value="${workingDirectory}/eclipse-testing/equinoxp2tests.properties" />
		<property name="org.eclipse.equinox.p2.reconciler.tests.platform.archive.win32" value="c:\\buildtest\\${buildId}\\eclipse-testing\\eclipse-platform-${buildId}-win32.zip" />
		<property name="org.eclipse.equinox.p2.reconciler.tests.platform.archive.linux" value="/buildtest/${buildId}/eclipse-testing/eclipse-platform-${buildId}-linux-gtk.tar.gz" />
		<property name="org.eclipse.equinox.p2.reconciler.tests.platform.archive.macosx" value="/Users/sdimitro/buildtest/${buildId}/eclipse-testing/eclipse-platform-${buildId}-macosx-cocoa.tar.gz" />
		<property name="org.eclipse.equinox.p2.reconciler.tests.35.platform.archive.win32" value="c:\\buildtest\\${buildId}\\eclipse-testing\\eclipse-platform-3.5-win32.zip" />
		<property name="org.eclipse.equinox.p2.reconciler.tests.35.platform.archive.linux" value="/buildtest/${buildId}/eclipse-testing/eclipse-platform-3.5-linux-gtk.tar.gz" />
		<property name="org.eclipse.equinox.p2.reconciler.tests.35.platform.archive.macosx" value="/Users/sdimitro/buildtest/${buildId}/eclipse-testing/eclipse-platform-3.5-macosx-cocoa.tar.gz" />
		<propertyfile file="${equinoxp2tests.properties}" comment="Properties required by equinox p2 tests">
			<entry key="org.eclipse.equinox.p2.reconciler.tests.platform.archive.win32" value="${org.eclipse.equinox.p2.reconciler.tests.platform.archive.win32}" />
			<entry key="org.eclipse.equinox.p2.reconciler.tests.platform.archive.linux" value="${org.eclipse.equinox.p2.reconciler.tests.platform.archive.linux}" />
			<entry key="org.eclipse.equinox.p2.reconciler.tests.platform.archive.macosx" value="${org.eclipse.equinox.p2.reconciler.tests.platform.archive.macosx}" />
			<entry key="org.eclipse.equinox.p2.reconciler.tests.35.platform.archive.win32" value="${org.eclipse.equinox.p2.reconciler.tests.35.platform.archive.win32}" />
			<entry key="org.eclipse.equinox.p2.reconciler.tests.35.platform.archive.linux" value="${org.eclipse.equinox.p2.reconciler.tests.35.platform.archive.linux}" />
			<entry key="org.eclipse.equinox.p2.reconciler.tests.35.platform.archive.macosx" value="${org.eclipse.equinox.p2.reconciler.tests.35.platform.archive.macosx}" />
			<entry key="org.eclipse.equinox.p2.tests.current.build.repo" value="${org.eclipse.equinox.p2.tests.current.build.repo}" />
		</propertyfile>



		<!-- rezip the JUnit plugin tests -->
		<exec dir="${workingDirectory}" executable="zip">
			<arg line="-r -q eclipse-junit-tests-${buildId}.zip eclipse" />
		</exec>

		<delete dir="${workingDirectory}/eclipse" includeEmptyDirs="true" />

		<!--Copy javadoc logs to the testing directory for use by relEng tests-->
		<copy file="${buildDirectory}/plugins/org.eclipse.platform.doc.isv/doc.bin.log" tofile="${workingDirectory}/eclipse-testing/org.eclipse.platform.doc.isv.javadoc.txt" failonerror="false" />
		<copy file="${buildDirectory}/plugins/org.eclipse.jdt.doc.isv/doc.bin.log" tofile="${workingDirectory}/eclipse-testing/org.eclipse.jdt.doc.isv.javadoc.txt" failonerror="false" />
		<copy file="${buildDirectory}/plugins/org.eclipse.jdt.doc.isv/jdtapt.doc.bin.log" tofile="${workingDirectory}/eclipse-testing/org.eclipse.jdt.apt.javadoc.txt" failonerror="false" />
		<copy file="${buildDirectory}/plugins/org.eclipse.pde.doc.user/doc.bin.log" tofile="${workingDirectory}/eclipse-testing/org.eclipse.pde.doc.user.javadoc.txt" failonerror="false" />

		<!--Copy scripts and doc used in the automated testing to the testing directory-->
		<copy todir="${workingDirectory}/eclipse-testing">
			<fileset dir="${buildDirectory}/plugins/org.eclipse.test" includes="testframework.html" />
		</copy>
		<copy todir="${workingDirectory}/eclipse-testing">
			<fileset dir="${builderDirectory}/testScripts" />
		</copy>

		<!--convert .bat files to dos just in case-->
		<condition property="${unix2dos}" value="/usr/local/bin/unix2dos">
			<equals arg1="${hudson}" arg2="true" />
		</condition>
		<property name="unix2dos" value="unix2dos" />
		<exec executable="${unix2dos}" dir="${workingDirectory}/eclipse-testing">
			<arg line="runtests.bat" />
		</exec>
		<!--convert runtests files to unix just in case-->
		<exec executable="dos2unix" dir="${workingDirectory}/eclipse-testing">
			<arg line="runtests" />
		</exec>

		<move file="${workingDirectory}/eclipse-junit-tests-${buildId}.zip" todir="${workingDirectory}/eclipse-testing" />

		<!--set execute permission on *nix shell script-->
		<chmod file="${workingDirectory}/eclipse-testing/runtests" perm="755" />
		<property name="postingDirectory" value="${buildDirectory}" />

		<!--create zip file of the automated testing framework-->
		<exec dir="${workingDirectory}" executable="zip">
			<arg line="-r -q ${postingDirectory}/${buildLabel}/eclipse-Automated-Tests-${buildId}.zip eclipse-testing" />
		</exec>
		<mkdir dir="${postingDirectory}/${buildLabel}/checksum" />
		<checksum file="${postingDirectory}/${buildLabel}/eclipse-Automated-Tests-${buildId}.zip" property="md5" />
		<checksum file="${postingDirectory}/${buildLabel}/eclipse-Automated-Tests-${buildId}.zip" algorithm="SHA" property="sha" />
		<echo message="${md5} *eclipse-Automated-Tests-${buildId}.zip" file="${postingDirectory}/${buildLabel}/checksum/eclipse-Automated-Tests-${buildId}.zip.md5" />
		<echo message="${sha} *eclipse-Automated-Tests-${buildId}.zip" file="${postingDirectory}/${buildLabel}/checksum/eclipse-Automated-Tests-${buildId}.zip.sha1" />
		<delete file="${buildDirectory}/${buildLabel}/eclipse-junit-tests-${buildId}.zip" />
		<!-- get to store previous release's platform zips -->
		<exec executable="/usr/bin/wget" dir="${previousPlatformZips}" failonerror="false">
			<arg line="-q -O ${previousPlatformZips}/eclipse-platform-3.5-win32.zip http://${localmirror}/downloads/drops/R-3.5-200906111540/eclipse-platform-3.5-win32.zip" />
		</exec>
		<exec executable="/usr/bin/wget" dir="${previousPlatformZips}" failonerror="false">
			<arg line="-q -O ${previousPlatformZips}/eclipse-platform-3.5-linux-gtk.tar.gz http://${localmirror}/downloads/drops/R-3.5-200906111540/eclipse-platform-3.5-linux-gtk.tar.gz" />
		</exec>
		<exec executable="/usr/bin/wget" dir="${previousPlatformZips}" failonerror="false">
			<arg line="-q -O ${previousPlatformZips}/eclipse-platform-3.5-macosx-cocoa.tar.gz http://${localmirror}/downloads/drops/R-3.5-200906111540/eclipse-platform-3.5-macosx-cocoa.tar.gz" />
		</exec>
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
