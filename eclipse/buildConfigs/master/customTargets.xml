<project name="Build specific targets and properties" default="noDefault" >

	<property name="postingDirectory" value="${buildDirectory}" />
	<property name="archiveName" value="eclipse-master-${buildId}.zip"/>
	<property name="archiveFullPath" value="${buildDirectory}/${buildLabel}/${archiveName}" />

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- ===================================================================== -->

	<!-- ****** figure out how to build the platform, sdk, examples, ... from one compile"
see the sdkFeatures, platformFeatures, ... targets in the orginal customTargets  -->
	<target name="allElements">
		<ant antfile="${genericTargets}" target="${target}" >
			<property name="type" value="feature" />
			<property name="id" value="master" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Targets to assemble the built elements for particular configurations  -->
	<!-- ===================================================================== -->
	<target name="assemble.master.group.group.group">
		<!-- workaround for Bug 127747 Grouped config build failing on missing group.group.group folder-->
		<mkdir dir="${buildDirectory}/tmp/eclipse/group.group.group/eclipse"/>
		<antcall target="assemble" />
	</target>

	<target name="assemble">
		<ant antfile="${assembleScriptName}" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for cvsRoot, package and mapVersionTag as desired. -->
	<!-- ===================================================================== -->
	<target name="checkLocal">
		<available property="mapsLocal" file="${buildDirectory}/maps/org.eclipse.releng" />
	</target>

	<target name="getMapFiles" depends="checkLocal" unless="mapsLocal">

		<!-- ***  change the repo info -->
		<property name="mapCvsRoot" value=":pserver:anonymous@dev.eclipse.org:/home/eclipse" />
		<property name="mapVersionTag" value="HEAD" />
		<cvs cvsRoot="${mapCvsRoot}"
		package="org.eclipse.releng"
		dest="${buildDirectory}/maps"
		tag="${mapVersionTag}"
	/>
		<!--compare the map files project-->
		<antcall target="compareMapFiles" />
		<!--tag the map files project-->
		<antcall target="tagMapFiles" />
	<generateBaseFetchScript
			mapfile="${buildDirectory}/maps/org.eclipse.releng/maps/base.map"
			outputfile="${buildDirectory}/fetchbase.xml"/>
		<ant antfile="${buildDirectory}/fetchbase.xml" /> 
	</target>

	<target name="compareMapFiles" if="compareMaps">
		<property file="${mapTag.properties}"/>
		<property name="cvsDiffFile" value="${buildDirectory}/cvsDiff.txt" />
		<cvs cvsRoot="${mapCvsRoot}" dest="${buildDirectory}/maps" command="diff -w -r ${lastMapTag}" output="${cvsDiffFile}" />
		<modifiedMaps mapDiffFile="${cvsDiffFile}" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<!-- Stores tag on the filesystem so map files can be compared -->
		<echo file="${mapTag.properties}">
			lastMapTag=${buildId}
		</echo>
		<cvs dest="${buildDirectory}/maps/org.eclipse.releng" command="tag ${buildId}" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>



	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup" >
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the fetch -->
	<!-- ===================================================================== -->
	<target name="postFetch">
		<ant antfile="${genericTargets}" target="fetchElement">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.equinox.executable" />
		</ant>
		<zip zipfile="${buildDirectory}/plugins/org.eclipse.platform/launchersrc.zip" basedir="${buildDirectory}/features/org.eclipse.equinox.executable" includes="library/" />
		<mkdir dir="${buildDirectory}/features/org.eclipse.platform/launchertmp" />
		<mkdir dir="${buildDirectory}/launchertmp" />

		<!--copy linux motif about_files to in temp location where it will be copied into root of eclipse at assembly time-->
		<property name="linux.motif.rootfiles" value="${buildDirectory}/features/org.eclipse.platform/about_files/linux.motif.x86" />
		<mkdir dir="${linux.motif.rootfiles}" />
		<copy tofile="${linux.motif.rootfiles}/about.html" file="${buildDirectory}/plugins/org.eclipse.swt.motif.linux.x86/about.html" /> 
		<copy todir="${linux.motif.rootfiles}">
			<fileset dir="${buildDirectory}/plugins/org.eclipse.swt.motif.linux.x86"/>
		</copy>

		<!--copy linux gtk x86 about_files to in temp location where it will be copied into root of eclipse at assembly time-->
		<property name="linux.gtk.x86.rootfiles" value="${buildDirectory}/features/org.eclipse.platform/about_files/linux.gtk.x86" />
		<mkdir dir="${linux.gtk.x86.rootfiles}" />
		<copy tofile="${linux.gtk.x86.rootfiles}/about.html" file="${buildDirectory}/plugins/org.eclipse.swt.gtk.linux.x86/about.html" /> 

		<copy todir="${linux.gtk.x86.rootfiles}">
			<fileset dir="${buildDirectory}/plugins/org.eclipse.swt.gtk.linux.x86"/>
		</copy>

		<!--copy linux gtk x86_64 about_files to in temp location where it will be copied into root of eclipse at assembly time-->
		<property name="linux.gtk.x86_64.rootfiles" value="${buildDirectory}/features/org.eclipse.platform/about_files/linux.gtk.x86_64" />
		<mkdir dir="${linux.gtk.x86_64.rootfiles}" />
		<copy tofile="${linux.gtk.x86_64.rootfiles}/about.html" file="${buildDirectory}/plugins/org.eclipse.swt.gtk.linux.x86_64/about.html" />

		<copy todir="${linux.gtk.x86_64.rootfiles}">
			<fileset dir="${buildDirectory}/plugins/org.eclipse.swt.gtk.linux.x86_64"
				includes="
				about_files/about_cairo.html,
				about_files/pixman-licenses.txt,
				about_files/mpl-v11.txt"
			/>
		</copy>		
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating build scripts -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
		<!--need to delete generated source features and plug-ins due to bug
		https://bugs.eclipse.org/bugs/show_bug.cgi?id=128139 -->
		<delete>
			<fileset dir="${buildDirectory}/features" includes="*.source*/**" />			
			<fileset dir="${buildDirectory}/plugins" excludes="com.ibm.icu.base.source_*/**, com.ibm.icu.source_*/**" includes="*.source*/**" />
		</delete> 
	<!--need to exclude icu source from orbit-->
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
		
		<!--must ensure the org.eclipse.swt.tools plug-in is built before the 64 bit swt fragments (see bug #144991)-->
		<ant antfile="build.xml" dir="${buildDirectory}/plugins/org.eclipse.swt.win32.win32.x86" target="build.jars">
			<property name="type" value="plugin" />
			<property name="id" value="org.eclipse.swt.win32.win32.x86" />
		</ant>
		<ant antfile="build.xml" dir="${buildDirectory}/plugins/org.eclipse.swt.tools" target="build.jars">
			<property name="type" value="plugin" />
			<property name="id" value="org.eclipse.swt.tools" />
			<property name="baseos" value="win32" />
			<property name="basews" value="win32" />
			<property name="basearch" value="x86" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before assembling -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after assembling-->
	<!-- ===================================================================== -->
	<target name="postPackage">
		<!--remove all root files since these will not be used
			win32, win32, x86 &\
			wce_ppc, win32, arm &\
			linux, gtk, x86 & \
			linux, gtk, ppc & \
			linux, gtk, ppc64 & \
			linux, gtk, x86_64 &\
			linux, gtk, ia64 &\
			linux, motif, x86 & \
			solaris, gtk, sparc & \
			aix, motif, ppc & \
			hpux, motif, PA_RISC & \
			hpux, motif, ia64 & \
			hpux, motif, ia64_32 & \
			macosx, carbon, ppc & \
			qnx, photon, x86
		-->
		<exec executable="zip" dir="${buildDirectory}/${buildLabel}">
			<arg line="-d ${archiveName} win32** wce** linux** solaris** aix** hpux** macosx** qnx**" />
		</exec>
	</target>

	<target name="prePackage" />
	<target name="postAssemble" />


	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
		<replace dir="${buildDirectory}/plugins" value="${buildId}" token="@build@">
			<include name="**/about.mappings" />
		</replace>
		<replace dir="${buildDirectory}/features/org.eclipse.platform" value="${buildId}" token="@build@">
			<include name="**/config.ini" />
		</replace>
		<replace dir="${buildDirectory}/features/org.eclipse.sdk" value="${buildId}" token="@build@">
			<include name="**/config.ini" />
		</replace>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
		<antcall target="gatherLogs" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after everything is built and assembled -->
	<!-- (e.g., testing, posting, emailing, ...) -->
	<!-- ===================================================================== -->
	<target name="postBuild">
	</target>

	<!-- ===================================================================== -->
	<!-- Helper targets -->
	<!-- ===================================================================== -->

	<target name="gatherLogs">
		<mkdir dir="${postingDirectory}/${buildLabel}/compilelogs/plugins" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${postingDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features/master">
				<include name="*.log.zip" />
			</fileset>
		</unzip>
		<!--HACK:  copy logs from features which nest others
		because they are not included in the zip created above.-->
		<copy todir="${postingDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features/master-equinox/feature.temp.folder" />
		</copy>
		<copy todir="${postingDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features/org.eclipse.platform/feature.temp.folder" />
		</copy>
		<copy todir="${postingDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features/org.eclipse.sdk/feature.temp.folder" />
		</copy>
	</target>

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>


</project>
