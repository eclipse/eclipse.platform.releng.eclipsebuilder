<project name="Build specific targets and properties" default="noDefault" basedir=".">

	<property name="postingDirectory" value="${buildDirectory}" />

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- ===================================================================== -->
	<available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml" />
	<property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml" />

	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>

	<!-- ===================================================================== -->
	<!-- Targets to assemble the built elements for particular configurations  -->
	<!-- These generally call the generated assemble scripts (named in -->
	<!-- ${assembleScriptName}) but may also add pre and post processing -->
	<!-- Add one target for each root element and each configuration -->
	<!-- ===================================================================== -->

	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for cvsRoot, package and mapVersionTag as desired. -->
	<!-- ===================================================================== -->
	<target name="checkLocal">
		<available property="mapsLocal" file="${buildDirectory}/maps/org.eclipse.releng" />
	</target>

	<target name="getMapFiles" depends="checkLocal" unless="mapsLocal">

		<property name="mapsrepo" value="${buildDirectory}/commonrepo" />
		<mkdir dir="${mapsrepo}" />
		<exec executable="git" dir="${mapsrepo}">
			<arg line="clone ${commonrepo}" />
		</exec>
		<exec executable="git" dir="${mapsrepo}/eclipse.platform.common">
			<arg line="checkout ${mapVersionTag}" />
		</exec>
		<mkdir dir="${buildDirectory}/maps" />
		<exec executable="git" dir="${buildDirectory}/maps" output="${buildDirectory}/maps/maps.tar">
			<arg line="archive --format=tar --remote=${mapsrepo}/eclipse.platform.common ${mapVersionTag} maps/org.eclipse.releng/maps" />
		</exec>
		<untar src="${buildDirectory}/maps/maps.tar" dest="${buildDirectory}" />
		<!--tag the map files project-->
		<antcall target="tagMapFiles" />
		<antcall target="getPrebuiltElements" />
	</target>

	<target name="compareMapFiles" if="compareMaps">
		<property file="${mapTag.properties}" />
		<property name="cvsDiffFile" value="${buildDirectory}/cvsDiff.txt" />
		<cvs cvsRoot="${mapCvsRoot}" dest="${buildDirectory}/maps" command="diff -w -r ${lastMapTag}" output="${cvsDiffFile}" />
		<modifiedMaps mapDiffFile="${cvsDiffFile}" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<!-- Stores tag on the filesystem so map files can be compared -->
		<echo file="${mapTag.properties}">
	lastMapTag=${buildId}
</echo>
		<exec executable="git" dir="${mapsrepo}/eclipse.platform.common">
			<arg line="branch ${buildId}" />
		</exec>
		<exec executable="git" dir="${mapsrepo}/eclipse.platform.common">
			<arg line="push origin ${buildId}" />
		</exec>
	</target>

	<target name="getPrebuiltElements">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the fetch -->
	<!-- ===================================================================== -->
	<target name="postFetch">
		<replace dir="${buildDirectory}/plugins" value="${buildId}" token="@build@">
			<include name="**/about.mappings" />
		</replace>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating build scripts -->
	<!-- ===================================================================== -->
	<target name="preGenerate">

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before assembling -->
	<!-- ===================================================================== -->
	<target name="preAssemble">

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after assembling-->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>


	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
		<replace dir="${buildDirectory}/plugins" value="${buildId}" token="@build@">
			<include name="**/about.mappings" />
		</replace>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
		<condition property="logsAvailable">
			<istrue value="${javacVerbose}" />
		</condition>
		<antcall target="gatherLogs" />
	</target>

	<target name="prePackage" />


	<!-- ===================================================================== -->
	<!-- Steps to do after everything is built and assembled -->
	<!-- (e.g., testing, posting, emailing, ...) -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="packageTestFramework" />
	</target>


	<!-- ===================================================================== -->
	<!-- Helper targets -->
	<!-- ===================================================================== -->
	<target name="gatherLogs" if="logsAvailable">
		<mkdir dir="${postingDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>

		<unzip dest="${postingDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features/org.eclipse.test">
				<include name="*.log.zip" />
			</fileset>
		</unzip>
	</target>
	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="packageTestFramework">
		<zip zipfile="${postingDirectory}/${buildLabel}/eclipse-test-framework-${buildId}.zip" basedir="${buildDirectory}/buildRepoTestFramework" />
		<mkdir dir="${postingDirectory}/${buildLabel}/checksum" />
		<checksum file="${postingDirectory}/${buildLabel}/eclipse-test-framework-${buildId}.zip" property="md5" />
		<checksum file="${postingDirectory}/${buildLabel}/eclipse-test-framework-${buildId}.zip" algorithm="SHA" property="sha" />
		<echo message="${md5} *eclipse-test-framework-${buildId}.zip" file="${postingDirectory}/${buildLabel}/checksum/eclipse-test-framework-${buildId}.zip.md5" />
		<echo message="${sha} *eclipse-test-framework-${buildId}.zip" file="${postingDirectory}/${buildLabel}/checksum/eclipse-test-framework-${buildId}.zip.sha1" />
	</target>


	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
