<project name="provisioning build" default="build">

	<!--
		- Build the agent product. (win32)
		- Build the metadata generator. (linux)
		- Run the metadata generator on the agent. 
		- Build the director. (linux)
		- Run the director and install a new agent.
		- Zip up the agent.
		- Build the self-hosting feature. (win32)
		- Run the metadata generator on the self-hosting feature.
		- Run the metadata generator on the Eclipse SDK.
	-->
	<target name="init">
		<property name="p2.root" value="${buildDirectory}/${buildId}/p2temp" />
		<mkdir dir="${p2.root}" />
		<property name="p2.output.base" value="${p2.root}/equinox.p2.build" />
		<mkdir dir="${p2.output.base}" />

		<property name="sdk.archive" value="${postingDirectory}/${buildLabel}/eclipse-SDK-${buildId}-linux-gtk-ppc.tar.gz" />
		<property name="rcp.delta.archive" value="${postingDirectory}/${buildLabel}/eclipse-RCP-${buildId}-delta-pack.zip" />
		<property name="rcp.archive" value="${postingDirectory}/${buildLabel}/eclipse-RCP-${buildId}-linux-gtk-ppc.tar.gz" />
		<property name="rcp.win32.archive" value="${postingDirectory}/${buildLabel}/eclipse-RCP-${buildId}-linux-gtk-ppc.tar.gz" />

		<property name="p2.install.folder.parent" value="${p2.root}/" />
		<property name="p2.install.folder" value="equinox.p2" />
		<property name="p2.install.path" value="${p2.install.folder.parent}${p2.install.folder}" />

		<property name="base" value="${p2.output.base}/base" />
		<mkdir dir="${base}" />
		<property name="p2.install.path" value="${p2.output.base}${p2.install.folder}" />
		<mkdir dir="${p2.install.path}" />

		<property file="build.properties" />

		<property name="p2.agent.dir" value="${p2.output.base}/agent" />
		<mkdir dir="${p2.agent.dir}" />
		<property name="p2.generator.dir" value="${p2.output.base}/generator" />
		<mkdir dir="${p2.generator.dir}" />
		<property name="p2.repo.root" value="${p2.output.base}/servers" />
	    <mkdir dir="${p2.repo.root}" />		
		<property name="p2.metadata.repo" value="${p2.repo.root}/metadataRepository/" />
		<mkdir dir="${p2.metadata.repo}" />
		<property name="p2.artifact.repo" value="${p2.repo.root}/artifactRepository/" />
		<mkdir dir="${p2.artifact.repo}" />
		<property name="p2.flavor" value="tooling" />
	</target>

	<target name="build" depends="init">
		<!-- Ensure that we are building against the same version that we
			are generating the metadata for -->
		<antcall target="extract">
			<param name="extract-src" value="${sdk.archive}" />
			<param name="extract-dest" value="${base}" />
		</antcall>
		<antcall target="extract">
			<param name="extract-src" value="${rcp.delta.archive}" />
			<param name="extract-dest" value="${base}" />
		</antcall>
		<antcall target="build.features" />
		<!-- Generate the metadata for the agent and create the install first due
			to bug 199317... installing will install all fragments and we don't want the
			ones from the SDK -->
		<antcall target="setup.generator" />
		<antcall target="generate.metadata.agent" />
		<antcall target="run.director" />
		<antcall target="generate.metadata.selfhosting" />
		<antcall target="generate.metadata.userUI" />
		<antcall target="generate.metadata.sdk" />
		<antcall target="zip.install" />
	</target>

	<target name="build.features">
		<ant antfile="${eclipse.pdebuild.scripts}/build.xml">
			<property name="builder" value="${basedir}" />
		</ant>
	</target>

	<target name="setup.generator">
		<path id="feature.zip.path">
			<fileset dir="${buildDirectory}/${buildId}">
				<include name="**/org.eclipse.equinox.p2.generator.feature-${buildId}-linux.gtk.x86.zip" />
			</fileset>
		</path>
		<property name="feature.zip.name" refid="feature.zip.path" />
		<antcall target="extract">
			<param name="extract-src" value="${feature.zip.name}" />
			<param name="extract-dest" value="${p2.generator.dir}" />
		</antcall>
		<antcall target="extract">
			<param name="extract-src" value="${rcp.archive}" />
			<param name="extract-dest" value="${p2.generator.dir}" />
		</antcall>

		<chmod file="${p2.generator.dir}/eclipse/eclipse" perm="777" />
		<copy file="files/config.ini.generator" tofile="${p2.generator.dir}/eclipse/configuration/config.ini" overwrite="true" />
		<copy todir="${p2.generator.dir}/eclipse/plugins">
			<fileset dir="files">
				<include name="**/*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="generate.metadata.agent">
		<antcall target="extract">
			<param name="extract-src" value="${rcp.win32.archive}" />
			<param name="extract-dest" value="${p2.agent.dir}" />
		</antcall>
		<path id="agent.zip.path">
			<fileset dir="${buildDirectory}/${buildId}">
				<include name="**/org.eclipse.equinox.p2.agent.feature-*-win32.win32.x86.zip" />
			</fileset>
		</path>
		<property name="agent.zip.name" refid="agent.zip.path" />
		<antcall target="extract">
			<param name="extract-src" value="${agent.zip.name}" />
			<param name="extract-dest" value="${p2.agent.dir}" />
		</antcall>
		<copy file="files/config.ini.agent" tofile="${p2.agent.dir}/eclipse/configuration/config.ini" overwrite="true" />
		<copy todir="${p2.agent.dir}/eclipse/plugins">
			<fileset dir="files">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${p2.agent.dir}/eclipse/plugins" includes="**/org.eclipse.update.configurator_*" />
			<fileset dir="${p2.agent.dir}/eclipse/plugins" includes="**/org.eclipse.rcp_*" />
			<fileset dir="${p2.agent.dir}/eclipse/features" includes="**/*" />
		</delete>

		<!-- note: use the full path to the exe here, otherwise it seems to call the exe from the builder -->
		<exec executable="${p2.generator.dir}/eclipse/eclipse" failonerror="false" timeout="900000">
			<arg line="-vm ${java15-home}/bin/java" />
			<arg line="-application org.eclipse.equinox.p2.metadata.generator.EclipseGenerator" />
			<arg line="-consoleLog" />
			<arg line="-p2.os win32" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-metadataRepository file:${p2.metadata.repo}" />
			<arg line="-artifactRepository file:${p2.artifact.repo}" />
			<arg line="-source ${p2.agent.dir}/eclipse" />
			<arg line="-rootVersion 0.1.0.${buildId}" />
			<arg line="-root agent" />
			<arg line="-flavor ${p2.flavor}" />
			<arg line="-publishArtifacts" />
		</exec>
	</target>

	<target name="generate.metadata.selfhosting">
		<path id="selfhosting.feature.zip.path">
			<fileset dir="${buildDirectory}/${buildId}">
				<include name="**/org.eclipse.equinox.p2.selfhosting.feature-${buildId}-win32.win32.x86.zip" />
			</fileset>
		</path>
		<property name="selfhosting.feature.zip.name" refid="selfhosting.feature.zip.path" />
		<property name="p2.selfhosting.dir" value="${p2.output.base}/selfhosting" />
		<antcall target="extract">
			<param name="extract-src" value="${selfhosting.feature.zip.name}" />
			<param name="extract-dest" value="${p2.selfhosting.dir}" />
		</antcall>

		<!-- note: use the full path to the exe here, otherwise it seems to call the exe from the builder -->
		<exec executable="${p2.generator.dir}/eclipse/eclipse" failonerror="false" timeout="900000">
			<arg line="-vm ${java15-home}/bin/java" />
			<arg line="-application org.eclipse.equinox.p2.metadata.generator.EclipseGenerator" />
			<arg line="-consoleLog" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-p2.os win32" />
			<arg line="-base ${p2.selfhosting.dir}/eclipse" />
			<arg line="-features ${p2.selfhosting.dir}/eclipse/features" />
			<arg line="-bundles ${p2.selfhosting.dir}/eclipse/plugins" />
			<arg line="-rootVersion 0.1.0.${buildId}" />
			<arg line="-root selfhosting" />
			<arg line="-flavor ${p2.flavor}" />
			<arg line="-publishArtifacts" />
			<arg line="-metadataRepository file:${p2.metadata.repo}" />
			<arg line="-artifactRepository file:${p2.artifact.repo}" />
			<arg line="-noDefaultIUs" />
			<arg line="-append" />
		</exec>
	</target>

	<target name="generate.metadata.userUI">
		<path id="userui.feature.zip.path">
			<fileset dir="${buildDirectory}/${buildId}">
				<include name="**/org.eclipse.equinox.p2.user.ui.feature-${buildId}-win32.win32.x86.zip" />
			</fileset>
		</path>
		<property name="userui.feature.zip.name" refid="userui.feature.zip.path" />
		<property name="p2.userui.dir" value="${p2.output.base}/userui" />
		<antcall target="extract">
			<param name="extract-src" value="${userui.feature.zip.name}" />
			<param name="extract-dest" value="${p2.userui.dir}" />
		</antcall>

		<!-- note: use the full path to the exe here, otherwise it seems to call the exe from the builder -->
		<exec executable="${p2.generator.dir}/eclipse/eclipse" failonerror="false" timeout="900000">
			<arg line="-vm ${java15-home}/bin/java" />
			<arg line="-application org.eclipse.equinox.p2.metadata.generator.EclipseGenerator" />
			<arg line="-consoleLog" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-p2.os win32" />
			<arg line="-base ${p2.userui.dir}/eclipse" />
			<arg line="-features ${p2.userui.dir}/eclipse/features" />
			<arg line="-bundles ${p2.userui.dir}/eclipse/plugins" />
			<arg line="-root userui" />
			<arg line="-rootVersion 0.1.0.${buildId}" />
			<arg line="-flavor ${p2.flavor}" />
			<arg line="-publishArtifacts" />
			<arg line="-metadataRepository file:${p2.metadata.repo}" />
			<arg line="-artifactRepository file:${p2.artifact.repo}" />
			<arg line="-noDefaultIUs" />
			<arg line="-append" />
		</exec>
	</target>

	<target name="generate.metadata.sdk">
		<property name="p2.sdk" value="${p2.output.base}/sdk" />
		<mkdir dir="${p2.sdk}" />
		<antcall target="extract">
			<param name="extract-src" value="${sdk.archive}" />
			<param name="extract-dest" value="${p2.sdk}" />
		</antcall>

		<!-- note: use the full path to the exe here, otherwise it seems to call the exe from the builder -->
		<exec executable="${p2.generator.dir}/eclipse/eclipse" failonerror="false" timeout="900000">
			<arg line="-vm ${java15-home}/bin/java" />
			<arg line="-application org.eclipse.equinox.p2.metadata.generator.EclipseGenerator" />
			<arg line="-consoleLog" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-p2.os win32" />
			<arg line="-metadataRepository file:${p2.metadata.repo}" />
			<arg line="-artifactRepository file:${p2.artifact.repo}" />
			<arg line="-source ${p2.sdk}/eclipse" />
			<arg line="-rootVersion 3.4.0.${buildId}" />
			<arg line="-root sdk" />
			<arg line="-flavor ${p2.flavor}" />
			<arg line="-publishArtifacts" />
			<arg line="-append" />
		</exec>
	</target>

	<target name="run.director">
		<path id="director.zip.path">
			<fileset dir="${buildDirectory}/${buildId}">
				<include name="**/org.eclipse.equinox.p2.director.feature-${buildId}-linux.gtk.x86.zip" />
			</fileset>
		</path>
		<property name="director.zip.name" refid="director.zip.path" />
		<property name="p2.director.dir" value="${p2.output.base}/director" />
		<antcall target="extract">
			<param name="extract-src" value="${director.zip.name}" />
			<param name="extract-dest" value="${p2.director.dir}" />
		</antcall>
		<antcall target="extract">
			<param name="extract-src" value="${rcp.archive}" />
			<param name="extract-dest" value="${p2.director.dir}" />
		</antcall>
		<chmod file="${p2.director.dir}/eclipse/eclipse" perm="777" />
		<copy file="files/config.ini.director" tofile="${p2.director.dir}/eclipse/configuration/config.ini" overwrite="true" />
		<copy todir="${p2.director.dir}/eclipse/plugins">
			<fileset dir="files">
				<include name="**/*.jar" />
			</fileset>
		</copy>

		<!-- note: use the full path to the exe here, otherwise it seems to call the exe from the builder -->
		<exec executable="${p2.director.dir}/eclipse/eclipse" failonerror="false" timeout="900000">
			<arg line="-vm ${java15-home}/bin/java" />
			<arg line="-application org.eclipse.equinox.p2.director.app.application" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-flavor ${p2.flavor}" />
			<arg line="-installIU agent" />
			<arg line="-p2.os win32" />
			<arg line="-p2.ws win32" />
			<arg line="-p2.arch x86" />
			<arg line="-roaming" />
			<arg line="-profile EquinoxProvisioningUI" />
			<arg line="-metadataRepository file:${p2.metadata.repo}" />
			<arg line="-artifactRepository file:${p2.artifact.repo}" />
			<arg line="-destination ${p2.install.path}" />
			<arg line="-bundlepool ${p2.install.path}" />
			<arg line="-vmargs" />
			<arg line="-Declipse.p2.data.area=${p2.install.path}/configuration/org.eclipse.equinox.p2.core/agentdata" />
		</exec>

		<!-- Delete the other copy of ICU until bug 199299 is fixed -->
		<!--
		<delete failonerror="false">
			<fileset dir="${p2.install.path}/plugins">
				<include name="**/com.ibm.icu_*.jar" />
			</fileset> 
		</delete>
		-->

	</target>

	<target name="zip.install">
		<zip destfile="${p2.output.base}/equinox-p2-agent-${buildId}-win32.zip" basedir="${p2.install.folder.parent}" includes="${p2.install.folder}/**" />
		<copy file="${p2.output.base}/equinox-p2-agent-${buildId}-win32.zip" todir="${equinoxPostingDirectory}/${buildLabel}" />

		<zip destfile="${p2.output.base}/equinox-p2-servers-${buildId}.zip" basedir="${p2.repo.root}" includes="**/*" />

		<copy todir="${equinoxPostingDirectory}/${buildLabel}" file="${p2.output.base}/equinox-p2-servers-${buildId}.zip" />

		<copy todir="${equinoxPostingDirectory}/${buildLabel}">
			<fileset dir="${buildDirectory}/${buildId}">
				<include name="**/org.eclipse.equinox.p2.selfhosting.feature-${buildId}-win32.win32.x86.zip" />
				<include name="**/org.eclipse.equinox.p2.user.ui.feature-${buildId}-win32.win32.x86.zip" />
			</fileset>
		</copy>

	</target>

	<target name="extract">
		<!-- set the target based on which OS we are running on since there
		is a difference between unzip and untar/gunzip -->
		<condition property="extract.target" value="extract-zip">
			<contains string="${extract-src}" substring=".zip" />
		</condition>
		<condition property="extract.target" value="extract-tar.gz">
			<contains string="${extract-src}" substring=".tar.gz" />
		</condition>
		<antcall target="${extract.target}" />
	</target>

	<target name="extract-zip">
		<unzip src="${extract-src}" dest="${extract-dest}" />
	</target>

	<target name="extract-tar.gz">
		<exec dir="${extract-dest}" executable="tar">
			<arg line="-xzf ${extract-src}" />
		</exec>
	</target>

</project>

