<project name="provisioning build" default="build">

	<!--
		- Build the agent product. (win32)
		- Build the metadata generator. (linux)
		- Run the metadata generator on the agent. 
		- Build the director. (linux)
		- Run the director and install a new agent.
		- Zip up the agent.
		- Build the self-hosting feature. (win32)
		- Run the metadata generator on the self-hosting feature.
		- Run the metadata generator on the Eclipse SDK.
	-->
	<target name="init">
		<property name="p2.root" value="${buildDirectory}/${buildId}/p2temp" />
		<mkdir dir="${p2.root}" />
		<property name="p2.output.base" value="${p2.root}/equinox.p2.build" />
		<mkdir dir="${p2.output.base}" />
		<property name="p2.director.dir" value="${p2.output.base}/director" />
		<mkdir dir="${p2.director.dir}" />

		<property name="sdk.archive" value="${postingDirectory}/${buildLabel}/eclipse-SDK-${buildId}-linux-gtk-ppc.tar.gz" />
		<property name="rcp.delta.archive" value="${postingDirectory}/${buildLabel}/eclipse-RCP-${buildId}-delta-pack.zip" />
		<property name="rcp.archive" value="${postingDirectory}/${buildLabel}/eclipse-RCP-${buildId}-linux-gtk-ppc.tar.gz" />
		<property name="releng.tools.archive" value="${postingDirectory}/${buildLabel}/org.eclipse.releng.tools-${buildId}.zip" />

		<property name="p2.agent.install.win32" value="${p2.output.base}/agent.install.win32" />
		<mkdir dir="${p2.agent.install.win32}" />
		<property name="p2.agent.install.linux" value="${p2.output.base}/agent.install.linux" />
		<mkdir dir="${p2.agent.install.linux}" />
		<property name="p2.agent.install.macosx" value="${p2.output.base}/agent.install.macosx" />
		<mkdir dir="${p2.agent.install.macosx}" />
		<property name="p2.install.folder" value="equinox.p2" />
		<mkdir dir="${p2.agent.install.win32}/${p2.install.folder}" />
		<mkdir dir="${p2.agent.install.linux}/${p2.install.folder}" />
		<mkdir dir="${p2.agent.install.macosx}/${p2.install.folder}" />
		<property name="base" value="${p2.output.base}/base" />
		<mkdir dir="${base}" />

		<property file="build.properties" />

		<property name="p2.updateSite" value="${updateSite}" />
		<property name="p2.site.xml" value="file:${updateSite}/site.xml" />
		<property name="p2.generator.dir" value="${p2.output.base}/generator" />
		<mkdir dir="${p2.generator.dir}" />
		<property name="p2.metadata.repo" value="${p2.updateSite}/" />
		<mkdir dir="${p2.metadata.repo}" />
		<property name="p2.artifact.repo" value="${p2.updateSite}/" />
		<mkdir dir="${p2.artifact.repo}" />
		<property name="p2.flavor" value="tooling" />
		<property name="p2.agent.version" value="0.1.0.${buildId}" />
	</target>

	<target name="build" depends="init">
		<!-- Ensure that we are building against the same version that we
			are generating the metadata for -->
		<antcall target="extract">
			<param name="extract-src" value="${sdk.archive}" />
			<param name="extract-dest" value="${base}" />
		</antcall>
		<antcall target="extract">
			<param name="extract-src" value="${rcp.delta.archive}" />
			<param name="extract-dest" value="${base}" />
		</antcall>
		<antcall target="build.features" />
		<!-- Generate the metadata for the agent and create the install first due
			to bug 199317... installing will install all fragments and we don't want the
			ones from the SDK -->
		<antcall target="setup.generator" />
		<antcall target="setup.director" />

		<antcall target="generate.metadata.agent" />

		<antcall target="run.director">
			<param name="p2.agent.install.path" value="${p2.agent.install.win32}" />
			<param name="p2.os" value="win32" />
			<param name="p2.ws" value="win32" />
			<param name="p2.arch" value="x86" />
		</antcall>

		<antcall target="run.director">
			<param name="p2.agent.install.path" value="${p2.agent.install.linux}" />
			<param name="p2.os" value="linux" />
			<param name="p2.ws" value="gtk" />
			<param name="p2.arch" value="x86" />
		</antcall>

		<antcall target="run.director">
			<param name="p2.agent.install.path" value="${p2.agent.install.macosx}" />
			<param name="p2.os" value="macosx" />
			<param name="p2.ws" value="carbon" />
			<param name="p2.arch" value="ppc" />
		</antcall>

		<antcall target="generate.metadata.selfhosting" />
		<antcall target="generate.metadata.userUI" />
		<antcall target="generate.metadata.sdk" />
		<antcall target="generate.metadata.releng.tools" />
		<antcall target="zip.install" />

	</target>

	<target name="build.features">
		<ant antfile="${eclipse.pdebuild.scripts}/build.xml">
			<property name="builder" value="${basedir}" />
		</ant>
	</target>

	<target name="setup.generator">
		<path id="feature.zip.path">
			<fileset dir="${buildDirectory}/${buildId}">
				<include name="**/org.eclipse.equinox.p2.generator.feature-${buildId}.zip" />
			</fileset>
		</path>
		<property name="feature.zip.name" refid="feature.zip.path" />
		<antcall target="extract">
			<param name="extract-src" value="${feature.zip.name}" />
			<param name="extract-dest" value="${p2.generator.dir}" />
		</antcall>
		<antcall target="extract">
			<param name="extract-src" value="${rcp.archive}" />
			<param name="extract-dest" value="${p2.generator.dir}" />
		</antcall>

		<chmod file="${p2.generator.dir}/eclipse/eclipse" perm="777" />
		<copy file="files/config.ini.generator" tofile="${p2.generator.dir}/eclipse/configuration/config.ini" overwrite="true" />
		<copy todir="${p2.generator.dir}/eclipse/plugins">
			<fileset dir="files">
				<include name="**/*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="generate.metadata.agent">
		<property name="p2.agent.dir" value="${p2.output.base}/agent" />
		<mkdir dir="${p2.agent.dir}" />
		<antcall target="extract">
			<param name="extract-src" value="${rcp.delta.archive}" />
			<param name="extract-dest" value="${p2.agent.dir}" />
		</antcall>
		<antcall target="extract">
			<param name="extract-src" value="${rcp.archive}" />
			<param name="extract-dest" value="${p2.agent.dir}" />
		</antcall>

		<path id="agent.zip.path">
			<fileset dir="${buildDirectory}/${buildId}">
				<include name="**/org.eclipse.equinox.p2.agent.feature-${buildId}.zip" />
			</fileset>
		</path>
		<property name="agent.zip.name" refid="agent.zip.path" />
		<antcall target="extract">
			<param name="extract-src" value="${agent.zip.name}" />
			<param name="extract-dest" value="${p2.agent.dir}" />
		</antcall>
		<copy file="files/config.ini.agent" tofile="${p2.agent.dir}/eclipse/configuration/config.ini" overwrite="true" />
		<copy todir="${p2.agent.dir}/eclipse/plugins">
			<fileset dir="files">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${p2.agent.dir}/eclipse/plugins" includes="**/org.eclipse.*.source.*/**" />
			<fileset dir="${p2.agent.dir}/eclipse/plugins" includes="**/org.eclipse.jdt.*" />
			<fileset dir="${p2.agent.dir}/eclipse/plugins" includes="**/org.eclipse.update.core.*" />
			<fileset dir="${p2.agent.dir}/eclipse/plugins" includes="**/org.eclipse.core.filesystem.*" />
			<fileset dir="${p2.agent.dir}/eclipse/plugins" includes="**/org.eclipse.core.resources.*" />
			<fileset dir="${p2.agent.dir}/eclipse/plugins" includes="**/org.eclipse.ui.win32*" />
			<fileset dir="${p2.agent.dir}/eclipse/plugins" includes="**/com.ibm.icu_*" />
			<fileset dir="${p2.agent.dir}/eclipse/features" includes="**/org.eclipse.rcp*/**" />
		</delete>

		<antcall target="run.generator">
			<param name="p2.generator.source" value="${p2.agent.dir}/eclipse" />
			<param name="p2.generator.root" value="agent" />
			<param name="p2.generator.root.version" value="${p2.agent.version}" />
		</antcall>
	</target>

	<target name="generate.metadata.selfhosting">
		<property name="p2.selfhosting.dir" value="${p2.output.base}/selfhosting" />
		<path id="selfhosting.feature.zip.path">
			<fileset dir="${buildDirectory}/${buildId}">
				<include name="**/org.eclipse.equinox.p2.selfhosting.feature-${buildId}.zip" />
			</fileset>
		</path>
		<property name="selfhosting.feature.zip.name" refid="selfhosting.feature.zip.path" />
		<antcall target="extract">
			<param name="extract-src" value="${selfhosting.feature.zip.name}" />
			<param name="extract-dest" value="${p2.selfhosting.dir}" />
		</antcall>

		<antcall target="run.generator.feature.based">
			<param name="p2.generator.base" value="${p2.selfhosting.dir}/eclipse" />
			<param name="p2.generator.feature.dir" value="${p2.selfhosting.dir}/eclipse/features" />
			<param name="p2.generator.plugins.dir" value="${p2.selfhosting.dir}/eclipse/plugins" />
			<param name="p2.generator.root.version" value="0.1.0.${buildId}" />
			<param name="p2.generator.root" value="selfhosting" />
		</antcall>
	</target>

	<!--
	p2.generator.base
	p2.generator.feature.dir
	p2.generator.plugins.dir
	p2.generator.root.version
	p2.generator.root
	-->
	<target name="run.generator.feature.based">
		<!-- note: use the full path to the exe here, otherwise it seems to call the exe from the builder -->
		<exec executable="${p2.generator.dir}/eclipse/eclipse" failonerror="false" timeout="900000">
			<arg line="-vm ${java15-home}/bin/java" />
			<arg line="-application org.eclipse.equinox.p2.metadata.generator.EclipseGenerator" />
			<arg line="-consoleLog" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-base ${p2.generator.base}" />
			<arg line="-features ${p2.generator.feature.dir}" />
			<arg line="-bundles ${p2.generator.plugins.dir}" />
			<arg line="-rootVersion ${p2.generator.root.version}" />
			<arg line="-site ${p2.site.xml}" />
			<arg line="-root ${p2.generator.root}" />
			<arg line="-flavor ${p2.flavor}" />
			<arg line="-publishArtifacts" />
			<arg line="-metadataRepository file:${p2.metadata.repo}" />
			<arg line="-artifactRepository file:${p2.artifact.repo}" />
			<arg line="-noDefaultIUs" />
			<arg line="-append" />
		</exec>
	</target>

	<target name="generate.metadata.userUI">
		<property name="p2.userui.dir" value="${p2.output.base}/userui" />
		<path id="userui.feature.zip.path">
			<fileset dir="${buildDirectory}/${buildId}">
				<include name="**/org.eclipse.equinox.p2.user.ui.feature-${buildId}.zip" />
			</fileset>
		</path>
		<property name="userui.feature.zip.name" refid="userui.feature.zip.path" />
		<antcall target="extract">
			<param name="extract-src" value="${userui.feature.zip.name}" />
			<param name="extract-dest" value="${p2.userui.dir}" />
		</antcall>

		<antcall target="run.generator.feature.based">
			<param name="p2.generator.base" value="${p2.userui.dir}/eclipse" />
			<param name="p2.generator.feature.dir" value="${p2.userui.dir}/eclipse/features" />
			<param name="p2.generator.plugins.dir" value="${p2.userui.dir}/eclipse/plugins" />
			<param name="p2.generator.root.version" value="0.1.0.${buildId}" />
			<param name="p2.generator.root" value="userui" />
		</antcall>
	</target>

	<target name="generate.metadata.releng.tools">
		<property name="p2.releng.tools.dir" value="${p2.output.base}/releng.tools" />
		<mkdir dir="${p2.releng.tools.dir}" />
		<antcall target="extract">
			<param name="extract-src" value="${releng.tools.archive}" />
			<param name="extract-dest" value="${p2.releng.tools.dir}" />
		</antcall>

		<antcall target="run.generator.feature.based">
			<param name="p2.generator.base" value="${p2.releng.tools.dir}/eclipse" />
			<param name="p2.generator.feature.dir" value="${p2.releng.tools.dir}/eclipse/features" />
			<param name="p2.generator.plugins.dir" value="${p2.releng.tools.dir}/eclipse/plugins" />
			<param name="p2.generator.root.version" value="3.2.100.${buildId}" />
			<param name="p2.generator.root" value="releng.tools" />
		</antcall>
	</target>

	<!--
	p2.generator.source
	p2.generator.root
	p2.generator.root.version
	-->
	<target name="run.generator">
		<!-- note: use the full path to the exe here, otherwise it seems to call the exe from the builder -->
		<exec executable="${p2.generator.dir}/eclipse/eclipse" failonerror="false" timeout="900000">
			<arg line="-vm ${java15-home}/bin/java" />
			<arg line="-application org.eclipse.equinox.p2.metadata.generator.EclipseGenerator" />
			<arg line="-consoleLog" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-metadataRepository file:${p2.metadata.repo}" />
			<arg line="-artifactRepository file:${p2.artifact.repo}" />
			<arg line="-source ${p2.generator.source}" />
			<arg line="-site ${p2.site.xml}" />
			<arg line="-rootVersion ${p2.generator.root.version}" />
			<arg line="-root ${p2.generator.root}" />
			<arg line="-flavor ${p2.flavor}" />
			<arg line="-publishArtifacts" />
			<arg line="-append" />
		</exec>
	</target>

	<target name="generate.metadata.sdk">
		<property name="p2.sdk.dir" value="${p2.output.base}/sdk" />
		<mkdir dir="${p2.sdk.dir}" />
		<antcall target="extract">
			<param name="extract-src" value="${sdk.archive}" />
			<param name="extract-dest" value="${p2.sdk.dir}" />
		</antcall>
		<antcall target="extract">
			<param name="extract-src" value="${rcp.delta.archive}" />
			<param name="extract-dest" value="${p2.sdk.dir}" />
		</antcall>

		<antcall target="run.generator">
			<param name="p2.generator.source" value="${p2.sdk.dir}/eclipse" />
			<param name="p2.generator.root" value="sdk" />
			<param name="p2.generator.root.version" value="3.4.0.${buildId}" />
		</antcall>
	</target>

	<target name="setup.director">
		<path id="director.zip.path">
			<fileset dir="${buildDirectory}/${buildId}">
				<include name="**/org.eclipse.equinox.p2.director.feature-${buildId}.zip" />
			</fileset>
		</path>
		<property name="director.zip.name" refid="director.zip.path" />
		<antcall target="extract">
			<param name="extract-src" value="${director.zip.name}" />
			<param name="extract-dest" value="${p2.director.dir}" />
		</antcall>
		<antcall target="extract">
			<param name="extract-src" value="${rcp.archive}" />
			<param name="extract-dest" value="${p2.director.dir}" />
		</antcall>
		<chmod file="${p2.director.dir}/eclipse/eclipse" perm="777" />
		<copy file="files/config.ini.director" tofile="${p2.director.dir}/eclipse/configuration/config.ini" overwrite="true" />
		<copy todir="${p2.director.dir}/eclipse/plugins">
			<fileset dir="files">
				<include name="**/*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="run.director">
		<!-- note: use the full path to the exe here, otherwise it seems to call the exe from the builder -->
		<exec executable="${p2.director.dir}/eclipse/eclipse" failonerror="false" timeout="900000">
			<arg line="-vm ${java15-home}/bin/java" />
			<arg line="-application org.eclipse.equinox.p2.director.app.application" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-flavor ${p2.flavor}" />
			<arg line="-installIU agent" />
			<arg line="-version ${p2.agent.version}" />
			<arg line="-p2.os ${p2.os}" />
			<arg line="-p2.ws ${p2.ws}" />
			<arg line="-p2.arch ${p2.arch}" />
			<arg line="-roaming" />
			<arg line="-profile EquinoxProvisioningUI" />
			<arg line="-metadataRepository file:${p2.metadata.repo}" />
			<arg line="-artifactRepository file:${p2.artifact.repo}" />
			<arg line="-destination ${p2.agent.install.path}" />
			<arg line="-bundlepool ${p2.agent.install.path}" />
			<arg line="-vmargs" />
			<arg line="-Declipse.p2.data.area=${p2.agent.install.path}/p2" />
		</exec>

		<!-- delete the metadata cache as well as the artifacts for unzipped bundles -->
		<delete failonerror="false" includeEmptyDirs="true" dir="${p2.agent.install.path}/p2/org.eclipse.equinox.p2.core/cache" />

		<!-- Delete the other copy of ICU until bug 199299 is fixed -->
		<!--
		<delete failonerror="false">
			<fileset dir="${p2.install.path}/plugins">
				<include name="**/com.ibm.icu_*.jar" />
			</fileset> 
		</delete>
		-->

	</target>

	<target name="zip.install">
		<property name="output.dir" value="${equinoxPostingDirectory}/${buildLabel}" />
		<mkdir dir="${output.dir}" />

		<!-- win32 -->
		<zip destfile="${output.dir}/equinox-p2-agent-${buildId}-win32.zip" basedir="${p2.agent.install.win32}" includes="**/*" />

		<!-- linux -->
		<antcall target="p2.tar">
			<param name="tar.base.dir" value="${p2.agent.install.linux}" />
			<param name="tar.base.filename" value="${output.dir}/equinox-p2-agent-${buildId}-linux.tar" />
		</antcall>

		<!-- macosx -->
		<antcall target="p2.tar">
			<param name="tar.base.dir" value="${p2.agent.install.macosx}" />
			<param name="tar.base.filename" value="${output.dir}/equinox-p2-agent-${buildId}-macosx.tar" />
		</antcall>

		<!-- other features -->
		<copy todir="${output.dir}">
			<fileset dir="${buildDirectory}/${buildId}">
				<include name="**/org.eclipse.equinox.p2.selfhosting.feature-${buildId}.zip" />
				<include name="**/org.eclipse.equinox.p2.user.ui.feature-${buildId}.zip" />
			</fileset>
		</copy>
	</target>

	<target name="p2.tar">
		<echo message="Building tar ${tar.base.filename} from ${tar.base.dir}/*" />
		<exec dir="${tar.base.dir}" executable="sh">
			<arg line='-c "tar -cvf ${tar.base.filename} *"' />
		</exec>
		<gzip zipfile="${tar.base.filename}.gz" src="${tar.base.filename}" />
		<delete file="${tar.base.filename}" />
	</target>

	<target name="extract">
		<!-- set the target based on which OS we are running on since there
		is a difference between unzip and untar/gunzip -->
		<condition property="extract.target" value="extract-zip">
			<contains string="${extract-src}" substring=".zip" />
		</condition>
		<condition property="extract.target" value="extract-tar.gz">
			<contains string="${extract-src}" substring=".tar.gz" />
		</condition>
		<antcall target="${extract.target}" />
	</target>

	<target name="extract-zip">
		<unzip src="${extract-src}" dest="${extract-dest}" />
	</target>

	<target name="extract-tar.gz">
		<echo message="Expanding ${extract-src} into ${extract-dest}" />
		<exec dir="${extract-dest}" executable="tar">
			<arg line="-xzf ${extract-src}" />
		</exec>
	</target>

</project>

