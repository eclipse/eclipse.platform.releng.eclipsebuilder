<project name="Build Repos" default="all" basedir=".">

	<target name="init">
		<property name="featureTempRoot" value="${equinox.build.configs}/equinox" />
		<property name="featureTempDir" value="featureTemp" />
		<property name="featureTemp" value="${featureTempRoot}/${featureTempDir}" />
	</target>

	<target name="all" depends="init">
		<antcall target="equinoxsdk" />	
		<antcall target="master-equinox" />
	</target>

	<target name="equinoxsdk">
		<property name="archiveRoot" value="equinox-SDK-${buildId}" />
		<buildRepos feature="org.eclipse.equinox.sdk" archiveName="${archiveRoot}.zip" />
	</target>

	<target name="master-equinox">
		<property name="archiveRoot" value="master-equinox-${buildId}" />
		<buildRepos feature="master-equinox" archiveName="${archiveRoot}.zip" />
		<property name="archiveName" value="${archiveRoot}.zip" />
		<!--unzip plug-ins to equinoxPostingDirectory-->
		<exec executable="unzip" dir="${equinoxPostingDirectory}/${buildLabel}">
			<arg line="-j ${archiveName} plugins/*.jar -x plugins/*jmx* plugins/*.source_* -d ${equinoxPostingDirectory}/${buildLabel}" />
		</exec>
	</target>


	<macrodef name="buildReposSource">
		<attribute name="feature" />
		<attribute name="archiveName" />

		<sequential>
			<property name="runtimeIU" value="@{feature}.feature.group" />
			<property name="sdkIU" value="@{feature}.source.feature.group" />
			<delete dir="${featureTemp}" />
			<mkdir dir="${featureTemp}" />
			<p2.mirror source="file://${buildRepo}">
				<destination kind="metadata" location="file://${featureTemp}" name="@{feature} Repo" format="file://${buildRepo}" />
				<destination kind="artifact" location="file://${featureTemp}" name="@{feature} Repo" format="file://${buildRepo}" />
				<iu id="${runtimeIU}" version="" />
				<iu id="${sdkIU}" version="" />
				<slicingOptions platformFilter="true" includeOptional="false" includeNonGreedy="false" followStrict="true" />
			</p2.mirror>
			<p2.remove.iu>
				<repository location="file://${featureTemp}" />
				<iu query="" artifacts="(format=packed)" />
			</p2.remove.iu>
			<!-- assemble compressed files and create checksums -->
			<antcall target="compress">
				<param name="archiveName" value="@{archiveName}" />
				<param name="dir" value="${featureTemp}" />
			</antcall>
		</sequential>
	</macrodef>

	<macrodef name="buildRepos">
		<attribute name="feature" />
		<attribute name="archiveName" />

		<sequential>
			<property name="runtimeIU" value="@{feature}.feature.group" />
			<delete dir="${featureTemp}" />
			<mkdir dir="${featureTemp}" />
			<p2.mirror source="file://${buildRepo}">
				<destination kind="metadata" location="file://${featureTemp}" name="@{feature} Repo" format="file://${buildRepo}" />
				<destination kind="artifact" location="file://${featureTemp}" name="@{feature} Repo" format="file://${buildRepo}" />
				<iu id="${runtimeIU}" version="" />
				<slicingOptions platformFilter="true" includeOptional="false" includeNonGreedy="false" followStrict="true" />
			</p2.mirror>
			<p2.remove.iu>
				<repository location="file://${featureTemp}" />
				<iu query="" artifacts="(format=packed)" />
			</p2.remove.iu>
			<!-- assemble compressed files and create checksums -->
			<antcall target="compress">
				<param name="archiveName" value="@{archiveName}" />
				<param name="dir" value="${featureTemp}" />
			</antcall>
		</sequential>
	</macrodef>

	<target name="compress">
		<!-- set the target based on which OS we are running on since there
		is a difference between unzip and untar/gunzip -->
		<property name="archiveFullPath" value="${equinoxPostingDirectory}/${buildLabel}/${archiveName}" />
		<condition property="compress.target" value="compress-zip">
			<contains string="${archiveName}" substring=".zip" />
		</condition>
		<condition property="compress.target" value="compress-tar.gz">
			<contains string="${archiveName}" substring=".tar.gz" />
		</condition>
		<antcall target="${compress.target}">
			<param name="dir" value="${featureTemp}" />
			<param name="filename" value="${archiveName}" />
		</antcall>
		<antcall target="generateChecksums">
			<param name="archiveName" value="${archiveName}" />
		</antcall>
	</target>

	<target name="compress-zip">
		<exec dir="${dir}" executable="zip">
			<arg line="-q ${dir}/${filename} -r ." />
		</exec>
		<move file="${dir}/${filename}" tofile="${archiveFullPath}" />
	</target>

	<target name="compress-tar.gz">
		<exec dir="${dir}" executable="sh">
			<arg line='-c "tar -cvzf ${dir}/${filename} *"' />
		</exec>
		<move file="${dir}/${filename}" tofile="${archiveFullPath}" />
	</target>

	<target name="generateChecksums">
		<mkdir dir="${equinoxPostingDirectory}/${buildLabel}/checksum" />
		<checksum file="${archiveFullPath}" property="md5" />
		<checksum file="${archiveFullPath}" algorithm="SHA" property="sha" />
		<parallel>
			<echo message="${md5} *${archiveName}" file="${equinoxPostingDirectory}/${buildLabel}/checksum/${archiveName}.md5" />
			<echo message="${sha} *${archiveName}" file="${equinoxPostingDirectory}/${buildLabel}/checksum/${archiveName}.sha1" />
		</parallel>
	</target>

</project>
