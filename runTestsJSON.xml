<!--
 Copyright (c) 2011 IBM Corporation and others.
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html

 Contributors:
     IBM Corporation - initial API and implementation
-->

<project name="Hudson-Tests" default="runTests">
		
	<property name="dropLocation" value="${buildDirectory}/${buildLabel}/drop" />
	<property name="TestDir" value="${base}/tests/${buildLabel}" />
	
	<target name="runTests" >
		<antcall target="junitTests" />
	
		<parallel>
			<antcall target="triggerHudsonTests"/>
			<antcall target="platformTests" />
		</parallel>		
		
		<antcall target="processResults" />
	</target>
	
	
	<target name="initProperties" >
		<condition property="buildDirectory" value="${basedir}/../../build" >
			<isset property="runTestsLocally" />
		</condition>
		<condition property="builder" value="${basedir}/.." >
			<isset property="runTestsLocally" />
		</condition>
		<property file="${builder}/build.properties" />
		<condition property="orionRepo" value="http://download.eclipse.org/orion/updates/0.3-${buildType}-builds" else="file:${buildDirectory}/buildRepo">
			<isset property="runTestsLocally"/>
		</condition>
	</target>
	
	<target name="installTests" depends="initProperties">
		<!-- combine the build repo with the platform repo -->
		<p2.composite.repository destination="file:${buildDirectory}/test/composite">
			<add location="${orionRepo}" />
			<add location="${eclipsePlatformRepo}"/>
			<add location="${orbitRepo}" />
		</p2.composite.repository>
		
		<!-- install server + tests feature -->
		<p2.director flavor="tooling" roaming="true" profile="OrionTests"  
					 extraArguments="-profileProperties org.eclipse.update.install.features=true"
					 metadataRepository="file:${buildDirectory}/test/composite"
					 artifactRepository="file:${buildDirectory}/test/composite" 
					 destination="${buildDirectory}/test/eclipse"
					 logFile="${p2.director.log}">
			<iu id="org.eclipse.orion" />
			<iu id="org.eclipse.orion.server.tests.feature.feature.group" />
			<iu id="org.eclipse.test" />
			<iu id="org.eclipse.ant.optional.junit" />
			<iu id="org.apache.derby" />
		</p2.director>	
		
	</target>
	
	<target name="junitTests" depends="installTests">
		<dirset id="testLib.ref" dir="${buildDirectory}/test/eclipse/plugins" includes="org.eclipse.test_*" />
		<property name="testLibrary" refid="testLib.ref" />
		
		<subant target="run">
			<property name="junit-stylesheet" value="${buildDirectory}/test/eclipse/plugins/${testLibrary}/JUNIT.XSL" />
            <property name="library-file" value="${buildDirectory}/test/eclipse/plugins/${testLibrary}/library.xml" />
			<property name="eclipse-home" value="${buildDirectory}/test/eclipse" />
			<fileset dir="${buildDirectory}/test/eclipse/plugins" includes="*/test.xml" />
			<property name="os" value="${osgi.os}" />
			<property name="ws" value="${osgi.ws}" />
			<property name="arch" value="${osgi.arch}" />
		</subant>
		
	</target>
	
	
	
	<target name="triggerHudsonTests" >
		
		<property environment="env" />
		
		<!-- /shared/eclipse/e4/build/e4/downloads -->
		<property name="baseURL" value="http://build.eclipse.org/eclipse/e4/build/e4/downloads" />
		<!-- <property name="JSON_buildZip" value="{&quot;name&quot;:&quot;buildZip&quot;,&quot;value&quot;:&quot;${baseURL}/${buildType}${timestamp}/test/${buildLabel}.zip&quot;}"/>
		<property name="JSON_repository" value="{&quot;name&quot;:&quot;repository&quot;,&quot;value&quot;:&quot;${baseURL}/target/0.3-${buildType}-builds/${buildLabel}&quot;}"/> -->
		
		<property name="JSON_SDK" value="{&quot;name&quot;:&quot;SDK&quot;,&quot;value&quot;:&quot;${baseURL}/${buildType}${timestamp}/test/eclipse-SDK-${buildId}-win32.zip&quot;}"/>
		<property name="JSON_Tests" value="{&quot;name&quot;:&quot;Tests&quot;,&quot;value&quot;:&quot;${baseURL}/${buildType}${timestamp}/test/eclipse-Automated-Tests-${buildId}.zip&quot;}"/>
		<property name="JSON_Platform" value="{&quot;name&quot;:&quot;Platform&quot;,&quot;value&quot;:&quot;${baseURL}/${buildType}${timestamp}/test/eclipse-platform-${buildId}-win32.zip&quot;}"/>
		<property name="JSON_Deltapack" value="{&quot;name&quot;:&quot;Deltapack&quot;,&quot;value&quot;:&quot;${baseURL}/${buildType}${timestamp}/test/eclipse-${buildId}-delta-pack.zip&quot;}"/>
		<property name="JSON_PlatformRelease" value="{&quot;name&quot;:&quot;PlatformRelease&quot;,&quot;value&quot;:&quot;http://download.eclipse.org/eclipse/downloads/drops/R-3.7.1-201109091335/eclipse-platform-3.7.1-win32.zip&quot;}"/>
		<!--current build repository too ? -->
		
		<property name="json" value="{&quot;parameter&quot;: [${JSON_SDK}, ${JSON_Tests},${JSON_Platform},${JSON_Deltapack},${JSON_PlatformRelease}] }"/>

		<!-- fetch the next hudson build number from the hudson job API -->
		<exec executable="curl">
			<arg line="-G" />
			<arg value="https://hudson.eclipse.org/hudson/job/JUnit-win2/api/json" />
			<arg line="-o ${buildDirectory}/nextBuildNumber" />
		</exec>
		<exec executable="bash" outputproperty="nextHudsonBuild">
			<arg value="-c"/>
			<arg value="grep -o 'nextBuildNumber&quot;:[0-9]*' ${buildDirectory}/nextBuildNumber | cut -d ':' -f 2"/>
		</exec>
		<echo message="Next hudson build number is ${nextHudsonBuild}."/>

		<echo message="${json}"/>
		<exec executable="curl">
			<arg line="-X POST" />
			<arg value="https://hudson.eclipse.org/hudson/job/JUnit-win2/build" />
			<arg line="-d token=${env.HUDSON_TOKEN}" />
			<arg value="--data-urlencode" />
			<arg value="json=${json}" />
		</exec>
		
		<property name="hudsonResultRootURL" value="https://hudson.eclipse.org/hudson/job/JUnit-win2/${nextHudsonBuild}/artifact" />
		<property name="hudsonResultURL" value="${hudsonResultRootURL}/IE-9.0-testResults.html" />		
		<!-- <antcall target="getHudsonResults" /> -->	
	</target>
	
	<target name="getHudsonResults" >
		<!-- wait for the test results to appear -->
		<echo message="Waiting for ${hudsonResultURL}." />
		<waitfor maxwait="30" maxwaitunit="minute" checkevery="30" checkeveryunit="second">
			<http url="${hudsonResultURL}" />
		</waitfor>

		<get ignoreerrors="true" src="${hudsonResultURL}" dest="${hudsonDownloadedHTML}"/>	
		<get ignoreerrors="true" src="${hudsonResultRootURL}/TEST-IE-9.0.Performance.xml" dest="${TestDir}/TEST-IE-9.0.Performance.xml" />
	</target>
	
	<target name="hudsonJsTests" >
		<!-- This target runs on the Hudson Windows Slave -->
		<property environment="env" />
		<property name="workingDir" value="${env.WORKSPACE}/${env.BUILD_NUMBER}" />
		
		<mkdir dir="${workingDir}/results"/>
		
		<get src="${buildZip}" dest="${workingDir}/build.zip" />
		<unzip src="${workingDir}/build.zip" dest="${workingDir}" />
		
		<apply executable="${java.home}/bin/java" parallel="false" >
			<arg line="-Dhttp.proxyHost=proxy.eclipse.org -Dhttp.proxyPort=9898 -Dhttp.nonProxyHosts=*.eclipse.org" />
			<arg line="-Dhttps.proxyHost=proxy.eclipse.org -Dhttps.proxyPort=9898 -Dhttps.nonProxyHosts=*.eclipse.org" />
			<arg line="-Dftp.proxyHost=proxy.eclipse.org -Dftp.proxyPort=9898 -Dftp.nonProxyHosts=*.eclipse.org" />
			<arg line="-jar ${workingDir}/JsTestDriver.jar" />
			<arg line="--port 42442" />
			<arg line="--tests all" />
			<arg line="--testOutput ${workingDir}/results" />
			<arg value="--browser" />
			<arg value="C:\\Program Files\\Internet Explorer\\iexplore.exe" />
			<arg value="--config" />
			<fileset dir="${workingDir}" includes="**/jsTestDriver.conf" />	
		</apply>
		
		<delete>
			<fileset dir="${env.WORKSPACE}" includes="*.xml" />
		</delete>
		
		<junitreport todir="${env.WORKSPACE}" tofile="IE-9.0-testResults.xml">
			<fileset dir="${workingDir}/results" includes="**/TEST-*.xml" />
		</junitreport>
		<copy todir="${env.WORKSPACE}" >
			<fileset dir="${workingDir}/results" includes="TEST-*.Performance.xml"/>
			<globmapper from="TEST-Microsoft_Internet_Explorer_90_Windows*" to="TEST-IE-9.0*" />
		</copy>
		<xslt style="${basedir}/../html/JUNIT.XSL" basedir="${env.WORKSPACE}" destdir="${env.WORKSPACE}" includes="IE-9.0-testResults.xml" />
		
		<delete dir="${workingDir}" />
	</target>
			

		
	<target name="platformTests" >
		<echo message="Launching Xvfb" />
		<exec executable="bash" failonerror="false" outputproperty="xvfbPID" >
			<arg value="${builder}/scripts/runTests.sh" />
			<arg line="-xvfb" />
		</exec>
		
		<echo message="Launching Orion Server" />
		<exec executable="bash" failonerror="false" outputproperty="serverPID" >
			<arg value="${builder}/scripts/runTests.sh" />
			<arg value="-server" />
			<arg value="${buildDirectory}/test/eclipse" />
		</exec>
		<echo message="Test Server process is: ${serverPID}"/>

		<!-- change server port to avoid collision with other processes on test machine -->
		<replace dir="${buildDirectory}/plugins" includes="**/jsTestDriver.conf" token="8080" value="7070"/>

		<apply executable="bash" parallel="false">
			<arg value="${builder}/scripts/runTests.sh" />
			<arg line="-id ${buildLabel}" />
			<arg value="-root" />
			<arg value="${base}" />
			<arg value="-javaHome"/>
			<arg value="${java.home}"/>
			<arg value="-testConf" />
			<fileset dir="${buildDirectory}/plugins" includes="**/jsTestDriver.conf" />
		</apply>
	
		<condition property="killXvfb" >
			<not><or>
				<length string="${xvfbPID}" length="1" />
				<length string="${xvfbPID}" length="2" />
			</or></not>
		</condition>
		
		<condition property="killServer" >
			<not><or>
				<length string="${serverPID}" length="1" />
				<length string="${serverPID}" length="2" />
			</or></not>
		</condition>
		
		<antcall target="killXvfb" />
		<antcall target="killServer" />
	</target>
		
	<target name="killXvfb" if="killXvfb">
		<exec executable="kill">
			<arg value="${xvfbPID}" />
		</exec>
	</target>
	
	<target name="killServer" if="killServer">
		<exec executable="kill">
			<arg value="${serverPID}" />
		</exec>
	</target>
	
	<macrodef name="updateTestResult">
		<attribute name="testFile" />
		<attribute name="token" />
		<sequential>
			<!-- grab the status summary -->
			<loadfile srcfile="${dropLocation}/@{testFile}" property="@{testFile}_status" failonerror="false" >
				<filterchain>
					<linecontainsregexp>
						<regexp pattern=".*&lt;td&gt;[0-9]*&lt;/td&gt;&lt;td&gt;[0-9]*&lt;/td&gt;&lt;td&gt;(NaN|([.0-9]*%))&lt;/td&gt;.*" />
					</linecontainsregexp>
					<replaceregex pattern="&lt;td&gt;" replace="&lt;td align=&quot;center&quot; style=&quot;color:black&quot;&gt;" flags="g" />
					<striplinebreaks/>
				</filterchain>
			</loadfile>

			<!-- if we couldn't read a status, use DNF -->
			<condition property="@{testFile}_value" value="${@{testFile}_status}" else="&lt;td align=&quot;center&quot; style=&quot;color:black&quot;&gt;DNF&lt;/td&gt;" >
				<isset property="@{testFile}_status" />
			</condition>
			
			<!-- results will be red if they arent't 100% -->
			<condition property="@{testFile}_color" value="black" else="red">
				<contains string="${@{testFile}_value}" substring="100.00%" />
			</condition>
			
			<!-- switch the color -->
			<loadresource property="@{testFile}_result" >
				<string value="${@{testFile}_value}" />
				<filterchain>
					<replaceregex pattern="color:black" replace="color:${@{testFile}_color}" flags="g"/>
				</filterchain>
			</loadresource>
			
			<echo message="${@{testFile}_result}"/>
			<!-- update the html -->
			<replace file="${dropLocation}/index.html">
				<replacefilter token="&lt;td&gt;@{token}" value="${@{testFile}_result}" />
			</replace>
		</sequential>
	</macrodef>
	
	<target name="processResults" >	
		<!-- js unit results -->
		<junitreport todir="${dropLocation}" tofile="Chrome-12.0-testResults.xml">
			<fileset dir="${TestDir}" includes="**/TEST-Chrome_120*.xml" />
		</junitreport>
		<junitreport todir="${dropLocation}" tofile="Firefox-8.0-testResults.xml">
			<fileset dir="${TestDir}" includes="**/TEST-Firefox_80*.xml" />
		</junitreport>
		<junitreport todir="${dropLocation}" tofile="Firefox-9.0-testResults.xml">
			<fileset dir="${TestDir}" includes="**/TEST-Firefox_90*.xml" />
		</junitreport>
		<junitreport todir="${dropLocation}" tofile="Performance-testResults.xml">
			<fileset dir="${TestDir}" includes="**/TEST-*.Performance.xml" />
		</junitreport>
		
		<xslt style="${builder}/html/JUNIT.XSL" basedir="${dropLocation}" destdir="${dropLocation}" includes="*.xml" />
		<delete>
			<fileset dir="${dropLocation}" includes="*-testResults.xml" />
		</delete>
		
		<!-- junit results -->
		<xslt style="${builder}/html/JUNIT.XSL" basedir="${buildDirectory}/test/eclipse/results" destdir="${dropLocation}" includes="*.xml" />
		
		<!-- update the test status -->
		<updateTestResult testFile="Chrome-12.0-testResults.html" token="@JS-CHROME12@"/>
		<updateTestResult testFile="Firefox-8.0-testResults.html" token="@JS-FIREFOX80@"/>
		<updateTestResult testFile="Firefox-9.0-testResults.html" token="@JS-FIREFOX90@"/>
		<updateTestResult testFile="IE-9.0-testResults.html" token="@JS-IE9@"/>
		<updateTestResult testFile="Performance-testResults.html" token="@PERFORMANCE@"/>
		<updateTestResult testFile="org.eclipse.orion.server.tests.AllServerTests.html" token="@SERVER-TESTS@"/>
		<updateTestResult testFile="org.eclipse.orion.server.tests.performance.AllPerformanceTests.html" token="@JUNIT_PERF_BASELINE@"/>
		
		<available file="${base}/logs/current.log" property="logExists" />
		<antcall target="copyLog" />
	</target>
	
	<target name="copyLog" if="logExists" >
		<copy file="${base}/logs/current.log" tofile="${dropLocation}/buildLog-${buildLabel}.txt" />
	</target>
</project>