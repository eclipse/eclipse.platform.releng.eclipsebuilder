<project
    name="buildAll"
    default="main"
    basedir=".">

    <!-- Steps 1. Create Eclipse SDK source drops. 2. Build master feature 
        which includes all features and plug-ins in eclipse and equinox projects, 
        with exception of tests. 3. Sign master zip, build root file drops and SDK 
        tests in parallel. 4. Repackage signed master.zip into eclipse and equinox 
        distributables. Start JUnit and performance tests as soon as JUnit test plug-ins 
        are packaged. 5. Post drops to eclipse and equinox download areas. Ant properties 
        available at runtime: - eclipse.pdebuild.scripts: the org.eclipse.eclipse.pdebuild.scripts 
        folder - eclipse.pdebuild.home: the root folder of pde build - eclipse.pdebuild.templates: 
        the templates folder -->

    <!--build monitoring information: e-mail, smtp server, build label -->
    <property file="monitor.properties" />

    <!-- 
         fetchCacheLocation is used by git fetch factories to pull code to. 
         We want a common, obvious, location. See bug 375788.
         https://bugs.eclipse.org/bugs/show_bug.cgi?id=375788
         TODO: would be best to use "supportDir" here, like we do "gitCache"
         but dont' currently "pass that in", so a little hard coded assumption 
         there that supportDir = $base/suppprtDir, where base=$buildRoot/build
         -->
    <property
        name="fetchCacheLocation"
        value="${base}/supportDir/scmCache" />

    <fail
        unless="buildId"
        message="buildId must be defined" />
    <fail
        unless="buildLabel"
        message="buildLabel must be defined" />
    <fail
        unless="postingDirectory"
        message="postingDirectory must be defined" />
    <fail
        unless="updateSite"
        message="updateSite must be defined" />
    <fail
        unless="eclipseStream"
        message="eclipseStream must be defined" />
    <fail
        unless="java15home"
        message="java15home should be defined. Required for signing" />


    <!--location of PDE Build configuration files for builder and packager -->
    <property
        name="eclipse.build.configs"
        value="${basedir}/eclipse/buildConfigs" />
    <property
        name="equinox.build.configs"
        value="${basedir}/equinox/buildConfigs" />



    <property
        name="sdkHelper"
        location="${eclipse.build.configs}/eclipse/helper.xml" />
    <property
        name="base.builder"
        value="${basedir}/../org.eclipse.releng.basebuilder" />


    <!--default buildDirectory -->
    <property
        name="buildDirectory"
        value="${basedir}/../src" />

    <property
        name="transformedRepoLocation"
        value="${buildDirectory}" />

    <!--default location for build output, parent to ${buildLabel} -->
    <property
        name="postingDirectory"
        value="${buildDirectory}" />
    <property
        name="equinoxPostingDirectory"
        value="${postingDirectory}/../../equinox/drops" />

    <!--p2 repo name -->
    <property
        name="p2.repo.name"
        value="&quot;Eclipse Project Test Site&quot;" />


    <!--location for buildlogs -->
    <property
        name="buildlogs"
        value="${postingDirectory}/${buildLabel}/buildlogs" />
    <mkdir dir="${buildlogs}" />

    <property
        name="resultsRepoLocation"
        value="${updateSite}/${eclipseStreamMajor}.${eclipseStreamMinor}-${buildType}-builds" />

    <property
        name="buildRepo"
        value="${resultsRepoLocation}/${buildId}" />

    <target
        name="main"
        depends="init">
        <echo message="DEBUG: properties at start of main buildAll.xml" />
        <echoproperties />
        <antcall target="buildEclipseSourceDrops" />
        <antcall target="buildMasterFeature" />

        <antcall target="updatePackProperties" />
        <antcall target="signMasterFeature" />
        <antcall target="buildSdkTestFeature" />
        <antcall target="packageEclipseDistributables" />
        <ant
            antfile="${eclipse.build.configs}/../helper.xml"
            target="verifyCompile" />
        <ant antfile="${equinox.build.configs}/equinox.prov/run.xml" />
        <antcall target="packageRepos" />
        <antcall target="apiTooling" />
        <antcall target="publishEclipse" />
        <antcall target="packageEquinoxDistributables" />
        <antcall target="publishEquinox" />
        <antcall target="finalprocessartifacts" />
        <antcall target="testEclipse" />

    </target>

    <target name="removeSomeUnwantedIUs">
        <!-- we remove very few here, since we have not packaged up anything.
             Most need to stay until we are done packaging things up, and are 
             removed in the final step. See p2.remove in process-artifacts.xml -->
        <fail unless="p2RemoveRepoDir" />
        <p2.remove.iu>
            <repository location="file://${p2RemoveRepoDir}" />
            <iu id="org.eclipse.equinox.slf4j.stub" />
        </p2.remove.iu>
    </target>
    
    <target
        name="init"
        depends="streamSpecificInit">
        <echo message="DEBUG: echo properties at start of init in buildAll.xml" />
        <echoproperties />

        <ant
            antfile="build.xml"
            target="init" />
        <property file="${buildDirectory}/label.properties" />
        <!-- may need for 3.8? But ... not 4.2 N? Eventually need checks 
            for eclipseStream and buildType? 
            
         <condition property="fetchTag" 
            value="CVS=HEAD,GIT=master;git://git.eclipse.org/gitroot/platform/eclipse.platform.ui.git=R3_development"> 
            <equals arg1="${buildType}" arg2="N" /> 
         </condition> 
         -->

        <!-- It will be a miracle of programming, if this works :) FYI, we 
            shouldn't have anything in CVS? but ... will leave for now -->
        <condition
            property="fetchTag"
            value="CVS=HEAD,GIT=origin/master;git://git.eclipse.org/gitroot/platform/eclipse.platform.git=origin/R4_HEAD;git://git.eclipse.org/gitroot/platform/eclipse.platform.common.git=origin/R4_HEAD;git://git.eclipse.org/gitroot/platform/eclipse.platform.releng.git=origin/R4_HEAD">
            <equals
                arg1="${buildType}"
                arg2="N" />
        </condition>

        <condition
            property="forceContextQualifier"
            value="${buildId}">
            <equals
                arg1="${buildType}"
                arg2="N" />
        </condition>
        <!--generic compiler args -->
        <property
            name="javacSource"
            value="1.3" />
        <property
            name="javacTarget"
            value="1.2" />
        <property
            name="javacDebugInfo"
            value="true" />
        <property
            name="javacFailOnError"
            value="false" />
        <property
            name="javacVerbose"
            value="false" />
        <property
            name="logExtension"
            value=".xml" />
        <!--this property required as of Eclipse 3.0 stream builds > 20031126 -->
        <property
            name="buildingOSGi"
            value="true" />
        <!--zip args -->
        <property
            name="zipargs"
            value="-y -qq" />
        <!--unzip args -->
        <property
            name="unzipArgs"
            value="-qq" />
        <property
            name="repo"
            value="${buildDirectory}/repo" />
        <property
            name="reposource"
            value="${buildDirectory}/reposource" />

        <property
            name="buildDirectoryAbsoluteTemp"
            value="${buildDirectory}/absolutetemp.txt" />
        <echo
            message="${reposource}"
            file="${buildDirectoryAbsoluteTemp}" />
        <replaceregexp
            file="${buildDirectoryAbsoluteTemp}"
            match="org.eclipse.releng.eclipsebuilder/../src/"
            replace="src/" />
        <loadfile
            property="buildDirectoryAbsolute"
            srcFile="${buildDirectoryAbsoluteTemp}"
            failonerror="false" />
        <!-- <delete file="${buildDirectoryAbsoluteTemp}" /> -->
        <echo message="buildDirectoryAbsolute: ${buildDirectoryAbsolute}" />

        <!--set local mirror location depending if hudson is running -->
        <condition
            property="localmirror"
            value="download.eclipse.org">
            <equals
                arg1="${hudson}"
                arg2="true" />
        </condition>
        <!-- <property name="localmirror" value="fullmoon.ottawa.ibm.com" 
            /> <echo message="DEBUG: localmirror: ${localmirror}" /> -->

        <!-- not needed for now ... could be a way to "build locally" -->
        <property
            name="cvsuser"
            value=":dummycvsuser:" />
        <property
            name="mapsRepo"
            value="dummycvsmapsRepo" />



        <!-- these values should be coming from the streamSpecificProperties 
            task/files -->
        <condition
            property="p2RepoURL"
            value="${p2repoI}">
            <equals
                arg1="${buildType}"
                arg2="I" />
        </condition>
        <condition
            property="p2RepoURL"
            value="${p2repoM}">
            <equals
                arg1="${buildType}"
                arg2="M" />
        </condition>
        <condition
            property="p2RepoURL"
            value="${p2repoN}">
            <equals
                arg1="${buildType}"
                arg2="N" />
        </condition>
        <property
            name="p2RepoURL"
            value="${p2repoN}" />
        <condition
            property="p2RepoPath"
            value="${p2repoIPath}">
            <equals
                arg1="${buildType}"
                arg2="I" />
        </condition>
        <condition
            property="p2RepoPath"
            value="${p2repoMPath}">
            <equals
                arg1="${buildType}"
                arg2="M" />
        </condition>
        <condition
            property="p2RepoPath"
            value="${p2repoNPath}">
            <equals
                arg1="${buildType}"
                arg2="N" />
        </condition>
        <property
            name="p2RepoPath"
            value="${p2repoXPath}" />
                
                <property
                    name="currentbuildrepo"
                    value="http://download.eclipse.org/eclipse/updates/${updateSiteSegment}-${buildType}-builds/${buildId}" />
                <echo message="currentbuildrepo: ${currentbuildrepo}" />
<!-- Not sure what this is for or if used in build or in tests, but which ever, this isn't right value, 
     so I copied the type of setting found in runTests2.xml
        <condition
            property="currentbuildrepo"
            value="https://hudson.eclipse.org/hudson/job/${BUILD_JOB_NAME}/${BUILD_BUILD_NUMBER}/artifact/builds/transfer/files/repo/${buildId}">
            <equals
                arg1="${hudson}"
                arg2="true" />
        </condition>
-->
        <property
            name="org.eclipse.equinox.p2.tests.current.build.repo"
            value="${p2RepoURL}/${buildId}" />
        <property
            name="org.eclipse.equinox.p2.tests.last.release.build.repo"
            value="${p2repopreviousR}" />
        <property
            name="previousPlatformZips"
            value="${buildDirectory}/previousPlatformZips" />
        <mkdir dir="${previousPlatformZips}" />

        <condition
            property="commonrepo"
            value="file:///gitroot/platform/eclipse.platform.releng.maps"
            else="git://git.eclipse.org/gitroot/platform/eclipse.platform.releng.maps">

            <equals
                arg1="${hudson}"
                arg2="true" />

        </condition>

    </target>

    <target
        name="streamSpecificInit"
        unless="streamSpecificInitComplete"
        depends="getMapProject">
        <echo message="DEBUG: executing streamSpecificInit" />


        <!-- mapsProject is the "top" of the maps project after it has been 
            checked out to the local working area (buildDirectory). TODO: its actually 
            hard coded is scores of places as "${buildDirectory}/maps/org.eclipse.releng" 
            but closest existing variable I could find what 'mapsRoot' which is ${buildDirectory}/maps/org.eclipse.releng/maps 
            so that (and others) should eventually be refactored to something like mapsRoot 
            = ${mapsProject}/maps" -->
        <property
            name="mapsProject"
            value="${buildDirectory}/maps/org.eclipse.releng" />
        <property
            name="configurationLocation"
            value="${mapsProject}/configuration" />

        <!-- TODO: I moved (copied) this from init, probably only needs to 
            be set once, but, needs to be set before loading the repo properties -->
        <!--set local mirror location depending if hudson is running -->
        <condition
            property="localmirror"
            value="download.eclipse.org">
            <equals
                arg1="${hudson}"
                arg2="true" />
        </condition>


        <!-- bug 376217: repos.properties is one of the files moved from 
            eclispebuild to maps project and into a common file, streamSpecific-build.properties -->
        <replace
            token="@localmirror@"
            file="${configurationLocation}/streamSpecific-build.properties"
            value="${localmirror}" />
        <!-- The reading/loading of the these streamSpecific-build.properties 
            is critical to several stream specific areas of code, so may have to be moved 
            "earlier"? Made it own task for depends on clauses? -->
        <loadproperties srcFile="${configurationLocation}/streamSpecific-build.properties" />

        <!-- now that we have maps (and we already have eclipseBuider from 
            masterBuild.sh, before calling buildAll.xml, then now its time to "overlay" 
            the stream specific files of eclipseBuild that are in the maps project, in 
            the folder named /org.eclipse.releng/configuration/eclipseBuilderOverlays -->
        <!-- TODO: semi hard code for now, figure out variables later maybe 
            do away with "supportDir" segment? maybe call 'base' and other variables 
            'eclipsebulder.base'? -->
        <property
            name="localbuilderDir"
            value="${base}/supportDir" />
        <copy
            verbose="true"
            failonerror="true"
            todir="${localbuilderDir}/org.eclipse.releng.eclipsebuilder"
            overwrite="true">
            <fileset dir="${localbuilderDir}/src/maps/org.eclipse.releng/configuration/eclipseBuilderOverlays/">
                <include name="**" />
            </fileset>
        </copy>

        <!-- now that we've done that little merge, let's "fix up" eclipseBuild 
            stuff that depends on exact version numbers -->
        <replace
            summary="true"
            dir="${localbuilderDir}/org.eclipse.releng.eclipsebuilder"
            token="@eclipseStream@"
            value="${eclipseStream}" />
        <replace
            summary="true"
            dir="${localbuilderDir}/org.eclipse.releng.eclipsebuilder"
            token="@eclipseStreamMajor@"
            value="${eclipseStreamMajor}" />
        <replace
            summary="true"
            dir="${localbuilderDir}/org.eclipse.releng.eclipsebuilder"
            token="@eclipseStreamMinor@"
            value="${eclipseStreamMinor}" />
        <!-- seems unlikely we'd ever need this all by itself, and not just 
            use eclipseStream, which should be all three fields <replace summary="true" 
            dir="${localbuilderDir}/org.eclipse.releng.eclipsebuilder" token="@eclipseStreamService@" 
            value="${eclipseStreamService}" /> -->

        <!-- no need to re-init the properties, once done (in this scope) 
            so no one else can ever set streamSpecificInitComplete properties. It is 
            our control property -->
        <property
            name="streamSpecificInitComplete"
            value="true" />
    </target>

    <!-- Note: we have moved getting the maps project much earlier in the 
        process that previous. They used to be retrieved in "customTaragets.xml", 
        and still are, or could be, if needed, but those tasks should detect that 
        they already are retrieved. I'm sure things could be re-arranged, but with 
        current code, to get stream specific values early enough, we will go ahead 
        and get them early. -->

    <!-- note: no check for "if maps local". Here we want to be sure to get 
        a fresh copy, but only once -->
    <target
        name="getMapProject"
        unless="mapProjectFetched">
        <!-- fail fast if these reuqired variables have not been defined 
            yet -->
        <fail
            unless="buildDirectory"
            message="buildDirectory not defined" />
        <fail
            unless="mapVersionTag"
            message="mapVersionTag not defined" />
        <fail
            unless="hudson"
            message="hudson(build.eclipse.org) not defined" />
        <!-- duplicated copy from 'init' for now -->
        <condition
            property="commonrepo"
            value="file:///gitroot/platform/eclipse.platform.releng.maps"
            else="git://git.eclipse.org/gitroot/platform/eclipse.platform.releng.maps">

            <equals
                arg1="${hudson}"
                arg2="true" />

        </condition>
        <echo message="DEBUG: echo properties at start of getMapProject" />
        <echoproperties />


        <property
            name="mapsGitRepo"
            value="${buildDirectory}/commonrepo" />
        <mkdir dir="${mapsGitRepo}" />
        <exec
            failonerror="true"
            executable="git"
            dir="${mapsGitRepo}">
            <arg line="clone ${commonrepo}" />
        </exec>
        <exec
            failonerror="true"
            executable="git"
            dir="${mapsGitRepo}/eclipse.platform.releng.maps">
            <arg line="checkout ${mapVersionTag}" />
        </exec>
        <delete dir="${buildDirectory}/maps" />
        <mkdir dir="${buildDirectory}/maps" />
        <!-- why not copy from common repo? why tar? 
        <exec failonerror="true" 
            executable="git" 
            dir="${buildDirectory}/maps" 
            output="${buildDirectory}/maps/maps.tar"> 
            <arg line="archive 
                 - -format=tar 
                 - -remote=${mapsGitRepo}/eclipse.platform.releng.maps 
                    ${mapVersionTag} org.eclipse.releng" /> 
         </exec> 
         <untar overwrite="true" src="${buildDirectory}/maps/maps.tar" 
            dest="${buildDirectory}/maps" /> 
         -->
        <copy
            overwrite="true"
            failonerror="true"
            verbose="true"
            todir="${buildDirectory}/maps">
            <fileset dir="${mapsGitRepo}/eclipse.platform.releng.maps">
                <include name="**" />
            </fileset>
        </copy>
        <property
            name="mapProjectFetched"
            value="true" />
    </target>

    <target name="buildECFMasterFeature">
        <ant
            antfile="build.xml"
            dir="${eclipse.pdebuild.scripts}"
            target="preBuild">
            <property
                name="builder"
                value="${eclipse.build.configs}/master-ecf" />
        </ant>
        <ant
            antfile="build.xml"
            dir="${eclipse.pdebuild.scripts}"
            target="fetch">
            <property
                name="builder"
                value="${eclipse.build.configs}/master-ecf" />
        </ant>
    </target>

    <target name="buildMasterFeature">
        <ant
            antfile="build.xml"
            dir="${basedir}">
            <property
                name="component"
                value="${eclipse.build.configs}/master" />
        </ant>
        <!-- <ant antfile="build.xml" dir="${basedir}"> <property name="component" 
            value="${eclipse.build.configs}/pdebuild" /> </ant> <p2.mirror source="file://${buildDirectory}/buildRepoPDEbuild" 
            ignoreErrors="true"> <destination compressed="true" name="${p2.repo.name}" 
            location="file:${buildRepo}" append="true" format="file:${reposource}" /> 
            <comparator comparator="org.eclipse.equinox.p2.repository.tools.jar.comparator"> 
            <repository location="${repoBaseline}" /> </comparator> </p2.mirror> -->
        <property
            name="archiveName"
            value="eclipse-master-${buildId}.zip" />
        <property
            name="archiveFullPath"
            value="${buildDirectory}/${buildLabel}/${archiveName}" />
        <exec
            dir="${buildDirectory}/buildRepo"
            executable="zip">
            <arg line="-r ${archiveFullPath} ." />
        </exec>
    </target>

    <target name="buildSdkTestFeature">
        <ant
            antfile="build.xml"
            dir="${basedir}"
            target="main">
            <property
                name="component"
                value="${eclipse.build.configs}/sdk.tests" />
        </ant>
        <ant
            antfile="build.xml"
            dir="${basedir}"
            target="main">
            <property
                name="component"
                value="${eclipse.build.configs}/test.framework" />
        </ant>
    </target>

    <!-- no longer build source drops, see bug 374428 -->
    <target name="buildEclipseSourceDrops">
        <!-- eventually may remove this whole task? when no longer build 
            source drops, see bug 374428 <property name="buildSourceDrops" value="true" 
            /> <echo message="DEBUG: eclipse.pdebuild.scripts: ${eclipse.pdebuild.scripts}" 
            /> <echo message="DEBUG: eclipse.build.configs: ${eclipse.build.configs}" 
            /> -->

        <!--examples are required to pull sample doc into SDK doc plug-ins -->
        <ant
            antfile="build.xml"
            dir="${eclipse.pdebuild.scripts}"
            target="preBuild">
            <property
                name="builder"
                value="${eclipse.build.configs}/sdk.examples" />
        </ant>
        <ant
            antfile="build.xml"
            dir="${eclipse.pdebuild.scripts}"
            target="fetch">
            <property
                name="builder"
                value="${eclipse.build.configs}/sdk.examples" />
        </ant>
        <antcall target="buildECFMasterFeature" />
        <!--fetch source and generate scripts for eclipse master feature -->
        <ant
            antfile="build.xml"
            dir="${eclipse.pdebuild.scripts}"
            target="preBuild">
            <property
                name="builder"
                value="${eclipse.build.configs}/master" />
        </ant>
        <ant
            antfile="build.xml"
            dir="${eclipse.pdebuild.scripts}"
            target="fetch">
            <property
                name="builder"
                value="${eclipse.build.configs}/master" />
        </ant>
        <ant
            antfile="build.xml"
            dir="${eclipse.pdebuild.scripts}"
            target="generate">
            <property
                name="builder"
                value="${eclipse.build.configs}/master" />
        </ant>
        <!--fetch source and generate scripts for eclipse SDK -->
        <ant
            antfile="build.xml"
            dir="${eclipse.pdebuild.scripts}"
            target="preBuild">
            <property
                name="builder"
                value="${eclipse.build.configs}/sdk" />
        </ant>
        <ant
            antfile="build.xml"
            dir="${eclipse.pdebuild.scripts}"
            target="fetch">
            <property
                name="builder"
                value="${eclipse.build.configs}/sdk" />
        </ant>
        <ant
            antfile="build.xml"
            dir="${eclipse.pdebuild.scripts}"
            target="generate">
            <property
                name="builder"
                value="${eclipse.build.configs}/sdk" />
        </ant>

        <replace
            file="${eclipse.build.configs}/sdk/srcBuild/build.properties"
            token="@build@"
            value="${buildId}" />
        <replace
            file="${eclipse.build.configs}/sdk/srcBuild/build"
            token="@build@"
            value="${buildId}" />
        <!-- These v tags are what's eventually used for qualifiers, even 
            if projects tagged with buildlabel -->
        <condition
            property="builderTag"
            value="v${buildId}">
            <or>
                <equals
                    arg1="${buildType}"
                    arg2="I" />
                <equals
                    arg1="${buildType}"
                    arg2="M" />
            </or>
        </condition>
        <property
            name="builderTag"
            value="HEAD" />
        <condition
            property="builderTag"
            value="v${buildId}">
            <equals
                arg1="${buildType}"
                arg2="I" />
        </condition>

    </target>

    <!-- 
         Note: even if do not want to "pack" at this point, we would want to process 
         artifacts, to fix up MD5 checksums. See bug 377437 for why MD5 
         checksums need to be fixed up (batch compiler). If we do not fix the 
         MD5 checksums here, then some later mirroring tasks will 
         fail. We will do the actual pack 200 at the very end once we are 
         sure we have the complete and final repo.
     -->

    <target name="packMasterFeature">
        <p2.process.artifacts repositoryPath="file://${reposource}" />
    </target>

    <target
        name="waitForChangedAttribs"
        unless="attribs.changed">
        <antcall
            target="compareAttribs"
            inheritAll="false">
            <param
                name="originalAttribs"
                value="${originalAttribs}" />
            <param
                name="signpoll"
                value="${signpoll}" />
        </antcall>
    </target>

    <target name="compareAttribs">
        <!--poll file for change in attributes -->
        <exec
            dir="${buildDirectory}"
            executable="${signpoll}"
            outputProperty="polledAttribs">
            <arg line="${signpollline}" />
        </exec>
        <echo message="original:  ${originalAttribs}" />
        <condition property="attribChanged">
            <and>
                <not>
                    <contains
                        string="${polledAttribs}"
                        substring="Permission denied, please try again."
                        casesensitive="no" />
                </not>
                <not>
                    <contains
                        string="${polledAttribs}"
                        substring="Host key verification failed."
                        casesensitive="no" />
                </not>
                <or>
                    <not>
                        <contains
                            string="${polledAttribs}"
                            substring="No such file or directory"
                            casesensitive="no" />
                    </not>
                    <contains
                        string="${polledAttribs}"
                        substring="bash: line 0: cd:"
                        casesensitive="no" />
                </or>
            </and>
        </condition>
        <echo message="polled:  ${polledAttribs}" />
        <antcall target="writeDiffResult" />
        <sleep seconds="120" />
        <available
            property="attribs.changed"
            file="${buildDirectory}/attribDiff.txt" />
        <antcall target="waitForChangedAttribs" />
    </target>

    <target
        name="writeDiffResult"
        if="attribChanged">
        <echo
            message="original: ${originalAttribs}"
            file="${buildDirectory}/attribDiff.txt" />
        <echo
            message="new: ${polledAttribs}"
            file="${buildDirectory}/attribDiff.txt"
            append="true" />
    </target>

    <target name="updatePackProperties">
        <!--exclude pre-built Orbit bundles from being signed and packed -->
        <property
            name="packproperties"
            value="${buildDirectory}/updatePackProperties.txt" />
        <generateExcludeList
            mapFile="${buildDirectory}/maps/org.eclipse.releng/maps/orbit.map"
            outputFile="${packproperties}" />
        <loadfile
            property="pack.properties"
            srcFile="${packproperties}" />
        <delete
            file="${packproperties}"
            failonerror="false" />
        <replace
            file="${eclipse.build.configs}/../../extras/pack.properties"
            token="@excludejars@"
            value="${pack.properties}" />
        <property
            name="archiveName"
            value="eclipse-master-${buildId}.zip" />
        <!-- add pack.properties file that specifies effort level -->
        <exec
            dir="${eclipse.build.configs}/../../extras"
            executable="zip">
            <arg line="-r ${buildDirectory}/${buildLabel}/${archiveName} pack.properties" />
        </exec>
    </target>

    <target
        name="signMasterFeature"
        if="sign">
        <property
            name="packtmp"
            value="${buildDirectory}/packtmp" />
        <property
            name="stagingDirectoryOutput"
            value="/home/data/httpd/download-staging.priv/eclipse/${buildId}-out" />
        <property
            name="stagingDirectory"
            value="/home/data/httpd/download-staging.priv/eclipse" />
        <property
            name="archiveName"
            value="eclipse-master-${buildId}.zip" />
        <property
            name="outputFile"
            value="${stagingDirectoryOutput}/${archiveName}" />
        <mkdir dir="${packtmp}" />
        <move
            file="${buildDirectory}/${buildLabel}/${archiveName}"
            tofile="${packtmp}/${archiveName}" />

        <!--push drop to staging directory -->
        <echo message="INFO: signing - push drop to staging directory" />

        <condition
            property="signcopy"
            value="cp">
            <equals
                arg1="${hudson}"
                arg2="true" />
        </condition>
        <property
            name="signcopy"
            value="scp" />

        <condition
            property="signexec"
            value="/bin/bash">
            <equals
                arg1="${hudson}"
                arg2="true" />
        </condition>
        <property
            name="signexec"
            value="ssh" />

        <condition
            property="signhost"
            value="">
            <equals
                arg1="${hudson}"
                arg2="true" />
        </condition>
        <property
            name="signhost"
            value="build.eclipse.org" />

        <condition
            property="signdelimiter"
            value="">
            <equals
                arg1="${hudson}"
                arg2="true" />
        </condition>
        <property
            name="signdelimiter"
            value=":" />

        <condition
            property="signquote"
            value="">
            <equals
                arg1="${hudson}"
                arg2="true" />
        </condition>
        <property
            name="signquote"
            value="&quot;" />

        <condition
            property="signpoll"
            value="ls">
            <equals
                arg1="${hudson}"
                arg2="true" />
        </condition>
        <property
            name="signpoll"
            value="ssh" />


        <exec
            dir="${packtmp}"
            executable="${signcopy}"
            output="signing.txt">
            <arg line="${archiveName} ${signhost}${signdelimiter}${stagingDirectory}" />
        </exec>

        <exec
            dir="${buildDirectory}"
            executable="${signexec}"
            output="signing.txt"
            append="true">
            <arg line="${signhost} /bin/chmod -v ugo+rw ${stagingDirectory}/${archiveName}" />
        </exec>

        <echo message="DEBUG: signing - packtmp: ${packtmp}" />
        <echo message="DEBUG: signing - buildDirectory: ${buildDirectory}" />
        <echo message="DEBUG: signing - signexec: ${signexec}" />
        <echo message="DEBUG: signing - signhost: ${signhost}" />
        <echo message="DEBUG: signing - signquote: ${signquote}" />
        <echo message="DEBUG: signing - stagingDirectory: ${stagingDirectory}" />
        <echo message="DEBUG: signing - archiveName: ${archiveName}" />
        <echo message="DEBUG: signing - hudson: ${hudson}" />
        <echo message="DEBUG: signing - java15home: ${java15home}" />

        <!--invoke sign script and wait -->
        <echo message="invoke sign script and wait" />
        <!-- fail if can not even execute ... probably means current user 
            is not authorized to sign -->
        <!-- Note: since "sign" calls jarprocessor, which conditions jars, 
            we want to make sure it uses a java 5 JRE -->
        <exec
            dir="."
            executable="${signexec}"
            output="signing.txt"
            append="true"
            failonerror="true"
            newenvironment="true">
            <env
                key="JAVA_HOME"
                value="${java15home}" />
            <arg
                line="${signhost} ${signquote}/usr/bin/sign ${stagingDirectory}/${archiveName} nomail ${stagingDirectoryOutput}${signquote}" />
        </exec>

        <!--Wait for build to be available -->
        <condition
            property="signpollline"
            value="${stagingDirectoryOutput}/${archiveName}">
            <equals
                arg1="${hudson}"
                arg2="true" />
        </condition>
        <property
            name="signpollline"
            value="${signhost} ${signquote}cd ${stagingDirectoryOutput};ls ${archiveName}${signquote}" />

        <!-- <echo message="DEBUG: signing - signpoll: ${signpoll}" /> <echo 
            message="DEBUG: signing - signpollline: ${signpollline}" /> -->

        <antcall target="waitForChangedAttribs">
            <param
                name="signpoll"
                value="${signpoll}" />
            <param
                name="signpollline"
                value="${signpollline}" />
        </antcall>

        <!--copy zip back to build machine -->
        <sleep minutes="2" />
        <echo message="INFO: copy signed zip back to build machine." />
        <echo message="    From: ${signhost}${signdelimiter}${stagingDirectory}/${buildId}-out/${archiveName}" />
        <echo message="    To: ${buildDirectory}/${buildLabel}" />
        <exec
            dir="."
            executable="${signcopy}"
            output="signing.txt"
            append="true">
            <arg line="${signhost}${signdelimiter}${stagingDirectory}/${buildId}-out/${archiveName} ${buildDirectory}/${buildLabel}" />
        </exec>
        <antcall target="deletetempsigningfiles" />
    </target>

    <!-- TODO: why not deleted if running on build.eclipse.org? -->
    <target
        name="deletetempsigningfiles"
        unless="hudson">
        <echo message="delete temp files on build.eclipse.org" />
        <property
            name="signdeleteline"
            value="${signhost} ${signquote}/bin/rm -rf ${stagingDirectory}/${buildId}-out ${stagingDirectory}/${archiveName}${signquote}" />
        <exec
            dir="."
            executable="${signexec}"
            output="signing.txt"
            append="true">
            <arg line="${signdeleteline}" />
        </exec>
    </target>

    <target name="testEclipse">
        <parallel>
            <ant
                antfile="eclipse/helpernew.xml"
                target="testAll" />
        </parallel>
    </target>

    <target name="apiTooling">
        <property
            name="reference"
            value="${buildDirectory}/apitooolingreference" />
        <mkdir dir="${reference}" />
        <property
            name="report"
            value="${postingDirectory}/${buildLabel}/apitools" />
        <mkdir dir="${report}" />
        <property
            name="current_location"
            value="${postingDirectory}/${buildLabel}/eclipse-SDK-${buildId}-win32.zip" />
        <!-- 
             fail fast if apiTests variables are not defined, since recently moved to 
             stream specific properties 
        -->
        <fail unless="apiTestsPreviousBaseDLBaseURL" />
        <fail unless="apiTestsPreviousBaseWin32Filename" />
        <fail unless="apiTestsPreviousRefererenceBaseDLBaseURL" />
        <fail unless="apiTestsPreviousRefererenceWin32Filename" />
        
        <property
            name="reference_location"
            value="${reference}/${apiTestsPreviousBaseWin32Filename}" />
        <exec
            executable="/usr/bin/wget"
            dir="${reference}"
            output="${reference}/error.txt"
            failonerror="false"
            os="Linux">
            <arg
                line="-q -O  ${reference_location} ${apiTestsPreviousBaseDLBaseURL}/${apiTestsPreviousBaseWin32Filename}" />
        </exec>
        <property
            name="report"
            value="${postingDirectory}/${buildLabel}/apitools" />
        <mkdir dir="${report}" />
        <property
            name="report_location"
            value="${report}/report.xml" />
        <touch file="${report_location}" />
        <property
            name="report_html_location"
            value="${report}/reporthtml" />
        <property
            name="exclude_list_location"
            value="${buildDirectory}/maps/org.eclipse.releng/apiexclude/exclude_list.txt" />
        <property
            name="exclude_list_external_location"
            value="${buildDirectory}/maps/org.eclipse.releng/apiexclude/exclude_list_external.txt" />
        <apitooling.apifreeze
            baseline="${reference_location}"
            profile="${current_location}"
            report="${report_location}"
            excludelist="${exclude_list_location}"
            debug="true" />
        <!-- html report will be dumped at the same location as the xml report -->
        <apitooling.apifreeze_reportconversion
            xmlfile="${report_location}"
            debug="true" />
        <property
            name="filter_store"
            value="${buildDirectory}/apifilters" />
        <mkdir dir="${filter_store}" />
        <property
            name="exclude_list_external_location"
            value="${buildDirectory}/maps/org.eclipse.releng/apiexclude/exclude_list_external.txt" />
        <copy todir="${filter_store}">
            <fileset
                dir="${buildDirectory}/plugins"
                includes="**/.settings/.api_filters" />
            <regexpmapper
                from="^(org.eclipse.*\/)(\.settings\/)(\.api_filters)"
                to="\1\3" />
        </copy>
        <property
            name="apifilterzip"
            value="${report}/apifilters-${buildId}.zip" />
        <exec
            executable="zip"
            dir="${report}">
            <arg line="-r ${apifilterzip} ${filter_store}" />
        </exec>
        <property
            name="html_directory_location"
            value="${report}/apitoolsverifications/html" />
        <property
            name="report_directory_location"
            value="${report}/apitoolsverifications/xml" />
        <property
            name="previous_reference_location"
            value="${reference}/${apiTestsPreviousRefererenceWin32Filename}" />
        <exec
            executable="/usr/bin/wget"
            dir="${reference}"
            output="${reference}/error.txt"
            failonerror="false"
            os="Linux">
            <arg
                line="-q -O  ${previous_reference_location} ${apiTestsPreviousRefererenceBaseDLBaseURL}/${apiTestsPreviousRefererenceWin32Filename}" />
        </exec>
        <apitooling.analysis
            baseline="${previous_reference_location}"
            profile="${current_location}"
            report="${report_directory_location}"
            filters="${filter_store}"
            excludelist="${exclude_list_external_location}"
            debug="true" />

        <apitooling.analysis_reportconversion
            xmlfiles="${report_directory_location}"
            debug="true"
            htmlfiles="${html_directory_location}" />
        <!--check for api deprecation in comparison with previous release -->

        <property
            name="api_deprecation_report"
            value="${report}/apitoolsdeprecations/apideprecation.xml" />
        <property
            name="api_deprecation_html"
            value="${report}/apitoolsdeprecations/apideprecation.html" />
        <apitooling.apideprecation
            baseline="${previous_reference_location}"
            profile="${current_location}"
            report="${api_deprecation_report}"
            debug="true" />
        <apitooling.apideprecation_reportconversion
            xmlfile="${api_deprecation_report}"
            debug="true"
            htmlfile="${api_deprecation_html}" />

        <property
            name="equinox_api_report"
            value="${equinoxPostingDirectory}/${buildLabel}/apitools" />
        <mkdir dir="${equinox_api_report}" />
        <copy todir="${equinox_api_report}">
            <fileset dir="${report}">
                <include name="report.html" />
            </fileset>
            <fileset dir="${html_directory_location}">
                <include name="index.html" />
            </fileset>
        </copy>
        <copy
            todir="${equinox_api_report}"
            file="${api_deprecation_html}" />
    </target>

    <target name="publishEclipse">
        <condition
            property="rsync"
            value="true">
            <not>
                <or>
                    <equals
                        arg1="${hudson}"
                        arg2="true" />
                    <equals
                        arg1="{test}"
                        arg2="true" />
                </or>
            </not>
        </condition>
        <parallel>
            <ant
                antfile="eclipse/helper.xml"
                target="rSyncWithSnzZrh" />
            <sequential>
                <ant
                    antfile="eclipse/helper.xml"
                    target="buildStandAloneSWT" />
                <ant
                    antfile="eclipse/helper.xml"
                    target="publish" />
            </sequential>
        </parallel>
    </target>

    <target name="publishEquinox">
        <ant
            antfile="${equinox.build.configs}/../helper.xml"
            target="publish" />
    </target>

    <target name="unpackUpdateJarsForPackaging">
        <property
            name="tmpsite"
            value="${buildDirectory}/tmpsite" />
        <mkdir dir="${tmpsite}/new/eclipse/features" />
        <mkdir dir="${tmpsite}/new/eclipse/plugins" />
        <exec
            executable="unzip"
            dir="${buildDirectory}/${buildLabel}">
            <arg line="-q eclipse-master-${buildId}.zip -d ${tmpsite}" />
        </exec>
        <unpackUpdateJars
            site="${tmpsite}/eclipse"
            output="${tmpsite}/new/eclipse" />
        <waitfor
            maxwait="4"
            maxwaitunit="hour"
            checkevery="1"
            checkeveryunit="minute">
            <available file="${buildDirectory}/${buildLabel}/eclipse-master-${buildId}.zip" />
        </waitfor>
        <move
            file="${buildDirectory}/${buildLabel}/eclipse-master-${buildId}.zip"
            tofile="${buildDirectory}/${buildLabel}/eclipse-master-${buildId}.bak.zip" />
        <exec
            executable="zip"
            dir="${tmpsite}/new">
            <arg line="-q ${buildDirectory}/${buildLabel}/eclipse-master-${buildId}.zip -r eclipse" />
        </exec>
    </target>


    <target name="packageEclipseDistributables">
        <replace
            token="@qualifier@"
            file="${eclipse.build.configs}/sdk/builder/sdk.product"
            value="${buildId}" />
        <replace
            token="@qualifier@"
            file="${eclipse.build.configs}/platform/platform.product"
            value="${buildId}" />
        <replace
            token="@qualifier@"
            file="${eclipse.build.configs}/platform.sdk/platform.product"
            value="${buildId}" />
        <!-- https://bugs.eclipse.org/bugs/show_bug.cgi?id=368488 
        <replace 
            token="@qualifier@" file="${buildDirectory}/plugins/org.eclipse.equinox.p2.ui.admin.rcp/rcp.product" 
            value="${buildId}" /> 
        -->

        <replace token="@qualifier@" 
            file="${buildDirectory}/features/org.eclipse.equinox.starterkit.product.feature/product/EclipseRTOSGiStarterKit.product"
            value="${buildId}" />

        <replace
            token="@qualifier@"
            file="${buildDirectory}/features/org.eclipse.pde.build.product.feature/product/pdebuild.product"
            value="${buildId}" />
        
        <replace 
            token="@qualifier@" file="${eclipse.build.configs}/rcp/rcp.product" value="${buildId}" 
            /> 
        <replace token="@qualifier@" file="${eclipse.build.configs}/rcp.sdk/rcp.product" 
            value="${buildId}" /> 
       
        <replace
            token="@qualifier@"
            file="${eclipse.build.configs}/rcp.config/feature.xml"
            value="${buildId}" />
        <replace
            token="@qualifier@"
            file="${equinox.build.configs}/osgistarter.config.launcher/feature.xml"
            value="${buildId}" />
        <replace
            token="@qualifier@"
            file="${eclipse.build.configs}/pde.build.config.launcher/feature.xml"
            value="${buildId}" />
        <delete dir="${reposource}" />
        <mkdir dir="${reposource}" />
        <exec
            executable="unzip"
            dir=".">
            <arg line="${buildDirectory}/${buildLabel}/eclipse-master-${buildId}.zip -d ${reposource}" />
        </exec>


        <!-- 
            We used to remove these IUs where, but changed to be later in the process. 
            See the process-artifacts.xml file. 
            TODO: we might have to adjust the "exclude" list on comparator 
            below due to this change. 
            See bug 377314 and bug 378137. 
            https://bugs.eclipse.org/bugs/show_bug.cgi?id=377314
            https://bugs.eclipse.org/bugs/show_bug.cgi?id=378137
            This is to remove IUs handy during the build, but not really 
            needed in final repo 
        <p2.remove.iu>
            <repository location="file://${reposource}" />
            <iu id="org.aspectj.runtime" />
            <iu id="org.aspectj.weaver" />
            <iu id="master.feature.group" />
            <iu id="master-ecf.feature.group" />
            <iu id="master-jetty.feature.group" />
            <iu id="master-equinox-weaving.feature.group" />

        </p2.remove.iu>
        -->

        <!-- but, later decided, there is one special case we want to 
             remove before any packaging takes place 
             https://bugs.eclipse.org/bugs/show_bug.cgi?id=379501    
         -->
       <antcall target="removeSomeUnwantedIUs">
         <param name="p2RemoveRepoDir" value="${reposource}"/>
       </antcall>
        
        <property
            name="tempexec"
            value="${buildDirectory}/tempexec" />
        <delete dir="${tempexec}" />
        <mkdir dir="${tempexec}" />
        <copy todir="${tempexec}">
            <fileset dir="${reposource}">
                <include name="features/org.eclipse.equinox.executable_*.jar" />
            </fileset>
        </copy>
        <exec
            executable="unzip"
            dir="${tempexec}">
            <arg line="features/*.jar -d ${tempexec}" />
        </exec>

        <subant
            antfile="build.xml"
            target="publish.bin.parts"
            buildpath="${tempexec}/build.xml"
            failonerror="false">
            <property
                name="p2.gathering"
                value="true" />
            <property
                name="p2.build.repo"
                value="file:/${buildDirectoryAbsolute}" />
        </subant>

        <echo message="Getting ready to execute ${basedir}/buildConfiguration.xml for ${eclipse.build.configs}/rcp.config" />
        <ant
            target="main"
            antfile="buildConfiguration.xml"
            dir="${eclipse.build.configs}/rcp.config" />

        <p2.publish.product
            flavor="tooling"
            repository="file:${reposource}"
            productFile="${eclipse.build.configs}/sdk/builder/sdk.product"
            compress="true">
            <config
                os="win32"
                ws="win32"
                arch="x86" />
            <config
                os="win32"
                ws="win32"
                arch="x86_64" />
            <config
                os="linux"
                ws="gtk"
                arch="x86" />
            <config
                os="linux"
                ws="gtk"
                arch="x86_64" />
            <config
                os="linux"
                ws="gtk"
                arch="ppc64" />
            <config
                os="linux"
                ws="gtk"
                arch="s390x" />
            <config
                os="linux"
                ws="gtk"
                arch="s390" />
            <config
                os="solaris"
                ws="gtk"
                arch="sparc" />
            <config
                os="solaris"
                ws="gtk"
                arch="x86" />
            <config
                os="macosx"
                ws="cocoa"
                arch="x86" />
            <config
                os="macosx"
                ws="cocoa"
                arch="x86_64" />
            <config
                os="hpux"
                ws="gtk"
                arch="ia64_32" />
            <config
                os="aix"
                ws="gtk"
                arch="ppc" />
            <config
                os="aix"
                ws="gtk"
                arch="ppc64" />
            <advice
                kind="featureVersions"
                file="${buildDirectory}/finalFeaturesVersions.properties" />
            <advice
                kind="pluginVersions"
                file="${buildDirectory}/finalPluginsVersions.properties" />
        </p2.publish.product>

        <p2.publish.product
            flavor="tooling"
            repository="file:${reposource}"
            productFile="${eclipse.build.configs}/platform/platform.product"
            compress="true">
            <config
                os="win32"
                ws="win32"
                arch="x86" />
            <config
                os="win32"
                ws="win32"
                arch="x86_64" />
            <config
                os="linux"
                ws="gtk"
                arch="x86" />
            <config
                os="linux"
                ws="gtk"
                arch="x86_64" />
            <config
                os="linux"
                ws="gtk"
                arch="s390x" />
            <config
                os="linux"
                ws="gtk"
                arch="s390" />
            <config
                os="solaris"
                ws="gtk"
                arch="sparc" />
            <config
                os="solaris"
                ws="gtk"
                arch="x86" />
            <config
                os="macosx"
                ws="cocoa"
                arch="x86" />
            <config
                os="macosx"
                ws="cocoa"
                arch="x86_64" />
            <config
                os="hpux"
                ws="gtk"
                arch="ia64_32" />
            <config
                os="aix"
                ws="gtk"
                arch="ppc" />
            <config
                os="aix"
                ws="gtk"
                arch="ppc64" />
            <advice
                kind="featureVersions"
                file="${buildDirectory}/finalFeaturesVersions.properties" />
            <advice
                kind="pluginVersions"
                file="${buildDirectory}/finalPluginsVersions.properties" />
        </p2.publish.product>

        <p2.publish.product
            flavor="tooling"
            repository="file:${reposource}"
            productFile="${eclipse.build.configs}/platform.sdk/platform.product"
            compress="true">
            <config
                os="win32"
                ws="win32"
                arch="x86" />
            <config
                os="win32"
                ws="win32"
                arch="x86_64" />
            <config
                os="linux"
                ws="gtk"
                arch="x86" />
            <config
                os="linux"
                ws="gtk"
                arch="x86_64" />
            <config
                os="linux"
                ws="gtk"
                arch="ppc64" />
            <config
                os="linux"
                ws="gtk"
                arch="s390x" />
            <config
                os="linux"
                ws="gtk"
                arch="s390" />
            <config
                os="solaris"
                ws="gtk"
                arch="sparc" />
            <config
                os="solaris"
                ws="gtk"
                arch="x86" />
            <config
                os="macosx"
                ws="cocoa"
                arch="x86" />
            <config
                os="macosx"
                ws="cocoa"
                arch="x86_64" />
            <config
                os="hpux"
                ws="gtk"
                arch="ia64_32" />
            <config
                os="aix"
                ws="gtk"
                arch="ppc" />
            <config
                os="aix"
                ws="gtk"
                arch="ppc64" />
            <advice
                kind="featureVersions"
                file="${buildDirectory}/finalFeaturesVersions.properties" />
            <advice
                kind="pluginVersions"
                file="${buildDirectory}/finalPluginsVersions.properties" />
        </p2.publish.product>

        <p2.publish.product
            flavor="tooling"
            repository="file:${reposource}"
            productFile="${eclipse.build.configs}/rcp/rcp.product"
            compress="true">
            <config
                os="win32"
                ws="win32"
                arch="x86" />
            <config
                os="win32"
                ws="win32"
                arch="x86_64" />
            <config
                os="linux"
                ws="gtk"
                arch="x86" />
            <config
                os="linux"
                ws="gtk"
                arch="x86_64" />
            <config
                os="linux"
                ws="gtk"
                arch="ppc64" />
            <config
                os="linux"
                ws="gtk"
                arch="s390x" />
            <config
                os="linux"
                ws="gtk"
                arch="s390" />
            <config
                os="solaris"
                ws="gtk"
                arch="sparc" />
            <config
                os="solaris"
                ws="gtk"
                arch="x86" />
            <config
                os="macosx"
                ws="cocoa"
                arch="x86" />
            <config
                os="macosx"
                ws="cocoa"
                arch="x86_64" />
            <config
                os="hpux"
                ws="gtk"
                arch="ia64_32" />
            <config
                os="aix"
                ws="gtk"
                arch="ppc" />
            <config
                os="aix"
                ws="gtk"
                arch="ppc64" />
            <advice
                kind="featureVersions"
                file="${buildDirectory}/finalFeaturesVersions.properties" />
            <advice
                kind="pluginVersions"
                file="${buildDirectory}/finalPluginsVersions.properties" />
        </p2.publish.product>

        <p2.publish.product
            flavor="tooling"
            repository="file:${reposource}"
            productFile="${eclipse.build.configs}/rcp.sdk/rcp.product"
            compress="true">
            <config
                os="win32"
                ws="win32"
                arch="x86" />
            <config
                os="win32"
                ws="win32"
                arch="x86_64" />
            <config
                os="linux"
                ws="gtk"
                arch="x86" />
            <config
                os="linux"
                ws="gtk"
                arch="x86_64" />
            <config
                os="linux"
                ws="gtk"
                arch="ppc" />
            <config
                os="linux"
                ws="gtk"
                arch="s390x" />
            <config
                os="linux"
                ws="gtk"
                arch="s390" />
            <config
                os="solaris"
                ws="gtk"
                arch="sparc" />
            <config
                os="solaris"
                ws="gtk"
                arch="x86" />
            <config
                os="macosx"
                ws="cocoa"
                arch="x86" />
            <config
                os="macosx"
                ws="cocoa"
                arch="x86_64" />
            <config
                os="hpux"
                ws="gtk"
                arch="ia64_32" />
            <config
                os="aix"
                ws="gtk"
                arch="ppc" />
            <config
                os="aix"
                ws="gtk"
                arch="ppc64" />
            <advice
                kind="featureVersions"
                file="${buildDirectory}/finalFeaturesVersions.properties" />
            <advice
                kind="pluginVersions"
                file="${buildDirectory}/finalPluginsVersions.properties" />
        </p2.publish.product>

        <!-- https://bugs.eclipse.org/bugs/show_bug.cgi?id=368488 
        <property 
            name="equinox.p2.agent.dir" 
            value="${equinox.build.configs}/equinox.p2.agent" /> 
            <replace 
                 file="${equinox.p2.agent.dir}/p2.inf" 
                 token="@qualifier@" value="${buildId}" /> 
            <copy todir="${equinox.p2.agent.dir}"> 
                  <fileset file="${buildDirectory}/plugins/org.eclipse.equinox.p2.ui.admin.rcp/rcp.product" /> 
            </copy> 
            <mkdir dir="${equinox.p2.agent.dir}/org.eclipse.equinox.p2.ui.admin.rcp" /> 
            <p2.publish.product 
                 flavor="tooling" 
                 repository="file:${reposource}" productFile="${equinox.p2.agent.dir}/rcp.product" 
                 compress="true"> 
                      <config os="win32" ws="win32" arch="x86" /> 
                      <config os="linux" ws="gtk" arch="x86" /> 
                      <config os="macosx" ws="cocoa" arch="x86" /> 
            </p2.publish.product> 
            -->
        <ant
            target="main"
            antfile="buildConfiguration.xml"
            dir="${equinox.build.configs}/osgistarter.config.launcher" />
        <property
            name="osgi.starter.config.launcher.temp"
            value="${equinox.build.configs}/osgistarter.config.launcher/temp" />
        <mkdir dir="${osgi.starter.config.launcher.temp}" />

        <p2.publish.product
            flavor="tooling"
            repository="file:${reposource}"
            productFile="${buildDirectory}/features/org.eclipse.equinox.starterkit.product.feature/product/EclipseRTOSGiStarterKit.product"
            compress="true">
            <config
                os="win32"
                ws="win32"
                arch="x86" />
            <config
                os="win32"
                ws="win32"
                arch="x86_64" />
            <config
                os="linux"
                ws="gtk"
                arch="x86" />
            <config
                os="linux"
                ws="gtk"
                arch="x86_64" />
            <config
                os="macosx"
                ws="cocoa"
                arch="x86" />
            <config
                os="macosx"
                ws="cocoa"
                arch="x86_64" />
        </p2.publish.product>

        <eclipse.brand.p2.artifacts
            metadataRepository="file:${reposource}"
            artifactRepository="file:${reposource}"
            tempDirectory="${osgi.starter.config.launcher.temp}"
            launcherProvider="org.eclipse.equinox.executable"
            productId="org.eclipse.osgi.configuration"
            launcherName="rt"
            config="win32.win32.x86"
            productVersion="1.0.0.${buildId}"
            iconsList="${buildDirectory}/features/org.eclipse.equinox.starterkit.product.feature/rt.ico" />
        <eclipse.brand.p2.artifacts
            metadataRepository="file:${reposource}"
            artifactRepository="file:${reposource}"
            tempDirectory="${osgi.starter.config.launcher.temp}"
            launcherProvider="org.eclipse.equinox.executable"
            productId="org.eclipse.osgi.configuration"
            launcherName="rt"
            config="win32.win32.x86_64"
            productVersion="1.0.0.${buildId}"
            iconsList="${buildDirectory}/features/org.eclipse.equinox.starterkit.product.feature/rt.ico" />
        <eclipse.brand.p2.artifacts
            metadataRepository="file:${reposource}"
            artifactRepository="file:${reposource}"
            tempDirectory="${osgi.starter.config.launcher.temp}"
            launcherProvider="org.eclipse.equinox.executable"
            productId="org.eclipse.osgi.configuration"
            launcherName="rt"
            config="linux.gtk.x86"
            productVersion="1.0.0.${buildId}"
            iconsList="${buildDirectory}/features/org.eclipse.equinox.starterkit.product.feature/rt.ico" />
        <eclipse.brand.p2.artifacts
            metadataRepository="file:${reposource}"
            artifactRepository="file:${reposource}"
            tempDirectory="${osgi.starter.config.launcher.temp}"
            launcherProvider="org.eclipse.equinox.executable"
            productId="org.eclipse.osgi.configuration"
            launcherName="rt"
            config="linux.gtk.x86_64"
            productVersion="1.0.0.${buildId}"
            iconsList="${buildDirectory}/features/org.eclipse.equinox.starterkit.product.feature/rt.ico" />
        <eclipse.brand.p2.artifacts
            metadataRepository="file:${reposource}"
            artifactRepository="file:${reposource}"
            tempDirectory="${osgi.starter.config.launcher.temp}"
            launcherProvider="org.eclipse.equinox.executable"
            productId="org.eclipse.osgi.configuration"
            launcherName="rt"
            config="macosx.cocoa.x86"
            productVersion="1.0.0.${buildId}"
            iconsList="${buildDirectory}/features/org.eclipse.equinox.starterkit.product.feature/rt.icns" />
        <eclipse.brand.p2.artifacts
            metadataRepository="file:${reposource}"
            artifactRepository="file:${reposource}"
            tempDirectory="${osgi.starter.config.launcher.temp}"
            launcherProvider="org.eclipse.equinox.executable"
            productId="org.eclipse.osgi.configuration"
            launcherName="rt"
            config="macosx.cocoa.x86_64"
            productVersion="1.0.0.${buildId}"
            iconsList="${buildDirectory}/features/org.eclipse.equinox.starterkit.product.feature/rt.icns" />

           <!-- 
            <ant target="main" antfile="buildConfiguration.xml" 
                 dir="${eclipse.build.configs}/pde.build.config.launcher" /> 
            <p2.publish.product flavor="tooling" 
                repository="file:${reposource}" 
                productFile="${buildDirectory}/features/org.eclipse.pde.build.product.feature/product/pdebuild.product" 
            compress="true"> 
            <config os="win32" ws="win32" arch="x86" /> 
            <config os="win32" ws="win32" arch="x86_64" /> 
            <config os="linux" ws="gtk" arch="x86" /> 
            <config os="linux" ws="gtk" arch="x86_64" /> 
            <config os="macosx" ws="cocoa" arch="x86" /> 
            <config os="macosx" ws="cocoa" arch="x86_64" /> 
            </p2.publish.product> 
            -->


        <antcall target="packMasterFeature" />

        <echo message="DEBUG: making directory buildRepo: ${buildRepo}" />
        <mkdir dir="${buildRepo}" />

        <condition
            property="repoBaseline"
            value="${p2RepoURL}">
            <equals
                arg1="${hudson}"
                arg2="true" />
        </condition>
        <property
            name="repoBaseline"
            value="file:${updateSite}" />

        <echo message="DEBUG: repoBaseline: ${repoBaseline}" />

        <!-- 
             needed, files should be copied to "working area" before having valudes chagned, 
             or will require clean up and refetch for multiple runs. But, there are better 
             ways to "name" a repo or add p2.mirrorsURL (not even sure these are working). 
        -->
        <replace
            summary="true"
            file="${eclipse.build.configs}/../../extras/artifacts.xml"
            token="@p2RepoPath@"
            value="${p2RepoPath}" />
        <filter
            token="BUILD_ID"
            value="${buildLabel}" />
        <mkdir dir="${buildDirectory}/formatRepo" />
        <copy
            filtering="true"
            file="${eclipse.build.configs}/../../extras/artifacts.xml"
            tofile="${buildDirectory}/formatRepo/artifacts.xml" />

        <echo message="Mirroring main code: source repo: ${reposource}" />
        <echo message="Mirroring main code: see log at ${buildlogs}/mirrorlog.txt" />
        <p2.mirror
            source="file:${reposource}"
            log="${buildlogs}/mirrorlog.txt"
            ignoreErrors="true">
            <destination
                compressed="true"
                name="${p2.repo.name}"
                location="file:${buildRepo}"
                append="true"
                format="file:${buildDirectory}/formatRepo"
                kind="artifact" />
            <destination
                compressed="true"
                name="${p2.repo.name}"
                location="file:${buildRepo}"
                append="true"
                format="file:${reposource}" />
            <comparator
                comparator="org.eclipse.equinox.p2.repository.tools.jar.comparator"
                comparatorLog="${buildlogs}/comparatorlog.txt">
                <repository location="${repoBaseline}" />
                <exclude>
                    <artifact id="org.eclipse.jdt.doc.isv" />
                    <artifact id="org.eclipse.jdt.doc.user" />
                    <artifact id="org.eclipse.pde.doc.user" />
                    <artifact id="org.eclipse.platform.doc.isv" />
                    <artifact id="org.eclipse.platform.doc.user" />
                    <artifact id="org.eclipse.equinox.executable" />
                    <artifact id="org.eclipse.sdk.examples" />
                    <artifact id="org.eclipse.sdk.examples.source" />
                    <artifact id="master-equinox" />
                    <artifact id="org.apache.lucene" />
                    <artifact id="org.apache.lucene.source" />
                    <artifact id="org.apache.lucene.core" />
                    <artifact id="org.apache.lucene.core.source" />
                    <artifact id="org.apache.lucene.analysis" />
                    <artifact id="org.apache.lucene.analysis.source" />
                </exclude>
            </comparator>
        </p2.mirror>

        <property
            name="testreposource"
            value="${buildDirectory}/buildRepoTests" />
        <echo message="Mirroring test code: source repo: ${testreposource}" />
        <echo message="Mirroring test code: see log at ${buildlogs}/mirrorlogTests.txt" />
        <!--mirror JUnit test bundles and test framework bundles to the repo -->
        <p2.mirror
            source="file://${testreposource}"
            log="${buildlogs}/mirrorlogTests.txt"
            ignoreErrors="true">
            <destination
                compressed="true"
                name="${p2.repo.name}"
                location="file:${buildRepo}"
                append="true"
                format="file:${reposource}" />
            <comparator
                comparator="org.eclipse.equinox.p2.repository.tools.jar.comparator"
                comparatorLog="${buildlogs}/comparatorlogtests.txt">
                <repository location="${repoBaseline}" />
            </comparator>
            <iu
                id="org.eclipse.sdk.tests.feature.group"
                version="" />
            <iu
                id="org.eclipse.test.feature.group"
                version="" />
        </p2.mirror>

        <!--mirror EMF features the repo (emfRepo, when needed, is initialized 
            by streamSpecificInit. Do not initialize elsewehre.) -->

        <antcall target="mirrorEMF" />

    </target>

    <target name="finalprocessartifacts">

        <echo message="Create composite and add their child repos" />
        <echo message="  composite at: ${resultsRepoLocation}" />
        <!--try create composite repository -->
        <p2.composite.artifact.repository.create
            location="file://${resultsRepoLocation}"
            name="${p2.repo.name}"
            compressed="true"
            failOnExists="false" />
        <p2.composite.metadata.repository.create
            location="file://${resultsRepoLocation}"
            name="${p2.repo.name}"
            compressed="true"
            failOnExists="false" />

        <!--add childRepo to composite repo -->
        <p2.composite.artifact.repository.add
            location="file://${resultsRepoLocation}"
            child="${buildId}" />
        <p2.composite.metadata.repository.add
            location="file://${resultsRepoLocation}"
            child="${buildId}" />
        
        <!-- Now that they are finished, is a good time to pack them, and (eventually) 
        add names, p2.mirrorsURL, etc. 
        We go to this trouble of calling a seperate exec, because we want to be sure to use 
        Java 5 to do the pack, but this build must be running in Java 6. 
        -->

        <exec executable="/bin/bash">
            <arg
                line="${base}/supportDir/org.eclipse.releng.eclipsebuilder/scripts/repoRelated/process-artifacts.sh  ${buildRepo}" />
        </exec>
    </target>


    <!-- note: we use the same slicing options here, that we do in our customTargets.xml 
        preSetup task where we created a runable to build against. Otherwise, we 
        end up with LOTS of version in our repo. See bug 376552. -->
    <!--TODO: it is not clear why we use comparator here, were are getting 
        stuff from EMF's repo, and putting into ours. I guess we could open a bug 
        on them if we found a problem? -->
    <!-- the repo property is not expected to exist in 38 builds. in 4.2 
        builds, it much accurately point to the emfRepo to use to mirror from. Should 
        be defined in "${mapsProject}/configuration/streamSpecific-build.properties", 
        when needed. -->
    <target
        name="mirrorEMF"
        if="emfRepoURL"
        depends="streamSpecificInit">

        <p2.mirror
            source="file:${emfRepoURL}"
            ignoreErrors="true">
            <slicingOptions
                includeOptional="false"
                includeNonGreedy="false"
                latestVersionOnly="true"
                followStrict="true" />
            <destination
                compressed="true"
                name="${p2.repo.name}"
                location="file:${buildRepo}"
                append="true"
                format="file:${reposource}" />
            <comparator
                comparator="org.eclipse.equinox.p2.repository.tools.jar.comparator"
                comparatorLog="${buildlogs}/comparatorlogtests.txt">
                <repository location="${repoBaseline}" />
            </comparator>
            <iu
                id="org.eclipse.emf.common.feature.group"
                version="0.0.0" />
            <iu
                id="org.eclipse.emf.ecore.feature.group"
                version="0.0.0" />
            <iu
                id="org.eclipse.emf.common.source.feature.group"
                version="0.0.0" />
            <iu
                id="org.eclipse.emf.ecore.source.feature.group"
                version="0.0.0" />

        </p2.mirror>
    </target>

    <target name="packageRepos">
        <!--call to generate pde, rcp, cvs and jdt repos -->
        <ant antfile="${eclipse.build.configs}/repos/build.xml" />
        <ant antfile="${eclipse.build.configs}/repos/platformrepo.xml" />
        <ant antfile="${eclipse.build.configs}/repos/rcprepo.xml" />
        <ant antfile="${eclipse.build.configs}/rcp.deltapack/build.xml" />
    </target>

    <target name="packageEquinoxDistributables">
        <!-- equinox slicer build now includes master equinox -->
        <ant antfile="${equinox.build.configs}/equinox/build.xml" />
        <ant antfile="${equinox.build.configs}/equinox-launchers/build.xml" />
        <!-- invoke equinox.p2.installer in a separate process -->
        <!-- removed per bug 368488 
        <ant antfile="${equinox.build.configs}/../helper.xml" 
            target="build.p2.installer.product" />
        -->
    </target>

    <target name="package">
        <ant
            antfile="package.xml"
            dir="${eclipse.pdebuild.scripts}">
            <property
                name="packagingInfo"
                value="${packagingInfo}" />
            <property
                name="assemblyTempDir"
                value="${packagingInfo}/jartmp" />
        </ant>
    </target>

</project>
