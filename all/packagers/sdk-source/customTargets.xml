<project name="Build specific targets and properties" default="noDefault" >


	<property name="postingDirectory" value="${buildDirectory}" />

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- ===================================================================== -->

	<!-- ****** figure out how to build the platform, sdk, examples, ... from one compile"
see the sdkFeatures, platformFeatures, ... targets in the orginal customTargets  -->
	<target name="allElements">
		<ant antfile="${genericTargets}" target="${target}" >
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.sdk" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Targets to assemble the built elements for particular configurations  -->
	<!-- ===================================================================== -->
	<!--Explicitly skipping assembly since source drops are packaged manually.  See buildSourceDrops target.-->
	
	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for cvsRoot, package and mapVersionTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup" >
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the fetch -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating build scripts -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
		<antcall target="buildSourceDrops" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before assembling -->
	<!-- ===================================================================== -->
	<target name="preAssemble">

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after assembling-->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>


	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after everything is built and assembled -->
	<!-- (e.g., testing, posting, emailing, ...) -->
	<!-- ===================================================================== -->
	<target name="postBuild">
	</target>

	<!-- ===================================================================== -->
	<!-- Helper targets -->
	<!-- ===================================================================== -->
	<target name="gatherLogs" if="logsAvailable">
	</target>

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- Targets called before extracting binary distributables.               -->
	<!-- ===================================================================== -->
	<target name="buildSourceDrops">
		<mkdir dir="${postingDirectory}/${buildLabel}" />
		<mkdir dir="${postingDirectory}/${buildLabel}/checksum" />
		<property name="tempDir" value="${basedir}/temp" />
		<mkdir dir="${tempDir}/buildScripts" />

		<copy file="${buildDirectory}/label.properties" todir="${tempDir}/buildScripts" />

		<copy todir="${tempDir}/buildScripts" flatten="true" overwrite="true">
			<fileset dir="${builder}/../../../sdk/srcBuild" excludes="incl,fetch/**,jdtcoresrc/**" />
		</copy>
		<mkdir dir="${tempDir}/buildScripts/jdtcoresrc"/>
		<copy todir="${tempDir}/buildScripts/jdtcoresrc">
			<fileset dir="${builder}/../../../sdk/srcBuild/jdtcoresrc"/>
		</copy>

		<!--  set correct permissions on linux script -->
		<chmod file="${tempDir}/buildScripts/build" perm="755" />

		<!--delete javadoc-->
		<delete dir="${buildDirectory}/plugins/org.eclipse.platform.doc.isv/reference/api"/>
		<delete dir="${buildDirectory}/plugins/org.eclipse.jdt.doc.isv/reference/api"/>
		<delete dir="${buildDirectory}/plugins/org.eclipse.pde.doc.user/reference/api"/>

		<copy todir="${tempDir}/buildScripts">
			<fileset dir="${buildDirectory}" excludes="features/*example*/**,plugins/*example*/**" includes="features/*/build.xml,features/*.source*/**,plugins/*/build.xml,plugins/*.source*/**,fetch_*.xml,assemble*.xml,plugins/org.eclipse.swt.tools/**,plugins/*doc*/**" />
		</copy>
		<!--ensure linux drops are created as .tar.gz files -->
		<replace dir="${tempDir}/buildScripts" includes="assemble*" excludes="*win32*,*hpux*,*solaris*,*aix*" token=".zip" value=".tar.gz"/>

		<!-- create drop containing the fetch scripts, no source -->
		<exec dir="${tempDir}" executable="zip">
			<arg line="-q ${postingDirectory}/${buildLabel}/eclipse-sourceBuild-srcFetch-${buildId}.zip -r ." />
		</exec>

		<!--generate md5-->
		<checksum file="${postingDirectory}/${buildLabel}/eclipse-sourceBuild-srcFetch-${buildId}.zip" property="md5"/>
		<echo message="${md5} *eclipse-sourceBuild-srcFetch-${buildId}.zip" file="${postingDirectory}/${buildLabel}/checksum/eclipse-sourceBuild-srcFetch-${buildId}.zip.md5"/>

		<!--  create zip with all source for an Eclipse SDK  -->
		<copy todir="${tempDir}/buildScripts">
			<fileset dir="${buildDirectory}" includes="features/,plugins/" excludes="features/*example*/**,plugins/*example*/**" />
		</copy>
		<copy todir="${tempDir}/buildScripts" flatten="true" overwrite="true">
			<fileset dir="${builder}/../../../sdk/srcBuild" excludes="fetch/**,incl,jdtcoresrc/**" />
		</copy>

		<!-- fetch scripts are not required for source included drop.-->
		<delete>
			<fileset dir="${tempDir}/buildScripts" includes="fetch*.xml" />
			<!-- delete some jars that are not needed to build Eclipse -->
			<fileset file="${tempDir}/buildScripts/plugins/org.eclipse.osgi/osgi/collx.jar" />
			<fileset file="${tempDir}/buildScripts/plugins/org.eclipse.osgi/osgi/ee.foundation.jar" />
			<fileset file="${tempDir}/buildScripts/plugins/org.eclipse.osgi/osgi/ee.minimum.jar" />
			<fileset file="${tempDir}/buildScripts/plugins/org.eclipse.osgi/osgi/exceptions.jar" />
			<fileset file="${tempDir}/buildScripts/plugins/org.eclipse.osgi/osgi/xmlParserAPIs.jar" />
			<fileset file="${tempDir}/buildScripts/plugins/org.eclipse.osgi/osgi/osgi-r3-jdk131-notsigned.jar" />
		</delete>

		<!--  set correct permissions on linux script -->
		<chmod file="${tempDir}/buildScripts/build" perm="755" />
		<exec dir="${tempDir}/buildScripts" executable="zip">
			<arg line="-q ${postingDirectory}/${buildLabel}/eclipse-sourceBuild-srcIncluded-${buildId}.zip -r ." />
		</exec>
		<checksum file="${postingDirectory}/${buildLabel}/eclipse-sourceBuild-srcIncluded-${buildId}.zip" property="md5.2"/>
		<echo message="${md5.2} *eclipse-sourceBuild-srcIncluded-${buildId}.zip" file="${postingDirectory}/${buildLabel}/checksum/eclipse-sourceBuild-srcIncluded-${buildId}.zip.md5"/>

		<copy file="${builder}/../../../sdk/srcBuild/incl/instructions.html" tofile="${postingDirectory}/${buildLabel}/srcIncludedBuildInstructions.html" />
		<copy file="${builder}/../../../sdk/srcBuild/fetch/instructions.html" tofile="${postingDirectory}/${buildLabel}/srcFetchBuildInstructions.html" />

		<delete dir="${tempDir}/" />
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>


</project>
