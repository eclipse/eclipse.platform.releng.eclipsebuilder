<!-- Copyright (c) 2011 IBM Corporation and others. All rights reserved.
    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v1.0 which accompanies this distribution,
    and is available at http://www.eclipse.org/legal/epl-v10.html Contributors:
    IBM Corporation - initial API and implementation -->

<project
    name="Hudson-Tests"
    default="runTests"
    basedir=".">

    <!-- 
    this script is invoked by the build, on the build machine, 
    to signify to hudson "the build is done", pass a few parameters, 
    then let Hudson take over. 
    
    wget - -no-verbose -O invokeTestsJSON.xml http://git.eclipse.org/c/platform/eclipse.platform.releng.eclipsebuilder.git/plain/invokeTestsJSON.xml?h=master 2>&1;
    
    -->





    <target
        name="runTests"
        depends="init">
        <antcall target="JUnitTests" />
    </target>


    <target name="JUnitTests"
        depends="init">
        
        <!-- 
          currently we test on three platforms. 
          So, three parallel calls since on different machines (and Hudson queues). 
          TODO: Can these be called, in parrallel via callant (or, perhaps subant?) 
          for greater flexibility in what to test?
        -->

        <parallel>

            <!--
            <antcall target="triggerHudsonTests">
                <param
                    name="job"
                    value="ep${eclipseStreamMajor}-unit-win32" />
                <param
                    name="suffix"
                    value="win32.zip" />
            </antcall>
            -->
 
            <antcall target="triggerHudsonTests">
                <param
                    name="job"
                    value="ep${eclipseStreamMajor}-unit-lin64" />
                <param
                    name="suffix"
                    value="linux-gtk-x86_64.tar.gz" />
            </antcall>

            <antcall target="triggerHudsonTests">
                <param
                    name="job"
                    value="ep${eclipseStreamMajor}-unit-mac32" />
                <param
                    name="suffix"
                    value="macosx-cocoa-x86.zip" />
            </antcall>

        </parallel>
    </target>


    <target
        name="triggerHudsonTests"
        depends="init">

        <property environment="env" />

     <!-- 
     baseURL used to be "required parameter" for Hudson job, but seemed overly complicated so 
     I compute all this later (based on stream and id) but, I've learned, one disadvantage is this 
     restricts test code locations to "downloads". There might be times we want to do from "build" 
     locations, or similar. Not to mention, other, internal test systems someday. 
     
        <property
            name="baseURL"
            value="http://download.eclipse.org/eclipse/downloads/${dropsDirSegment}/${buildId}" />
     -->
        
        <!-- Hudson jobs currentl have three required parameters -->
        <property
            name="JSON_buildId"
            value="{&quot;name&quot;:&quot;buildId&quot;,&quot;value&quot;:&quot;${buildId}&quot;}" />
        <property
            name="JSON_eclipseStream"
            value="{&quot;name&quot;:&quot;eclipseStream&quot;,&quot;value&quot;:&quot;${eclipseStream}&quot;}" />

        <property
            name="json"
            value="{&quot;parameter&quot;: [${JSON_buildId},${JSON_eclipseStream}] }" />

        <!-- fetch the next hudson build number from the hudson job API -->
        <exec executable="curl">
            <arg line="-G" />
            <arg value="https://hudson.eclipse.org/hudson/job/${job}/api/json" />
            <arg line="-o ${jobNumberOut}/nextBuildNumber${job}" />
        </exec>
        <exec
            executable="bash"
            outputproperty="nextHudsonBuild">
            <arg value="-c" />
            <arg value="grep -o 'nextBuildNumber&quot;:[0-9]*' ${jobNumberOut}/nextBuildNumber${job} | cut -d ':' -f 2" />
        </exec>
        <!-- 
         don't delete ... for debugging for now ... but long term might make use of this (and 
         other info) to "find" our results? 
        <delete file="${jobNumberOut}/nextBuildNumber${job}" />
        -->
        <echo message="Next hudson build number is ${nextHudsonBuild}." />

        <echo message="${json}" />
        <exec executable="curl">
            <arg line="-X POST" />
            <arg value="https://hudson.eclipse.org/hudson/job/${job}/build" />
            <arg line="-d token=${env.HUDSON_TOKEN}" />
            <arg value="--data-urlencode" />
            <arg value="json=${json}" />
        </exec>

        <property
            name="hudsonResultRootURL"
            value="https://hudson.eclipse.org/hudson/job/${job}/${nextHudsonBuild}/artifact/*zip*/" />
        <property
            name="hudsonResultURL"
            value="${hudsonResultRootURL}/archive.zip" />
        <echo message="hudsonResultURL ${hudsonResultURL} " />
        <antcall target="getHudsonResults" />

    </target>

    <target
        name="getHudsonResults"
        depends="init">
        <!-- wait for the test results to appear 
            1440 is 24 hours. This should be temporay and is needed for when 
            2 builds happen near each other, windows and mac might take 12 hours, and 
            are ran serially. This should be reduced to 960 (16 hours) or 600 (10 hours)
            in future as we get tests running right.
        -->
        <echo message="Waiting for ${hudsonResultURL}." />
        <waitfor
            maxwait="1440"
            maxwaitunit="minute"
            checkevery="10"
            checkeveryunit="minute">
            <http url="${hudsonResultURL}" />
        </waitfor>

        <property
            name="tmpzipdir"
            value="${postingDirectory}/${buildId}/testresults/tmp${job}" />
        <mkdir dir="${tmpzipdir}" />
        <get
            ignoreerrors="true"
            src="${hudsonResultURL}"
            dest="${tmpzipdir}/archive.zip" />
        <unzip
            src="${tmpzipdir}/archive.zip"
            dest="${postingDirectory}/${buildId}/testresults/">
            <globmapper
                from="archive/workarea/${buildId}/eclipse-testing/results/*"
                to="*" />
        </unzip>

        <antcall target="createPromoteScript" />
    </target>

    <target name="createPromoteScript" 
        depends="init">
        <!-- Create and que up promotion script after we have fetched the results back from hudson.
             (We need to promote under a different user ID since we builder under e4Build that 
             that is not a userID). 
             The "updateDropLocation.sh" file is similar to initial "sync" file, 
             but, a little different, and could potential be more different, or more similar? 
             in future. -->

        <property
            name="updatescriptname"
            value="/shared/eclipse/sdk/promotion/queue/promote-update-${buildId}-${job}.sh" />

        <echo
            message="#!/usr/bin/env bash${line.separator}"
            file="${updatescriptname}" />
        <echo
            message="# promotion script created${line.separator}"
            append="true"
            file="${updatescriptname}" />
        <echo
            message="/shared/eclipse/sdk/promotion/updateDropLocation.sh ${eclipseStream} ${buildId}${line.separator}"
            append="true"
            file="${updatescriptname}" />
        
        <!-- we restrict "others" rights for a bit more security or safety from accidents -->
        <chmod
            perm="ug=rwx,o-rwx"
            file="${updatescriptname}" />
        
        <!-- dont' delete zip, for now, to aide debugging
        <delete includeEmptyDirs="true">
            <fileset dir="${tmpzipdir}" />
        </delete>
        -->


    </target>

    <target
        name="init"
        depends="initStreamVariables"
        unless="invokeTestsJSONinitialized">

        <condition
            property="dropsDirSegment"
            value="drops4"
            else="drops">
            <equals
                arg1="${eclipseStreamMajor}"
                arg2="4" />
        </condition>
        

        <script language="javascript">
            var buildId = project.getProperty("buildId");
            var pattern = new RegExp(/^([IMNSR])(\d{8})-(\d{4})$/);

            var sArray = pattern.exec(buildId);
            // sArray 0 is "whole match"
            project.setProperty("buildType", sArray[1]);
        </script>
        
        <property
            name="buildRoot"
            value="/shared/eclipse/eclipse${eclipseStreamMajor}${buildType}" />

        <property
            name="postingDirectory"
            value="${buildRoot}/siteDir/eclipse/downloads/${dropsDirSegment}" />


        <property
            name="jobNumberOut"
            value="${postingDirectory}/${buildId}/testresults/" />
        <!-- make sure this directory exists, as we'll later try to 
             write information file there -->
        <echo message="jobNumberOut: ${jobNumberOut}" />
        <mkdir dir="${jobNumberOut}" />
        
        <!-- TODO: find out if and why we need "buildLabel" defined here? -->
        <property
            name="buildLabel"
            value="${buildId}" />


        <property
            name="invokeTestsJSONinitialized"
            value="true" />
    </target>

    <target name="initStreamVariables">

        <fail
            unless="eclipseStream"
            message="eclipseStream must be provided by caller" />
        <condition property="streamOK">
            <matches
                pattern="\d\.\d\.\d"
                string="${eclipseStream}" />
        </condition>
        <fail
            message="eclipseStream variable had unexpected format. Should be digit.digit.digit, but was ${eclipseStream}"
            unless="streamOK" />
        <script language="javascript">
            var eclipseStream = project.getProperty("eclipseStream");
            var pattern = new
            RegExp(/(\d+)\.(\d+)\.(\d+)/);

            var sArray = pattern.exec(eclipseStream);
            // sArray[0] is "whole match"
            project.setProperty("eclipseStreamMajor", sArray[1]);
            project.setProperty("eclipseStreamMinor", sArray[2]);
            project.setProperty("eclipseStreamService", sArray[3]);

        </script>

    </target>


</project>