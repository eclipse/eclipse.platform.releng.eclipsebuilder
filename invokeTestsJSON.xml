<!-- Copyright (c) 2011 IBM Corporation and others. All rights reserved.
    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v1.0 which accompanies this distribution,
    and is available at http://www.eclipse.org/legal/epl-v10.html Contributors:
    IBM Corporation - initial API and implementation -->

<project
    name="Hudson-Tests"
    default="runTests"
    basedir=".">

    <!-- 
    this script is invoked by the build, on the build machine, 
    to signify to hudson "the build is done", pass a few parameters, 
    then let Hudson's job/scripts take over 
    
    wget - -no-verbose -O invokeTestsJSON.xml http://git.eclipse.org/c/platform/eclipse.platform.releng.eclipsebuilder.git/plain/invokeTestsJSON.xml?h=master 2>&1;
    
    -->


    <property
        name="jobNumberOut"
        value="${postingDirectory}/${buildId}/testresults/" />
    <property
        name="buildLabel"
        value="${buildId}" />

    <!-- make sure this directory exists, as we'll later try to 
         write information file there -->
    <echo message="jobNumberOut: ${jobNumberOut}" />
    <mkdir dir="${jobNumberOut}" />

    <target name="runTests">
        <antcall target="JUnitTests" />
    </target>


    <!-- 
        note: implicitly assumes the antcalls inheret context, 
        so have access to $eclipseStream and $buildType
    -->
    <target name="JUnitTests">
        
        <!-- 
            TODO: make less exactly hard coded in future
            also, check for validity using "matches" digit*\.digit*\.digit*
        -->
        <condition
            property="jobNameSuffix"
            value="2"
            else="">
            <equals
                arg1="${eclipseStream}"
                arg2="4.2.0" />
        </condition>

        <parallel>

            <antcall target="triggerHudsonTests">
                <param
                    name="job"
                    value="JUnit-win${jobNameSuffix}" />
                <param
                    name="suffix"
                    value="win32.zip" />
            </antcall>

            <antcall target="triggerHudsonTests">
                <param
                    name="job"
                    value="eclipse-JUnit-Linux${jobNameSuffix}" />
                <param
                    name="suffix"
                    value="linux-gtk-x86_64.tar.gz" />
            </antcall>

            <antcall target="triggerHudsonTests">
                <param
                    name="job"
                    value="eclipse-JUnit-mac${jobNameSuffix}" />
                <param
                    name="suffix"
                    value="macosx-cocoa-x86.zip" />
            </antcall>

        </parallel>
    </target>


    <target name="triggerHudsonTests">

        <property environment="env" />

        <!-- 
             recently added variables, required for correct operation, 
             so we will fail fast if we forget to pass them in 
        -->
        <fail unless="eclipseStream" />
        <fail unless="buildType" />

        <!-- 
            TODO: make less exactly hard coded in future
            also, check for validity using "matches" digit*\.digit*\.digit*
        -->
        <condition
            property="dropsDirSegment"
            value="drops4"
            else="drops">
            <equals
                arg1="${eclipseStream}"
                arg2="4.2.0" />
        </condition>

        <property
            name="baseURL"
            value="http://download.eclipse.org/eclipse/downloads/${dropsDirSegment}/${buildId}" />

        <property
            name="JSON_buildId"
            value="{&quot;name&quot;:&quot;buildId&quot;,&quot;value&quot;:&quot;${buildId}&quot;}" />
        <property
            name="JSON_eclipseStream"
            value="{&quot;name&quot;:&quot;eclipseStream&quot;,&quot;value&quot;:&quot;${eclipseStream}&quot;}" />
        <property
            name="JSON_buildType"
            value="{&quot;name&quot;:&quot;buildType&quot;,&quot;value&quot;:&quot;${buildType}&quot;}" />
        <!--current build repository too ? -->

        <property
            name="json"
            value="{&quot;parameter&quot;: [${JSON_buildId},${JSON_eclipseStream},${JSON_buildType}] }" />

        <!-- fetch the next hudson build number from the hudson job API -->
        <exec executable="curl">
            <arg line="-G" />
            <arg value="https://hudson.eclipse.org/hudson/job/${job}/api/json" />
            <arg line="-o ${jobNumberOut}/nextBuildNumber${job}" />
        </exec>
        <exec
            executable="bash"
            outputproperty="nextHudsonBuild">
            <arg value="-c" />
            <arg value="grep -o 'nextBuildNumber&quot;:[0-9]*' ${jobNumberOut}/nextBuildNumber${job} | cut -d ':' -f 2" />
        </exec>
        <!-- 
             don't delete ... for debugging for now ... but long term might make use of this (and 
             other info) to "find" our results? 
        <delete file="${jobNumberOut}/nextBuildNumber${job}" />
        -->
        <echo message="Next hudson build number is ${nextHudsonBuild}." />

        <echo message="${json}" />
        <exec executable="curl">
            <arg line="-X POST" />
            <arg value="https://hudson.eclipse.org/hudson/job/${job}/build" />
            <arg line="-d token=${env.HUDSON_TOKEN}" />
            <arg value="--data-urlencode" />
            <arg value="json=${json}" />
        </exec>

        <property
            name="hudsonResultRootURL"
            value="https://hudson.eclipse.org/hudson/job/${job}/${nextHudsonBuild}/artifact/*zip*/" />
        <property
            name="hudsonResultURL"
            value="${hudsonResultRootURL}/archive.zip" />
        <antcall target="getHudsonResults" />
        <echo message="hudsonResultURL ${hudsonResultURL} " />
    </target>

    <target name="getHudsonResults">
        <!-- wait for the test results to appear -->
        <echo message="Waiting for ${hudsonResultURL}." />
        <waitfor
            maxwait="720"
            maxwaitunit="minute"
            checkevery="10"
            checkeveryunit="minute">
            <http url="${hudsonResultURL}" />
        </waitfor>

        <property
            name="tmpzipdir"
            value="${postingDirectory}/${buildId}/testresults/tmp${job}" />
        <mkdir dir="${tmpzipdir}" />
        <get
            ignoreerrors="true"
            src="${hudsonResultURL}"
            dest="${tmpzipdir}/archive.zip" />
        <unzip
            src="${tmpzipdir}/archive.zip"
            dest="${tmpzipdir}" />

        <available
            file="${tmpzipdir}/archive/ws"
            property="resultAvailable" />

        <antcall target="finishup" />



    </target>
    <target
        name="finishup"
        depends="checkresults"
        if="resultAvailable">
        <zip
            destfile="${postingDirectory}/${buildId}/testresults/archive.zip"
            basedir="${tmpzipdir}/archive/ws" />
        <unzip
            src="${postingDirectory}/${buildId}/testresults/archive.zip"
            dest="${postingDirectory}/${buildId}/testresults" />
        <delete file="${tmpzipdir}/archive.zip" />
        <delete file="${postingDirectory}/${buildId}/testresults/archive.zip" />

    </target>
    <target
        name="checkresults"
        unless="resultAvailable">
        <echo message="ERROR: archive (zip) file came back empty from hudon build" />
    </target>
</project>