<project
    name="runTests2"
    default="runTests2"
    basedir=".">

    <!-- hurestic to check if we are running on hudson variable, if so -->
    <target name="checkHudson">
        <!-- HUDSON_USER should just be "anonyous" for most of our cases (currently)
             but seems a safe variable to check ... if set, assume we are on hudson, 
             if not set, assume we are not and leave "hudson" unset (not false) 
             Hmm, seems HUDSON_USER is not reliably set. The only 4 I saw reliably 
             set were
             [echoproperties] env.HUDSON_COOKIE
             [echoproperties] env.HUDSON_HOME
             [echoproperties] env.HUDSON_SERVER_COOKIE
             [echoproperties] env.HUDSON_URL
             Not sure which would be best/safest to use in huristic, but 
             I'll go with URL for now. 
             -->
        <property environment="env" />
        <condition property="hudson">
            <isset property="env.HUDSON_URL" />
        </condition>

    </target>

    <target
        name="hudson-init"
        if="hudson"
        depends="checkHudson">
        <!-- as of this writing, 04/22/2012, this was current list of 
             hudson provided variables. We take advantage of a number 
             of them, but "translate" them into our own variable names, 
             for a little loser build-system seperattion 
        BUILD_NUMBER
            The current build number, such as "153"
        BUILD_ID
            The current build id, such as "2005-08-22_23-59-59" (YYYY-MM-DD_hh-mm-ss)
        JOB_NAME
            Name of the project of this build, such as "foo"
        BUILD_TAG
            String of "hudson-${JOB_NAME}-${BUILD_NUMBER}". Convenient to put into a resource file, a jar file, etc for easier identification.
        EXECUTOR_NUMBER
            The unique number that identifies the current executor (among executors of the same machine) that's carrying out this build. This is the number you see in the "build executor status", except that the number starts from 0, not 1.
        NODE_NAME
            Name of the slave if the build is on a slave, or "" if run on master
        NODE_LABELS
            Whitespace-separated list of labels that the node is assigned.
        JAVA_HOME
            If your job is configured to use a specific JDK, this variable is set to the JAVA_HOME of the specified JDK. When this variable is set, PATH is also updated to have $JAVA_HOME/bin.
        WORKSPACE
            The absolute path of the workspace.
        HUDSON_URL
            Full URL of Hudson, like http://server:port/hudson/
        BUILD_URL
            Full URL of this build, like http://server:port/hudson/job/foo/15/
        JOB_URL
            Full URL of this job, like http://server:port/hudson/job/foo/
        SVN_REVISION
            For Subversion-based projects, this variable contains the revision number of the module.
        CVS_BRANCH
            For CVS-based projects, this variable contains the branch of the module. If CVS is configured to check out the trunk, this environment variable will not be set.
        HUDSON_USER
            Currently logged in user
            -->
        <property environment="hudson" />
        <property
            name="WORKSPACE"
            value="${hudson.WORKSPACE}" />


    </target>
    <target
        name="init"
        depends="hudson-init">

        <!-- if not otherwise set, such as by hudson-init, 
             assume "current directory" for WORKSPACE -->
        <property
            name="WORKSPACE"
            value="${basedir}" />
        

        <property
            name="relengBaseBuilderDir"
            value="${WORKSPACE}/org.eclipse.releng.basebuilder" />
        <property
            name="eclipseBuilderDir"
            value="${WORKSPACE}/org.eclipse.releng.eclipsebuilder" />
        
        <!-- 
             recently added variables, required for correct operation, 
             so we will fail fast if we forget to pass them in 
        -->
        <fail unless="eclipseStream" />
        <fail unless="buildType" />

        <!-- 
            TODO: make less exactly hard coded in future
            also, check for validity using "matches" digit*\.digit*\.digit*
        -->
        <condition
            property="dropsDirSegment"
            value="drops4"
            else="drops">
            <equals
                arg1="${eclipseStream}"
                arg2="4.2.0" />
        </condition>
        <condition
            property="updateSiteSegment"
            value="4.2"
            else="3.8">
            <equals
                arg1="${eclipseStream}"
                arg2="4.2.0" />
        </condition>

        <echo message="hudson: ${hudson}" />
        <echo message="WORKSPACE: ${WORKSPACE}" />
        <echo message="buildId: ${buildId}" />
        <echo message="relengBaseBuilderDir: ${relengBaseBuilderDir}" />
        <echo message="eclipseBuilderDir: ${eclipseBuilderDir}" />
        <echo message="java.home: ${java.home}" />
        <echo message="eclipseStream: ${eclipseStream}" />
        <echo message="buildType: ${buildType}" />
        
		
		<!-- <condition property="testDir" value="${hudson.WORKSPACE}\ws\${hudson.BUILD_ID}">
			<os family="windows" />
		</condition> 
        <condition
            property="testDir"
            value="${WORKSPACE}\ws">
            <os family="windows" />
        </condition>
        -->
        <property
            name="testDir"
            value="${WORKSPACE}/ws/${buildId}" />
        <echo message="DEBUG: testDir ${testDir}" />
        <!--
        <condition
            property="executionDir"
            value="${testDir}\eclipse-testing">
            <os family="windows" />
        </condition>
        -->
        <property
            name="executionDir"
            value="${testDir}/eclipse-testing" />
        <mkdir dir="${executionDir}" />
        <echo message="executionDir ${executionDir}" />

        <!-- what's intended/needed? specific, simple repo? Or composite? -->
        <property
            name="currentbuildrepo"
            value="http://download.eclipse.org/eclipse/updates/${updateSiteSegment}-${buildType}-builds/${buildId}" />
        <echo message="currentbuildrepo: ${currentbuildrepo}" />

        <property
            name="buildURL"
            value="http://download.eclipse.org/eclipse/downloads/${dropsDirSegment}/${buildId}" />
        
        <!-- 
             there's nothing "automatic" about the local cache (so far). 
             If specified (such as on hudson command line that executes this 
             file, as, say, 
             -DlocalCache=file:///shared/eclipse/localCache
             then all the downloads required must be already available there.
             It is intended to speed up local testing to avoid re-downloading 
             files. 
             -->
        <condition property="archiveLocation" value="${localCache}" else="${buildURL}">
           <isset property="localCache"/>
        </condition>
        
        <echo message="buildURL ${buildURL}" />
        <echo message="archiveLocation ${archiveLocation}" />
    </target>

    <target name="platformIndependentZips">
        <get
            src="${archiveLocation}/eclipse-Automated-Tests-${buildId}.zip"
            dest="${testDir}/eclipse-Automated-Tests-${buildId}.zip" />
        <get
            src="${archiveLocation}/eclipse-${buildId}-delta-pack.zip"
            dest="${executionDir}/eclipse-${buildId}-delta-pack.zip" />
        <get
            src="${archiveLocation}/eclipse-Automated-Tests-${buildId}.zip"
            dest="${executionDir}/eclipse-Automated-Tests-${buildId}.zip" />

    </target>

    <target name="getwinzips" depends="platformIndependentZips">
        <get
            src="${archiveLocation}/eclipse-SDK-${buildId}-win32.zip"
            dest="${executionDir}/eclipse-SDK-${buildId}-win32.zip" />
        <get
            src="${archiveLocation}/eclipse-platform-${buildId}-win32.zip"
            dest="${executionDir}/eclipse-platform-${buildId}-win32.zip" />
        <get
            src="http://download.eclipse.org/eclipse/downloads/drops/R-3.7.1-201109091335/eclipse-platform-3.7.1-win32.zip"
            dest="${executionDir}/eclipse-platform-3.7.1-win32.zip" />
    </target>

    <target name="getlinzips" depends="platformIndependentZips">
        <get
            src="${archiveLocation}/eclipse-SDK-${buildId}-linux-gtk-x86_64.tar.gz"
            dest="${executionDir}/eclipse-SDK-${buildId}-linux-gtk-x86_64.tar.gz" />
        <get
            src="${archiveLocation}/eclipse-platform-${buildId}-linux-gtk-x86_64.tar.gz"
            dest="${executionDir}/eclipse-platform-${buildId}-linux-gtk-x86_64.tar.gz" />
        <get
            src="http://download.eclipse.org/eclipse/downloads/drops/R-3.7.1-201109091335/eclipse-platform-3.7.1-linux-gtk-x86_64.tar.gz"
            dest="${executionDir}/eclipse-platform-3.7.1-linux-gtk-x86_64.tar.gz" />
    </target>

    <target name="getlinzips32" depends="platformIndependentZips">
        <get
            src="${archiveLocation}/eclipse-SDK-${buildId}-linux-gtk.tar.gz"
            dest="${executionDir}/eclipse-SDK-${buildId}-linux-gtk.tar.gz" />
        <get
            src="${archiveLocation}/eclipse-platform-${buildId}-linux-gtk.tar.gz"
            dest="${executionDir}/eclipse-platform-${buildId}-linux-gtk.tar.gz" />
        <get
            src="http://download.eclipse.org/eclipse/downloads/drops/R-3.7.1-201109091335/eclipse-platform-3.7.1-linux-gtk-x86_64.tar.gz"
            dest="${executionDir}/eclipse-platform-3.7.1-linux-gtk-x86_64.tar.gz" />
    </target>

    <target name="getmaczips" depends="platformIndependentZips">
        <get
            src="${archiveLocation}/eclipse-SDK-${buildId}-macosx-cocoa.tar.gz"
            dest="${executionDir}/eclipse-SDK-${buildId}-macosx-cocoa.tar.gz" />
        <get
            src="${archiveLocation}/eclipse-platform-${buildId}-macosx-cocoa.tar.gz"
            dest="${executionDir}/eclipse-platform-${buildId}-macosx-cocoa.tar.gz" />
        <get
            src="http://download.eclipse.org/eclipse/downloads/drops/R-3.7.1-201109091335/eclipse-platform-3.7.1-macosx-cocoa.tar.gz"
            dest="${executionDir}/eclipse-platform-3.7.1-macosx-cocoa.tar.gz" />
    </target>

    <target
        name="configure.team.cvs.test"
        depends="computeExpectedLocation,getcvstestProperties" />

    <target name="computeExpectedLocation">
        <condition
            property="cvstest.properties"
            value="/shared/eclipse/buildtests/cvstest.properties">
            <and>
                <os family="unix" />
                <not>
                    <os family="mac" />
                </not>
            </and>
        </condition>
        <condition
            property="cvstest.properties"
            value="c:\users\hudsonbuild\cvstest.properties">
            <os family="windows" />
        </condition>
        <condition
            property="cvstest.properties"
            value="/Users/hudsonbuild/cvstest.properties">
            <os family="mac" />
        </condition>
    </target>

    <target
        name="getcvstestProperties"
        if="cvsPropertiesAvailable"
        depends="computeExpectedLocation,checkCVSPropExists,logNoExistence">

        <echo message="cvstest.properties file: ${cvstest.properties}" />
        <replace
            summary="true"
            file="${executionDir}/test.xml"
            propertyFile="${cvstest.properties}">
            <replacefilter
                token="${cvs_user}"
                property="cvs_user" />
            <replacefilter
                token="${cvs_password}"
                property="cvs_password" />
            <replacefilter
                token="${cvs_host}"
                property="cvs_host" />
            <replacefilter
                token="${cvs_root}"
                property="cvs_root" />
        </replace>

    </target>

    <target
        name="checkCVSPropExists"
        depends="computeExpectedLocation">
        <condition property="cvsPropertiesAvailable">
            <available file="${cvstest.properties}" />
        </condition>
    </target>
    <target
        name="logNoExistence"
        depends="checkCVSPropExists"
        unless="cvsPropertiesAvailable">
        <echo message="cvs properties file was not found in this environment. " />
        <echo message="   expected file: ${cvstest.properties} " />
    </target>
    <target
        name="runTests2"
        depends="init">

        <echo message="DEBUG: echoproperties at start of main runTests2.xml (after inits)" />
        <echoproperties />
        <property
            name="test.xml"
            value="${relengBaseBuilderDir}/plugins/org.eclipse.build.tools/scripts/test.xml" />
        <condition
            property="testPlatform"
            value="win7">
            <and>
                <equals
                    arg1="${osgi.os}"
                    arg2="win32" />
                <equals
                    arg1="${osgi.ws}"
                    arg2="win32" />
                <equals
                    arg1="${osgi.arch}"
                    arg2="x86" />
            </and>
        </condition>
        <echo message="os ws arch ${osgi.os} ${osgi.ws} ${osgi.arch}" />
        <condition
            property="testPlatform"
            value="linux">
            <and>
                <equals
                    arg1="${osgi.os}"
                    arg2="linux" />
                <equals
                    arg1="${osgi.ws}"
                    arg2="gtk" />
                <or>
                    <equals
                        arg1="${osgi.arch}"
                        arg2="x86_64" />
                    <equals
                        arg1="${osgi.arch}"
                        arg2="x86" />
                </or>
            </and>
        </condition>
        <condition
            property="testPlatform"
            value="linux32">
            <and>
                <equals
                    arg1="${osgi.os}"
                    arg2="linux" />
                <equals
                    arg1="${osgi.ws}"
                    arg2="gtk" />
                <or>
                    <equals
                        arg1="${osgi.arch}"
                        arg2="x86" />
                    <equals
                        arg1="${osgi.arch}"
                        arg2="x86" />
                </or>
            </and>
        </condition>
        <condition
            property="testPlatform"
            value="macmini">
            <and>
                <equals
                    arg1="${osgi.os}"
                    arg2="macosx" />
                <equals
                    arg1="${osgi.ws}"
                    arg2="cocoa" />
                <equals
                    arg1="${osgi.arch}"
                    arg2="x86" />
            </and>
        </condition>
        <echo message="testPlatform  ${testPlatform}" />
        <condition
            property="getArtifacts"
            value="getwinzips">
            <equals
                arg1="${testPlatform}"
                arg2="win7" />
        </condition>
        <condition
            property="getArtifacts"
            value="getlinzips">
            <equals
                arg1="${testPlatform}"
                arg2="linux" />
        </condition>
        <condition
            property="getArtifacts"
            value="getlinzips32">
            <equals
                arg1="${testPlatform}"
                arg2="linux32" />
        </condition>
        <condition
            property="getArtifacts"
            value="getmaczips">
            <equals
                arg1="${testPlatform}"
                arg2="macmini" />
        </condition>
        <echo message="getArtifacts ${getArtifacts}" />
        <antcall target="${getArtifacts}" />
        
        <!-- 
            Try using "loadproperties", insstead of "properties file=" to see if 
            that will "evaluate" variables as loaded. Otherwise, the <properties form 
            has to move to "top of file" ... outer scope?
           <property file="${eclipseBuilderDir}/eclipse/buildConfigs/sdk.tests/testConfigs/${testPlatform}/testing.properties" />
        -->
        <property
            name="testingPropertiesfile"
            value="${eclipseBuilderDir}/eclipse/buildConfigs/sdk.tests/testConfigs/${testPlatform}/testing.properties" />
        <loadproperties>
            <file file="${testingPropertiesfile}" />
        </loadproperties>

        <property
            name="tester"
            value="${executionDir}" />

        <echo message="DEBUG: testDir: ${testDir}" />
        <echo message="DEBUG: executionDir: ${executionDir}" />
        
		<!--if executiondir starts with c:\ you'll need to escape it so it can load the filename properly with java -->
        <pathconvert
            targetos="unix"
            property="windowsfile">
            <path location="${executionDir}" />
        </pathconvert>
        <echo message="windowsfile ${windowsfile}" />
        <property
            name="p2executionDir"
            value="${windowsfile}" />
        <replace
            summary="true"
            file="${eclipseBuilderDir}/eclipse/buildConfigs/sdk.tests/testConfigs/${testPlatform}/equinoxp2tests.properties"
            token="@executionDir@"
            value="${p2executionDir}" />
        <replace
            summary="true"
            file="${eclipseBuilderDir}/eclipse/buildConfigs/sdk.tests/testConfigs/${testPlatform}/equinoxp2tests.properties"
            token="@buildId@"
            value="${buildId}" />
        <replace
            summary="true"
            file="${eclipseBuilderDir}/eclipse/buildConfigs/sdk.tests/testConfigs/${testPlatform}/equinoxp2tests.properties"
            token="@org.eclipse.equinox.p2.tests.current.build.repo@"
            value="${currentbuildrepo}" />
        <property file="${eclipseBuilderDir}/eclipse/buildConfigs/sdk.tests/testConfigs/${testPlatform}/equinoxp2tests.properties" />

        <echo message="executionDir ${executionDir}" />

        <copy todir="${executionDir}">
            <fileset dir="${eclipseBuilderDir}/eclipse/buildConfigs/sdk.tests/testConfigs/${testPlatform}" />
        </copy>
        <copy
            verbose="true"
            todir="${executionDir}"
            overwrite="true">
            <fileset dir="${eclipseBuilderDir}/eclipse/buildConfigs/sdk.tests/testScripts" />
        </copy>
        <antcall target="configure.team.cvs.test" />
        <echo message="test.xml: ${test.xml}" />
        <ant antfile="${test.xml}">
        </ant>

    </target>

</project>
