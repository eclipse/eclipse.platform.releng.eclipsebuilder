<project name="Build specific targets and properties" default="noDefault" >


<!-- ===================================================================== -->
<!-- Global properties                                                     -->
<!-- ===================================================================== -->
<!-- 	property file containing information related to emailing build
 		related messages.                                                  -->
<property file="monitor.properties" />

<!--
		plugin directory names including version.  These properties are
		used to for file operations that involve built plugins.
-->
<property name="org.eclipse.sdk.examples.source.version" value="2.1.0" />
<property name="org.eclipse.sdk.examples.win32.source.version" value="2.1.0" />
<property name="org.eclipse.test.version" value="2.1.0" />
<property name="org.eclipse.sdk.tests.version" value="2.1.0" />
<property name="org.eclipse.team.extras.version" value="2.1.0" />
<property name="org.eclipse.platform.version" value="2.1.0" />


<!-- ===================================================================== -->
<!-- Target called in org.eclipse.releng.basebuilder/build.xml             -->
<!-- to notify user of any os specific build issues.                       -->
<!-- ===================================================================== -->

<target name="printOsSpecificMessages" if="onWindows">
	<echo message="The UNIX versions of your build output will be invalid.
	  Windows will not preserve symbolic links and permissions on executable files." />
</target>


<!-- ===================================================================== -->
<!-- Setup targets called in org.eclipse.releng.basebuilder/setup.xml      -->
<!-- ===================================================================== -->
<!-- Target to check out map files from correct repository.
     Replace values for cvsRoot, package                                   -->

<target name="getMapFiles">

	<property name="cvsRoot" value=":pserver:anonymous@dev.eclipse.org:/home/eclipse" />
	<!--Notify recipients that build has started.-->
	<antcall target="mail">
		<param name="subject" value="Build has started " />
		<param name="message" value="Build ${buildid} (Timestamp: ${timestamp}) is underway." />
	</antcall>

	<!--Retrieve build submission project.-->
	<cvs cvsRoot="${cvsRoot}"
		package="org.eclipse.releng"
		dest="${basedir}"
		tag="${mapVersionTag}"
	/>
	
	<!--tag the map files project-->
	<antcall target="tagMapFiles" />
</target>

<target name="tagMapFiles" if="tag">
	<cvs dest="org.eclipse.releng" command="tag v${timestamp}" />
</target>

<!-- Add any steps required after setup but before building -->
<target name="postSetup">
<!--required-->
	<!-- setup the label.properties file packaged in the source builds. -->
	<!--Set this property to empty string-->
	<property name="buildType" value="" />
	<tstamp>
   		<format property="TODAY" pattern="MMMM d, yyyy"/>
		<format property="TSTAMP" pattern="HHmm" />
	</tstamp>
 	<copy file="label.properties.template" tofile="label.properties" overwrite="true"/>
	<replace file="label.properties" token="@builddate@" value="${TODAY}" />
	<replace file="label.properties" token="@buildtype@" value="${buildType}" />
	<replace file="label.properties" token="@ds@" value="${timestamp}" />
	<replace file="label.properties" token="@buildid@" value="${buildid}" />
</target>


<!-- ===================================================================== -->
<!-- List of target property settings used in allFeatures.                 -->
<!-- The eclipse build listener uses the description attribute to report   -->
<!-- on build progress.                                                    -->
<!-- ===================================================================== -->
<target name="fetchElement" description="Checking out source from dev.eclipse.org:/home/eclipse..." />
<target name="cleanElement" description="Scrubbing features and plugins of old jars..." />
<target name="generateScript" description="Generating build scripts..." />
<target name="compileFeature" description="Compiling java source..." />
<target name="gatherFeatureBinaries" description="Gathering binary distributables..." />
<target name="gatherFeatureSources" description="Gathering source distributables..." />
<target name="gatherLogs" description="Gathering compile logs..." />


<!-- ===================================================================== -->
<!-- Target to return All Features (for all products)                      -->
<!-- ===================================================================== -->
<target name="allFeatures">
	<!--call ${target} for reporting on progress of build-->
	<antcall target="${target}" />

	<!--
		the org.eclipse.platform-feature must be the first on this list due to 
		compile dependencies.  The win32 swt.jar (in org.eclipse.platform.win32-feature)
		must be compiled independently first since it is on the classpath of plugins
		in org.eclipse.platform-feature.
	-->
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform-feature" />
	</ant>
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.win32-feature" />
		<property name="os" value="win32" />
		<property name="ws" value="win32" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature"/>
		<property name="id" value="org.eclipse.platform.linux.motif-feature" />
		<property name="os" value="linux" />
		<property name="ws" value="motif" />
	</ant>
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.linux.gtk-feature" />
		<property name="os" value="linux" />
		<property name="ws" value="gtk" />
	</ant>
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.solaris.motif-feature" />
		<property name="os" value="solaris" />
		<property name="ws" value="motif" />
	</ant>
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.aix.motif-feature" />
		<property name="os" value="aix" />
		<property name="ws" value="motif" />
	</ant>
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.qnx.photon-feature" />
		<property name="os" value="qnx" />
		<property name="ws" value="photon" />
	</ant>
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.macosx.carbon-feature" />
		<property name="os" value="macosx" />
		<property name="ws" value="carbon" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.hpux.motif-feature" />
		<property name="os" value="hpux" />
		<property name="ws" value="motif" />
	</ant>

	<!--  platform source features -->
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.win32.source-feature" />
		<property name="os" value="win32" />
		<property name="ws" value="win32" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.linux.motif.source-feature" />
		<property name="os" value="linux" />
		<property name="ws" value="motif" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.linux.gtk.source-feature" />
		<property name="os" value="linux" />
		<property name="ws" value="gtk" />
	</ant>
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.solaris.motif.source-feature" />
		<property name="os" value="solaris" />
		<property name="ws" value="motif" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.aix.motif.source-feature" />
		<property name="os" value="aix" />
		<property name="ws" value="motif" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.hpux.motif.source-feature" />
		<property name="os" value="hpux" />
		<property name="ws" value="motif" />
	</ant>
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.qnx.photon.source-feature" />
		<property name="os" value="qnx" />
		<property name="ws" value="photon" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.macosx.carbon.source-feature" />
		<property name="os" value="macosx" />
		<property name="ws" value="carbon" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.source-feature" />
	</ant>

	
	<!--  SDK features -->
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.sdk.win32-feature" />
		<property name="os" value="win32" />
		<property name="ws" value="win32" />
	</ant>
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.sdk.linux.motif-feature" />
		<property name="os" value="linux" />
		<property name="ws" value="motif" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.sdk.linux.gtk-feature" />
		<property name="os" value="linux" />
		<property name="ws" value="gtk" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.sdk.solaris.motif-feature" />
		<property name="os" value="solaris" />
		<property name="ws" value="motif" />
	</ant>
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.sdk.aix.motif-feature" />
		<property name="os" value="aix" />
		<property name="ws" value="motif" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.sdk.qnx.photon-feature" />
		<property name="os" value="qnx" />
		<property name="ws" value="photon" />
	</ant>
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.sdk.macosx.carbon-feature" />
		<property name="os" value="macosx" />
		<property name="ws" value="carbon" />
	</ant>
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.sdk.hpux.motif-feature" />
		<property name="os" value="hpux" />
		<property name="ws" value="motif" />
	</ant>

	<!--Team Extras Features-->

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.team.extras-feature" />
	</ant>

	<!--JDT Features-->

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.jdt-feature" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.jdt.source-feature" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.jdt.macosx-feature" />
	</ant>
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.jdt.macosx.source-feature" />
	</ant>
	
	<!--PDE Features-->
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.pde-feature" />
	</ant>

	<!--Test Features-->

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.sdk.tests-feature" />
	</ant>
	
	<!--Example Features-->
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.sdk.examples-feature" />
	</ant>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.sdk.examples.win32-feature" />
	</ant>
	
</target>


<!-- ===================================================================== -->
<!-- Target to return all features for a particular product.               -->
<!-- ===================================================================== -->
<!-- Features that comprise SDK products -->
<target name="sdkFeatures">
	<condition property="platformId" value="${os}.${ws}">
			<not><equals arg1="${ws}" arg2="${os}" /></not>
	</condition>
	<condition property="platformId" value="${os}">
			<and><equals arg1="${ws}" arg2="${os}" /></and>
	</condition>

	<antcall target="platformFeatures" />
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.jdt" />
	</ant>
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.jdt.source" />
		<property name="featureIsSource" value="true" />
	</ant>
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.pde" />
	</ant>
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.platform.${platformId}" />
	</ant>
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.platform.${platformId}.source" />
		<property name="featureIsSource" value="true" />
	</ant>
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.sdk.${platformId}" />
	</ant>
</target>

<!-- Features that comprise platform products -->
<target name="platformFeatures">
	<condition property="platformId" value="${os}.${ws}">
			<not><equals arg1="${ws}" arg2="${os}" /></not>
	</condition>
	<condition property="platformId" value="${os}">
			<and><equals arg1="${ws}" arg2="${os}" /></and>
	</condition>

	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.platform" />
	</ant>
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.platform.source" />
		<property name="featureIsSource" value="true" />
	</ant>
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.platform.${platformId}" />
	</ant>
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.platform.${platformId}.source" />
		<property name="featureIsSource" value="true" />
	</ant>
</target>

<target name="macosxCarbonSdkFeatures">
	<antcall target="sdkFeatures" />
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.jdt.macosx" />
	</ant>
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.jdt.macosx.source" />
	</ant>
</target>

<target name="macosxCarbonPlatformFeatures">
	<antcall target="platformFeatures" />
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.jdt.macosx" />
	</ant>
</target>

<target name="jdtRuntimeFeatures">
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.jdt" />
	</ant>
</target>

<target name="teamExtrasRuntimeFeatures">
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.team.extras" />
	</ant>
</target>

<target name="exampleFeatures" >
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.sdk.examples" />
	</ant>
</target>

<target name="exampleWin32Features" >
	<antcall target="exampleFeatures" />
	
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.sdk.examples.win32" />
	</ant>
</target>

<target name="sdkTestsFeatures" >
	<ant antfile="genericTargets.xml" target="${target}" >
		<property name="feature" value="org.eclipse.sdk.tests" />
	</ant>
</target>


<!-- ===================================================================== -->
<!-- Target to return all Products to be built.                            -->
<!-- ===================================================================== -->

<target name="allProducts" description="Assembling drops...">
	
	<!-- SDK Products -->
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="macosxCarbonSdkFeatures" />
		<property name="os" value="macosx" />
		<property name="ws" value="carbon" />
		<property name="productTarName" value="eclipse-SDK-${buildid}-macosx-carbon.tar" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-SDK-${buildid}-macosx-carbon.zip" />
		<property name="productIsSDK" value="true" />
		<property name="postAssemblyTarget" value="macosxCarbonPostAssembly" />
		<property name="launcherFilesDir" value="macosx" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="preCleanTarget" value="macosxPreClean" />
	</ant>
	
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="sdkFeatures" />
		<property name="os" value="aix" />
		<property name="ws" value="motif" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-SDK-${buildid}-aix-motif.zip" />
		<property name="productIsSDK" value="true" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="aix" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>
	
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="sdkFeatures" />
		<property name="os" value="hpux" />
		<property name="ws" value="motif" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-SDK-${buildid}-hpux-motif.zip" />
		<property name="productIsSDK" value="true" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="hpux" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>

	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="sdkFeatures" />
		<property name="os" value="linux" />
		<property name="ws" value="gtk" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-SDK-${buildid}-linux-gtk.zip" />
		<property name="productIsSDK" value="true" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="linux/gtk" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>

	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="sdkFeatures" />
		<property name="os" value="linux" />
		<property name="ws" value="motif" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-SDK-${buildid}-linux-motif.zip" />
		<property name="productIsSDK" value="true" />
		<property name="zipArgs" value="-y" />
		<property name="preAssemblyTarget" value="linuxMotifPreAssembly" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="linux/motif" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>

	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="sdkFeatures" />
		<property name="os" value="qnx" />
		<property name="ws" value="photon" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-SDK-${buildid}-qnx-photon.zip" />
		<property name="productIsSDK" value="true" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="photon" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>
	
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="sdkFeatures" />
		<property name="os" value="solaris" />
		<property name="ws" value="motif" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-SDK-${buildid}-solaris-motif.zip" />
		<property name="productIsSDK" value="true" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="solaris" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>
	
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="sdkFeatures" />
		<property name="os" value="win32" />
		<property name="ws" value="win32" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-SDK-${buildid}-win32.zip" />
		<property name="productIsSDK" value="true" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="win32" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>

	<!-- Runtime Products -->
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="platformFeatures" />
		<property name="os" value="aix" />
		<property name="ws" value="motif" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-platform-${buildid}-aix-motif.zip" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="aix" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>
	
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="platformFeatures" />
		<property name="os" value="hpux" />
		<property name="ws" value="motif" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-platform-${buildid}-hpux-motif.zip" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="hpux" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>

	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="platformFeatures" />
		<property name="os" value="linux" />
		<property name="ws" value="gtk" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-platform-${buildid}-linux-gtk.zip" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="linux/gtk" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>

	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="platformFeatures" />
		<property name="os" value="linux" />
		<property name="ws" value="motif" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-platform-${buildid}-linux-motif.zip" />
		<property name="zipArgs" value="-y" />
		<property name="preAssemblyTarget" value="linuxMotifPreAssembly" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="linux/motif" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>
	
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="platformFeatures" />
		<property name="os" value="qnx" />
		<property name="ws" value="photon" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-platform-${buildid}-qnx-photon.zip" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="photon" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>
	
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="platformFeatures" />
		<property name="os" value="solaris" />
		<property name="ws" value="motif" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-platform-${buildid}-solaris-motif.zip" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="solaris" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>
	
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="macosxCarbonPlatformFeatures" />
		<property name="os" value="macosx" />
		<property name="ws" value="carbon" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-platform-${buildid}-macosx-carbon.zip" />
		<property name="productTarName" value="eclipse-platform-${buildid}-macosx-carbon.tar" />
		<property name="postAssemblyTarget" value="macosxCarbonPostAssembly" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="launcherFilesDir" value="macosx" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="preCleanTarget" value="macosxPreClean" />
	</ant>

	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="platformFeatures" />
		<property name="os" value="win32" />
		<property name="ws" value="win32" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-platform-${buildid}-win32.zip" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="launcherFilesDir" value="win32" />
		<property name="postAssemblyTarget" value="sdkAndPlatformPostAssembly" />
	</ant>
	
	<!--JDT runtime -->
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="jdtRuntimeFeatures" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-JDT-${buildid}.zip" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="postAssemblyTarget" value="jdtPostAssembly" />
	</ant>

	<!--FTP WebDAV runtime -->
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="teamExtrasRuntimeFeatures" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-FTP-WebDAV-${buildid}.zip" />
		<property name="productIsSDK" value="true" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
		<property name="postAssemblyTarget" value="teamExtrasPostAssembly" />
	</ant>

	<!--Examples-->
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="exampleWin32Features" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-examples-${buildid}-win32.zip" />
		<property name="productIsSDK" value="true" />
		<property name="postAssemblyTarget" value="win32ExamplesPostAssembly" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
	</ant>
	
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="exampleFeatures" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-examples-${buildid}.zip" />
		<property name="productIsSDK" value="true" />
		<property name="postAssemblyTarget" value="examplesPostAssembly" />
		<property name="workingDirectory" value="${basedir}/temp/eclipse" />
		<property name="zipRootDir" value="${basedir}/temp" />
	</ant>

	<!--Tests-->
	<ant antfile="assemble.xml" target="${target}" >
		<property name="featureTargetList" value="sdkTestsFeatures" />
		<property name="productZipName" value="${basedir}/${buildLabel}/eclipse-Automated-Tests-${buildid}.zip" />
		<property name="productIsSDK" value="true" />
		<property name="postAssemblyTarget" value="sdkTestsPostAssembly" />
		<property name="workingDirectory" value="${basedir}/temp" />
		<property name="zipRootDir" value="${basedir}/temp" />
	</ant>
	
</target>


<!-- ===================================================================== -->
<!-- Targets called before extracting binary distributables.               -->
<!-- ===================================================================== -->

<target name="linuxMotifPreAssembly">
	<!--  Copy libXm.so.2.1 from plugin to root of install and set permission -->
	<copy file="${buildDirectory}/plugins/org.eclipse.platform.linux.motif/os/linux/x86/libXm.so.2.1" todir="${workingDirectory}" />
	<chmod file="${workingDirectory}/libXm.so.2.1" perm="755"/>
	
	<antcall target="makeSymbolicLink">
		<param name="execDir" value="${workingDirectory}" />
		<param name="originalFile" value="libXm.so.2.1" />
		<param name="linkFile" value="libXm.so" />
	</antcall>
	<antcall target="makeSymbolicLink">
		<param name="execDir" value="${workingDirectory}" />
		<param name="originalFile" value="libXm.so.2.1" />
		<param name="linkFile" value="libXm.so.2" />
	</antcall>
	
</target>


<!-- ===================================================================== -->
<!-- Targets called before creating product zip file.                      -->
<!-- ===================================================================== -->

<target name="sdkAndPlatformPostAssembly">
	<!--	Copy launcher files to root of eclipse -->
	<!--the binDirectory property is the name of the directory which contains the files used to launch
		Eclipse for a given platform.
	-->
	<copy todir="${workingDirectory}">
		<fileset dir="${buildDirectory}/plugins/platform-launcher/bin/${launcherFilesDir}" includes="*"  />
	</copy>
	
	<copy todir="${workingDirectory}">
		<fileset dir="${buildDirectory}/plugins/org.eclipse.platform/" includes="cpl-v10.html,notice.html,.eclipseproduct,install.ini,startup.jar"  />
	</copy>
	
	<!--delete the startup.jar from the plugin where it is built-->
	<delete>
		<fileset dir="${workingDirectory}/plugins" includes="org.eclipse.platform_*/startup.jar" />
	</delete>
	
	<antcall target="gatherPlatformLauncherSrc" />
	
	<!-- execute default post assembly -->
	<antcall target="postAssembly" />
</target>

<target name="gatherPlatformLauncherSrc" if="productIsSDK">
	<!-- Create source zip for pltaform-launcher -->	
	<zip zipfile="${workingDirectory}/plugins/org.eclipse.platform.source_${org.eclipse.platform.version}/src/org.eclipse.platform_${org.eclipse.platform.version}/launchersrc.zip" basedir="${buildDirectory}/plugins/platform-launcher" includes="library/" />
</target>

<target name="postAssembly">
	<replace dir="${workingDirectory}" value="${timestamp}" token="@buildid@">
		<include name="**/about.mappings" />
	</replace>
	
	<mkdir dir="${workingDirectory}/readme" />
	<copy todir="${workingDirectory}/readme">
		<fileset dir="org.eclipse.releng/readmes" />
	</copy>

	<!-- set execute permission on files with the following extensions:  .so*, .sl, eclipse executable, .jnilib -->
	<chmod dir="${workingDirectory}" perm="755" includes="**/eclipse,**/*.jnilib,**/*.so*,**/*.sl"/>
</target>

<target name="macosxCarbonPostAssembly">
	<antcall target="sdkAndPlatformPostAssembly" />
	<copy todir="${workingDirectory}">
		<fileset dir="${buildDirectory}/plugins/org.eclipse.platform.macosx.carbon" includes="Eclipse.app/"  />
	</copy>
	
	<copy file="${buildDirectory}/plugins/org.eclipse.platform.macosx.carbon/legal.html" todir="${workingDirectory}" />
	
	<!--fix for #23918-->
	<antcall target="makeSymbolicLink">
		<param name="execDir" value="${workingDirectory}/Eclipse.app/Contents/Resources" />
		<param name="linkFile" value="Java" />
		<param name="originalFile" value="../../.." />
	</antcall>
	
	<!--fix for #33404, delete bogus placeholder file-->
	<delete file="${workingDirectory}/eclipse" />
		
	<chmod file="${workingDirectory}/Eclipse.app/Contents/MacOS/Eclipse" perm="755" />
	<antcall target="macosxCreateTar" />


</target>

<target name="macosxCreateTar">
	<!--The Ant task does not work as expected.  Must use exec of tar-->
	<!-- The symbolic link Eclipse.app/Contents/Resources/Java is not included if
	this command is used:
	
	<tar longfile="gnu" tarfile="${workingDirectory}/../${productTarName}" >

    	<tarfileset dir="${workingDirectory}/.." mode="755" followsymlinks="false">
		    <include name="Eclipse.app/Contents/MacOS/Eclipse" />
		    <include name="**/*.jnilib" />
		</tarfileset> 
	    <tarfileset dir="${workingDirectory}/.." followsymlinks="false"> 
		    <include name="**" />
		    <exclude name="Eclipse.app/Contents/MacOS/Eclipse"/>
		    <exclude name="**/*.jnilib" />
	   </tarfileset>
	</tar> 
	-->
	
	<exec dir="${zipRootDir}" executable="tar">
		<arg line="-cvf ${productTarName} eclipse" />
	</exec>
	
	<!--delete the eclipse directory so it is not included in the product zip file-->
	<antcall target="macosxDeleteSymbolicLink" />
	<delete dir="${workingDirectory}" />
</target>

<target name="macosxDeleteSymbolicLink" if="onUnix">
	<!--This symbolic link cannot be deleted using the Ant delete task because
		it is linked to a directory.
	-->
	<exec dir="${workingDirectory}" executable="rm">
		<arg line="Eclipse.app/Contents/Resources/Java" />
	</exec>
</target>

<target name="macosxPreClean">
	<delete file="${zipRootDir}/${productTarName}" />
	
	<!--This directory was deleted in an earlier step.  The build fails if this directory does not exist
		in the clean step.
	-->
	<mkdir dir="${workingDirectory}" />
</target>

<target name="examplesPostAssembly">
	<!--move *src.zip in plugins as peers to *.jar files-->
    <copy todir="${workingDirectory}/plugins">
    	<fileset dir="${workingDirectory}/plugins/org.eclipse.sdk.examples.source_${org.eclipse.sdk.examples.source.version}/src" />
    </copy>
   	<delete dir="${workingDirectory}/plugins/org.eclipse.sdk.examples.source_${org.eclipse.sdk.examples.source.version}" />

	<!-- Copy licence files to root of plugin -->
	<antcall target="licenseCopy">
		<param name="pluginName" value="org.eclipse.sdk.examples" />
	</antcall>
</target>

<target name="win32ExamplesPostAssembly">
	<antcall target="examplesPostAssembly"/>
	<!--move *src.zip in plugins as peers to *.jar files-->
    <copy todir="${workingDirectory}/plugins">
    	<fileset dir="${workingDirectory}/plugins/org.eclipse.sdk.examples.win32.source_${org.eclipse.sdk.examples.win32.source.version}/src" />
    </copy>
   	<delete dir="${workingDirectory}/plugins/org.eclipse.sdk.examples.win32.source_${org.eclipse.sdk.examples.win32.source.version}" />
   		<!-- Copy licence files to root of plugin -->
	<antcall target="licenseCopy">
		<param name="pluginName" value="org.eclipse.sdk.examples.win32" />
	</antcall>
</target>

<target name="licenseCopy">
	<!-- copies licenses to root of installation from specified plugin-->
	<copy todir="${workingDirectory}" overwrite="true">
		<fileset dir="${buildDirectory}/plugins/${pluginName}/" includes="cpl-v10.html,notice.html"  />
	</copy>
</target>

<target name="teamExtrasPostAssembly">
	<replace dir="${workingDirectory}" value="${timestamp}" token="@buildid@">
		<include name="**/about.mappings" />
	</replace>

	<!--copy src.zips beside jars since there is no team.extras source feature-->
    <copy todir="${workingDirectory}/plugins">
    	<fileset dir="${workingDirectory}/plugins/org.eclipse.team.extras.source_${org.eclipse.team.extras.version}/src" />
    </copy>
   	<delete dir="${workingDirectory}/plugins/org.eclipse.team.extras.source_${org.eclipse.team.extras.version}" />

	<antcall target="licenseCopy">
		<param name="pluginName" value="org.eclipse.team.extras" />
	</antcall>
</target>

<target name="jdtPostAssembly">
	<antcall target="postAssembly" />
	<antcall target="licenseCopy">
		<param name="pluginName" value="org.eclipse.jdt" />
	</antcall>
</target>

<target name="sdkTestsPostAssembly">

	<!-- Remove the plugin version number appended to the org.eclipse.test plugin directory.
   	     This is so that contributors of test.xml's do not have to update their paths to 
   	     library.xml in org.eclipse.test whenever its version is updated.
   	 -->
   	<move todir="${workingDirectory}/plugins/org.eclipse.test">
    	<fileset dir="${workingDirectory}/plugins/org.eclipse.test_${org.eclipse.test.version}" />
  	</move>
  	<!--the Ant move task leaves behind an empty directory-->
  	<delete dir="${workingDirectory}/plugins/org.eclipse.test_${org.eclipse.test.version}" includeEmptyDirs="true" />

	<!--  source zips need to be beside jars -->
   	<copy todir="${workingDirectory}/plugins">
    	<fileset dir="${workingDirectory}/plugins/org.eclipse.sdk.tests.source_${org.eclipse.sdk.tests.version}/src" />
    </copy>

	<!-- Copy licence files to root of plugin -->
	<copy todir="${workingDirectory}">
		<fileset dir="${buildDirectory}/plugins/org.eclipse.sdk.tests/" includes="cpl-v10.html,notice.html"  />
	</copy>
	
   	<delete dir="${workingDirectory}/plugins/org.eclipse.sdk.tests.source_${org.eclipse.sdk.tests.version}" />
 
	<mkdir dir="${workingDirectory}/eclipse" />
	
	<!--move plugins and features directories into the eclipse directory-->
	<move todir="${workingDirectory}/eclipse" overwrite="true" includeEmptyDirs="true">
		<fileset dir="${workingDirectory}" excludes="eclipse" />
	</move>
	
	<!-- Delete empty directories left behind by Ant move task  -->
	<delete includeEmptyDirs="true">
		<fileset dir="${workingDirectory}" includes="plugins/,features/" />
	</delete>
	
	<!-- Create zip file containing built JUnit plugin tests -->
	<exec dir="${workingDirectory}" executable="zip">
			<arg line="-r -q eclipse-junit-tests-${buildid}.zip eclipse"/>
	</exec>	
 	
 	<delete dir="${workingDirectory}/eclipse" includeEmptyDirs="true" />
 	
 	<!-- create top level testing directory and test scripts-->    
    <mkdir dir="${workingDirectory}/eclipse-testing" />
    
    <copy todir="${workingDirectory}/eclipse-testing">
     	<fileset dir="${buildDirectory}/plugins/org.eclipse.test" includes="readme.html,testframework.html,JUNIT.XSL,runtests*,test.xml" />
    </copy>
   
    <move file="${workingDirectory}/eclipse-junit-tests-${buildid}.zip" todir="${workingDirectory}/eclipse-testing"/>

    <!--generate the test.properties file containing the directory names of the test plugins-->
    <java classname="org.eclipse.releng.generators.TestVersionTracker" >
         <arg line="${buildDirectory} ${workingDirectory}/eclipse-testing/test.properties" /> 
         <classpath>
            	<pathelement path="${basedir}/plugins/org.apache.xerces_4.0.7/xercesImpl.jar:${basedir}/plugins/org.apache.xerces_4.0.7/xmlParserAPIs.jar:${basedir}/plugins/org.eclipse.build.tools/buildTools.jar" />
         </classpath>
    </java>

	<!--set execute permission on shell script-->
	<chmod file="${workingDirectory}/eclipse-testing/runtests" perm="755"/>
</target>


<!-- ===================================================================== -->
<!-- preCompile can be used to perform tasks after build scripts have been -->
<!-- generated, and before they are run.                                   -->
<!-- ===================================================================== -->

<target name="preCompile">
	<antcall target="fetchPlatformLauncher"/>
	<ant antfile="verifyFetch.xml" />
	<antcall target="buildSourceDrops" />
	<antcall target="compileSwtWin32Fragment" />
</target>

<target name="fetchPlatformLauncher">
	<ant antfile="genericTargets.xml" target="fetchElement">
		<property name="type" value="plugin" />
		<property name="id" value="platform-launcher" />
	</ant>
</target>

<target name="compileSwtWin32Fragment">
<!-- Due to compile dependencies on the win32 swt.jar in plugins in org.eclipse.platform-feature,
	it is compiled before calling the build.xml for org.eclipse.platform-feature.
 -->
	<ant antfile="genericTargets.xml" target="compilePlugin">
		<property name="pluginPath" value="${buildDirectory}/plugins/org.eclipse.swt.win32" />
	</ant>
</target>

<target name="buildSourceDrops" description="Creating source drops...">

	<property name="tempDir" value="temp" />

	<mkdir dir="${buildLabel}" />
	<mkdir dir="${tempDir}/buildScripts" />
	
	<copy todir="${tempDir}">
		<fileset dir="srcFetchBuild" />
	</copy>
	
	<copy file="label.properties" todir="${tempDir}" />
	
	<copy file="srcFetchBuild/instructions.html" tofile="${buildLabel}/srcFetchBuildInstructions.html" />

	<!--  set correct permissions on linux script -->
	<chmod file="${tempDir}/build" perm="755" />
	
	<copy todir="${tempDir}/buildScripts">
		<fileset dir="${buildDirectory}" includes="features/*/build.xml,plugins/*/build.xml,fetch_*.xml" excludes="features/*test*/,features/*example*/,plugins/*test*/,plugins/*example*/" />
	</copy>
	
	<!-- create drop containing the fetch scripts, no source -->
	<exec dir="${tempDir}" executable="zip">
		<arg line="-q ${basedir}/${buildLabel}/eclipse-sourceBuild-srcFetch-${buildid}.zip -r ." />
	</exec>
	
	<!--  create zip with all source for an Eclipse SDK  -->
	<copy todir="${tempDir}/buildScripts">
		<fileset dir="${buildDirectory}" includes="features/,plugins/" excludes="features/*test*/,features/*example*/,plugins/*test*/,plugins/*example*/" />
	</copy>
	<copy todir="${tempDir}/buildScripts" overwrite="true">
		<fileset dir="srcInclBuild" />
	</copy>
	<copy file="srcInclBuild/instructions.html" tofile="${buildLabel}/srcIncludedBuildInstructions.html" />

	<!-- fetch scripts are not when source already included in zip file -->
	<delete>
		<fileset dir="${tempDir}/buildScripts" includes="fetch*.xml" />
	</delete>
	
	<!--  set correct permissions on linux script -->
	<chmod file="${tempDir}/buildScripts/build" perm="755" />
	<exec dir="${tempDir}/buildScripts" executable="zip">
		<arg line="-q ${basedir}/${buildLabel}/eclipse-sourceBuild-srcIncluded-${buildid}.zip -r ." />
	</exec>

	<delete dir="${tempDir}/" />
</target>

<!-- ============================================================================= -->
<!-- postCompile can be used to perform tasks after java source has been compiled. -->
<!-- ============================================================================= -->

<target name="postCompile">
	<ant antfile="verifyCompile.xml" />
	<ant antfile="${buildDirectory}/plugins/org.eclipse.swt.win32/build.xml" target="swtdownload" dir="${buildDirectory}/plugins/org.eclipse.swt.win32" />
</target>



<!-- ===================================================================== -->
<!-- Targets related to publishing the build.  These targets are typically -->
<!-- called from the org.eclipse.releng.basebuilder/publish.xml            -->
<!-- ===================================================================== -->

<target name="postBuild" description="Preparing to post the build...">
<!-- required -->
	<!--post clickThroughs-->
	<copy todir="${buildLabel}">
		<fileset dir="org.eclipse.releng" includes="clickThroughs/" />
	</copy>
	
	<!--post directory.txt-->
 	<copy file="directory.txt" todir="${buildLabel}" />	
 
 	<!--post instructions on automated testing-->
	<copy file="${buildDirectory}/plugins/org.eclipse.test/readme.html" tofile="${buildLabel}/automatedtesting.html" />
	<copy file="${buildDirectory}/plugins/org.eclipse.test/testframework.html" tofile="${buildLabel}/testframework.html" />

 	<ant antfile="publish.xml" target="countFiles" />
	<antcall target="generateEclipseIndex" />
 	<ant antfile="publish.xml" target="getStaticFiles" />
	<antcall target="generateMD5Checksum" />
  	<ant antfile="publish.xml" target="copyBuild" />
 	 	
</target>

<!-- ===================================================================== -->
<!-- Target used to test the build                                         -->
<!-- ===================================================================== -->

<target name="test">

	<echo message="Starting tests." />
	<ant antfile="customTest.xml" />
	<antcall target="generateEclipseIndex" />

	<!--copy the test results and new index page to the posting location-->
	<copy todir="${postingDirectory}/${buildLabel}" overwrite="true">
		<fileset dir="${buildLabel}" includes="testresults/**,*.php" />
	</copy>
</target>

<!-- ===================================================================== -->
<!-- Helper targets                                                        -->
<!-- ===================================================================== -->
<target name="makeSymbolicLink" if="onUnix">
<!--create symbolic links if on a Unix System-->
	<exec dir="${execDir}" executable="ln">
		<arg line="-s ${originalFile} ${linkFile}"/>
	</exec>
</target>

<target name="generateEclipseIndex">
	<available classname="org.eclipse.releng.generators.EclipseTestResultsGenerator" property="class" value="org.eclipse.releng.generators.EclipseTestResultsGenerator" />
	<property name="class" value="org.eclipse.releng.generators.TestResultsGenerator" />

	<!--regenerate the index page with links to test results-->
	<ant antfile="publish.xml" target="generateIndex">
 		<property name="useNewFormat" value="true" />
		<property name="isBuildTested" value="true" />
		<property name="dropTokenList" value="%sdk%,%tests%,%example%,%runtime%,%jdt%,%teamextras%" />
		<property name="class" value="${class}" />
	</ant>
	
 	<!--  Insert ftp url for drop directory  -->
	<replace file="${buildLabel}/index.php" token="@buildlabel@" value="${buildLabel}"/>

</target>

<target name="mail" unless="noMail">
<!-- helper target for sending email messages related to build. -->
	<mail mailhost="${host}" from="${sender}"
      		tolist="${recipients}"
      		subject="[eclipse-build] ${buildid} (Timestamp: ${timestamp}): ${subject}"
      		message="${message}"
      		failonerror="false"
	/>
</target>

<target name="generateMD5Checksum">
	<!--use attached script instead of Ant checksum so that files formatted properly
		for command md5sum -c filename.md5
	-->
	<exec dir="${buildLabel}" executable="sh" os="Linux">
		<arg line="${basedir}/produceChecksum" />
	</exec>
	
	<mkdir dir="${buildLabel}/checksum" />
	
	<move todir="${buildLabel}/checksum">
		<fileset dir="${buildLabel}">
			<include name="*.md5" />
		</fileset>
	</move>
	
</target>

<!-- ===================================================================== -->
<!-- Target with intentional empty implementation.                         -->
<!-- Designed to be called in assembly phase when the following properties -->
<!-- have not been set:  preAssemblyTarget, postAssemblyTarget, preClean   -->
<!-- ===================================================================== -->
<target name="noop" />

<!-- ===================================================================== -->
<!-- Default target                                                        -->
<!-- ===================================================================== -->

<target name="noDefault">
	<echo message="You must specify a target when invoking this file" />
</target>

</project>
