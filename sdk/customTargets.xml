<project name="Build specific targets and properties" default="noDefault" >


	<property name="postingDirectory" value="${buildDirectory}" />

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- ===================================================================== -->

	<!-- ****** figure out how to build the platform, sdk, examples, ... from one compile"
see the sdkFeatures, platformFeatures, ... targets in the orginal customTargets  -->
	<target name="allElements">
		<ant antfile="${genericTargets}" target="${target}" >
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.sdk" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Targets to assemble the built elements for particular configurations  -->
	<!-- ===================================================================== -->

	<!-- this section is unfinished************** -->
	<target name="assemble.org.eclipse.sdk.win32.win32.x86">
		<property name="archiveName" value="eclipse-SDK-${buildId}-win32.zip"/>
		<antcall target="assemble" />
		<ant antfile="${builderDirectory}/tools/build.xml">
		</ant>
	</target>

	<target name="assemble.org.eclipse.sdk.linux.motif.x86">
		<property name="archiveName" value="eclipse-SDK-${buildId}-linux-motif.tar.gz"/>
		<antcall target="assemble" />
	</target>

	<target name="assemble.org.eclipse.sdk.macosx.carbon.ppc">
		<property name="archiveName" value="eclipse-SDK-${buildId}-macosx-carbon.tar.gz"/>
		<antcall target="assemble" />
	</target>

	<target name="assemble.org.eclipse.sdk.linux.gtk.x86">
		<property name="archiveName" value="eclipse-SDK-${buildId}-linux-gtk.tar.gz"/>
		<antcall target="assemble" />
	</target>

	<target name="assemble.org.eclipse.sdk.linux.gtk.amd64">
		<property name="archiveName" value="eclipse-SDK-${buildId}-linux-gtk-amd64.tar.gz"/>
		<antcall target="assemble" />
	</target>

	<target name="assemble.org.eclipse.sdk.linux.gtk.ia64">
		<condition property="skip.assembly">
			<not>
				<equals arg1="${configs}" arg2="linux,gtk,ia64" />
			</not>
		</condition>
		<antcall target="compilelibs">
			<param name="ws" value="gtk" />
			<param name="os" value="linux" />
			<param name="arch" value="ia64"/>
		</antcall>
		<property name="archiveName" value="eclipse-SDK-${buildId}-linux-gtk-ia64.tar.gz"/>
		<antcall target="assemble" />
	</target>

	<target name="assemble.org.eclipse.sdk.solaris.motif.sparc">
		<property name="archiveName" value="eclipse-SDK-${buildId}-solaris-motif.tar.gz"/>
		<antcall target="assemble" />
	</target>

	<target name="assemble.org.eclipse.sdk.solaris.gtk.sparc">
		<property name="archiveName" value="eclipse-SDK-${buildId}-solaris-gtk.tar.gz"/>
		<antcall target="assemble" />
	</target>

	<target name="assemble.org.eclipse.sdk.hpux.motif.PA_RISC">
		<property name="archiveName" value="eclipse-SDK-${buildId}-hpux-motif.tar.gz"/>
		<antcall target="assemble" />
	</target>

	<target name="assemble.org.eclipse.sdk.qnx.photon.x86" />
	<target name="assemble.org.eclipse.sdk.hpux.motif.ia64"/>
	<target name="assemble.org.eclipse.sdk.linux.gtk.ppc64"/>
	<target name="assemble.org.eclipse.sdk.linux.gtk.ppc"/>

	<target name="assemble.org.eclipse.sdk.aix.motif.ppc">
		<property name="archiveName" value="eclipse-SDK-${buildId}-aix-motif.tar.gz"/>
		<antcall target="assemble" />
	</target>

	<target name="assemble" unless="skip.assembly">
		<mkdir dir="${postingDirectory}/${buildLabel}/checksum" />
		<property name="archiveFullPath" value="${postingDirectory}/${buildLabel}/${archiveName}" />
		<ant antfile="${assembleScriptName}" />
		<checksum file="${archiveFullPath}" property="md5"/>
		<echo message="${md5} *${archiveName}" file="${postingDirectory}/${buildLabel}/checksum/${archiveName}.md5"/>
	</target>


	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for cvsRoot, package and mapVersionTag as desired. -->
	<!-- ===================================================================== -->
	<target name="checkLocal">
		<available property="mapsLocal" file="${buildDirectory}/maps/org.eclipse.releng" />
	</target>

	<target name="getMapFiles" depends="checkLocal" unless="mapsLocal">

		<!-- ***  change the repo info -->
		<property name="mapCvsRoot" value=":pserver:anonymous@dev.eclipse.org:/home/eclipse" />
		<property name="mapVersionTag" value="HEAD" />
		<cvs cvsRoot="${mapCvsRoot}"
		package="org.eclipse.releng"
		dest="${buildDirectory}/maps"
		tag="${mapVersionTag}"
	/>
		<!--compare the map files project-->
		<antcall target="compareMapFiles" />
		<!--tag the map files project-->
		<antcall target="tagMapFiles" />
	</target>

	<target name="compareMapFiles" if="compareMaps">
		<property file="${mapTag.properties}"/>
		<property name="cvsDiffFile" value="${buildDirectory}/cvsDiff.txt" />
		<cvs cvsRoot="${mapCvsRoot}" dest="${buildDirectory}/maps" command="diff -w -r ${lastMapTag}" output="${cvsDiffFile}" />
		<modifiedMaps mapDiffFile="${cvsDiffFile}" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<!-- Stores tag on the filesystem so map files can be compared -->
		<echo file="${mapTag.properties}">
		lastMapTag=v${timestamp}
	</echo>
		<cvs dest="${buildDirectory}/maps/org.eclipse.releng" command="tag v${timestamp}" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>


	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup" >
		<!--fetch projects required to build swt gtk64-->
		<property name="featureOnly" value="false"/>
		<property name="featureAndPlugins" value="true"/>
		<property name="featuresRecursively" value="false"/>
		<ant antfile="genericTargets.xml" dir="${pde.build.scripts}" target="fetchElement">
			<property name="type" value="fragment" />
			<property name="id" value="org.eclipse.swt.gtk64" />
		</ant>
		<ant antfile="genericTargets.xml" dir="${pde.build.scripts}" target="fetchElement">
			<property name="type" value="fragment" />
			<property name="id" value="org.eclipse.swt.win32" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the fetch -->
	<!-- ===================================================================== -->
	<target name="postFetch">
		<ant antfile="${genericTargets}" target="fetchElement">
			<property name="type" value="feature" />
			<property name="id" value="org.eclipse.launchers" />
		</ant>
		<zip zipfile="${buildDirectory}/plugins/org.eclipse.platform/launchersrc.zip" basedir="${buildDirectory}/features/org.eclipse.launchers" includes="library/" />

		<!--fetch and compile swt tools-->
		<ant antfile="genericTargets.xml" dir="${pde.build.scripts}" target="fetchElement">
			<property name="type" value="plugin" />
			<property name="id" value="org.eclipse.swt.tools" />
		</ant>
		<ant antfile="genericTargets.xml" dir="${pde.build.scripts}" target="generateScript">
			<property name="type" value="plugin" />
			<property name="id" value="org.eclipse.swt.tools" />
		</ant>
		<ant antfile="build.xml" dir="${buildDirectory}/plugins/org.eclipse.swt.gtk64" target="build.jars">
			<property name="type" value="plugin" />
			<property name="id" value="org.eclipse.swt.gtk64" />
		</ant>
		<ant antfile="build.xml" dir="${buildDirectory}/plugins/org.eclipse.swt.tools" target="build.jars">
			<property name="baseos" value="linux" />
			<property name="basews" value="gtk" />
			<property name="basearch" value="ia64" />
		</ant>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating build scripts -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before assembling -->
	<!-- ===================================================================== -->
	<target name="preAssemble">

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after assembling-->
	<!-- ===================================================================== -->
	<target name="postAssemble">
		<!--copy javadoc logs to posting directory-->
		<copy file="${buildDirectory}/plugins/org.eclipse.platform.doc.isv/doc.bin.log" tofile="${postingDirectory}/${buildLabel}/compilelogs/platform.doc.isv.javadoc.txt" failonerror="false"/>
		<copy file="${buildDirectory}/plugins/org.eclipse.jdt.doc.isv/doc.bin.log" tofile="${postingDirectory}/${buildLabel}/compilelogs/jdt.doc.isv.javadoc.txt" failonerror="false"/>
		<copy file="${buildDirectory}/plugins/org.eclipse.pde.doc.user/doc.bin.log" tofile="${postingDirectory}/${buildLabel}/compilelogs/pde.doc.user.javadoc.txt" failonerror="false"/>
		<copy file="${buildDirectory}/plugins/org.eclipse.platform.doc.isv/platformconvert.txt" tofile="${postingDirectory}/${buildLabel}/compilelogs/platform.doc.isv.schema.txt" failonerror="false"/>
		<copy file="${buildDirectory}/plugins/org.eclipse.jdt.doc.isv/jdtconvert.txt" tofile="${postingDirectory}/${buildLabel}/compilelogs/jdt.doc.isv.schema.txt" failonerror="false"/>
		<copy file="${buildDirectory}/plugins/org.eclipse.pde.doc.user/pdeconvert.txt" tofile="${postingDirectory}/${buildLabel}/compilelogs/pde.doc.user.schema.txt" failonerror="false"/>
	</target>


	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
		<replace dir="${buildDirectory}/plugins" value="${buildId}" token="@build@">
			<include name="**/about.mappings" />
		</replace>
		<replace dir="${buildDirectory}/features/org.eclipse.platform" value="${buildId}" token="@build@">
			<include name="**/config.ini" />
		</replace>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
		<condition property="logsAvailable">
			<istrue value="${javacVerbose}"/>
		</condition>
		<antcall target="gatherLogs" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after everything is built and assembled -->
	<!-- (e.g., testing, posting, emailing, ...) -->
	<!-- ===================================================================== -->
	<target name="postBuild">
	</target>

	<!-- ===================================================================== -->
	<!-- Helper targets -->
	<!-- ===================================================================== -->
	<target name="gatherLogs" if="logsAvailable">

		<mkdir dir="${postingDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${postingDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features/org.eclipse.sdk">
				<include name="*.log.zip" />
			</fileset>
		</unzip>
	</target>
	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>
	<target name="compilelibs" unless="skip.assembly">
		<property name="swtlibs" value="${buildDirectory}/swttmp"/>
		<mkdir dir="${swtlibs}"/>
		<condition property="wsType" value="gtk64">
			<or>
				<equals arg1="${os}-${ws}-${arch}"
                               arg2="linux-gtk-ppc64"/>
				<equals arg1="${os}-${ws}-${arch}"
                               arg2="linux-gtk-ia64"/>
				<equals arg1="${os}-${ws}-${arch}"
                               arg2="linux-gtk-amd64"/>
			</or>
		</condition>
		<condition property="wsType" value="gtk">
			<or>
				<equals arg1="${os}-${ws}-${arch}"
                           arg2="linux-gtk-ppc"/>
				<equals arg1="${os}-${ws}-${arch}"
                           arg2="linux-gtk-x86"/>
			</or>
		</condition>
		<condition property="wsType" value="motif">
			<or>
				<equals arg1="${os}-${ws}-${arch}"
                           arg2="linux-motif-x86"/>
				<equals arg1="${os}-${ws}-${arch}"
                           arg2="hpux-motif-ia64"/>
			</or>
		</condition>

		<!-- unzip swt zips -->
		<unzip  dest="${swtlibs}">
			<fileset dir="${buildDirectory}/plugins/org.eclipse.platform.source.${os}.${ws}.${arch}/src/">
				<include name ="org.eclipse.swt.${wsType}_*/ws/${ws}/**/*.zip"/>
			</fileset>
		</unzip>
		<exec dir="${swtlibs}/" executable="sh" failonerror="true">
			<arg line="build.sh"/>
		</exec>
		<property name="swtdir" value="${buildDirectory}/plugins/org.eclipse.swt.${wsType}/os/${os}/${arch}"/>
		<delete dir="${swtdir}"/>
		<mkdir dir="${swtdir}"/>
		<move todir="${swtdir}/">
			<fileset dir="${swtlibs}">
				<include name="**/*.so"/>
			</fileset>
		</move>

		<!--compile launcher -->
		<property name="launcherlibs" value="${buildDirectory}/launchertmp"/>
		<delete dir="${launcherlibs}"/>
		<exec dir="${buildDirectory}/features/org.eclipse.launchers/library/${ws}/" executable="sh" os="Linux" failonerror="true">
			<arg line="build.sh"/>
		</exec>
		<move file="${buildDirectory}/features/org.eclipse.launchers/library/${ws}/eclipse" todir="${launcherlibs}/">
		</move>
	</target>
	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>


</project>
