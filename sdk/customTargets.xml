<project name="Build specific targets and properties" default="noDefault" >


<property name="postingDirectory" value="${buildDirectory}" />
	
<!-- ===================================================================== -->
<!-- Run a given ${target} on all elements being built -->
<!-- ===================================================================== -->

<!-- ****** figure out how to build the platform, sdk, examples, ... from one compile"
see the sdkFeatures, platformFeatures, ... targets in the orginal customTargets  -->
<target name="allElements">
	<ant antfile="${genericTargets}" target="${target}" >
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.sdk" />
	</ant>
</target>

<!-- ===================================================================== -->
<!-- Targets to assemble the built elements for particular configurations  -->
<!-- ===================================================================== -->

<!-- this section is unfinished************** -->
<target name="assemble.org.eclipse.sdk.win32.win32.x86">
	<property name="archiveName" value="eclipse-SDK-${buildId}-win32.zip"/>		
	<antcall target="assemble" />
	<ant antfile="${builderDirectory}/tools/build.xml">
	</ant>
</target>

<target name="assemble.org.eclipse.sdk.linux.motif.x86">
	<property name="archiveName" value="eclipse-SDK-${buildId}-linux-motif.tar.gz"/>
	<antcall target="assemble" />
</target>

<target name="assemble.org.eclipse.sdk.macosx.carbon.ppc">
	<property name="archiveName" value="eclipse-SDK-${buildId}-macosx-carbon.tar.gz"/>
	<antcall target="assemble" />
</target>

<target name="assemble.org.eclipse.sdk.linux.gtk.x86">
	<property name="archiveName" value="eclipse-SDK-${buildId}-linux-gtk.tar.gz"/>
	<antcall target="assemble" />
</target>

<target name="assemble.org.eclipse.sdk.linux.gtk.x86_64">
	<property name="archiveName" value="eclipse-SDK-${buildId}-linux-gtk-x86_64.tar.gz"/>
	<antcall target="assemble" />
</target>
	
<target name="assemble.org.eclipse.sdk.linux.gtk.ppc">
		<property name="archiveName" value="eclipse-SDK-${buildId}-linux-gtk-ppc.tar.gz"/>
		<antcall target="assemble" />
</target>
	
<target name="assemble.org.eclipse.sdk.solaris.motif.sparc">
	<property name="archiveName" value="eclipse-SDK-${buildId}-solaris-motif.zip"/>
	<antcall target="assemble" />
</target>

<target name="assemble.org.eclipse.sdk.solaris.gtk.sparc">
	<property name="archiveName" value="eclipse-SDK-${buildId}-solaris-gtk.zip"/>	
	<antcall target="assemble" />
</target>
	
<target name="assemble.org.eclipse.sdk.hpux.motif.PA_RISC">
	<property name="archiveName" value="eclipse-SDK-${buildId}-hpux-motif.zip"/>	
	<antcall target="assemble" />
</target>

<target name="assemble.org.eclipse.sdk.qnx.photon.x86">
	<!--do not assemble this drop for now-->
	<!--ant antfile="${assembleScriptName}">
		<property name="archiveName" value="eclipse-SDK-${buildId}-qnx-photon.zip"/>
	</ant-->
</target>

<target name="assemble.org.eclipse.sdk.hpux.motif.ia64" />
<target name="assemble.org.eclipse.sdk.linux.gtk.ppc64" />

<target name="assemble.org.eclipse.sdk.aix.motif.ppc">
	<property name="archiveName" value="eclipse-SDK-${buildId}-aix-motif.zip"/>	
	<antcall target="assemble" />
</target>

<target name="assemble">
	<mkdir dir="${postingDirectory}/${buildLabel}/checksum" />
	<property name="archiveFullPath" value="${postingDirectory}/${buildLabel}/${archiveName}" />
	<ant antfile="${assembleScriptName}" />
	<checksum file="${archiveFullPath}" property="md5"/>
	<echo message="${md5} *${archiveName}" file="${postingDirectory}/${buildLabel}/checksum/${archiveName}.md5"/>
</target>

	
<!-- ===================================================================== -->
<!-- Check out map files from correct repository -->
<!-- Replace values for cvsRoot, package and mapVersionTag as desired. -->
<!-- ===================================================================== -->
<target name="checkLocal">
	<available property="mapsLocal" file="${buildDirectory}/maps/org.eclipse.releng" />
</target>

<target name="getMapFiles" depends="checkLocal" unless="mapsLocal">

	<!-- ***  change the repo info -->
	<property name="mapCvsRoot" value=":pserver:anonymous@dev.eclipse.org:/home/eclipse" />
	<property name="mapVersionTag" value="HEAD" />
	<cvs cvsRoot="${mapCvsRoot}"
		package="org.eclipse.releng"
		dest="${buildDirectory}/maps"
		tag="${mapVersionTag}"
	/>
	<!--compare the map files project-->
	<antcall target="compareMapFiles" />
	<!--tag the map files project-->
	<antcall target="tagMapFiles" />
</target>

<target name="compareMapFiles" if="compareMaps">
<property file="${mapTag.properties}"/>
	 <property name="cvsDiffFile" value="${buildDirectory}/cvsDiff.txt" />
     <cvs cvsRoot="${mapCvsRoot}" dest="${buildDirectory}/maps" command="diff -w -r ${lastMapTag}" output="${cvsDiffFile}" />
     <modifiedMaps mapDiffFile="${cvsDiffFile}" />
</target>

<target name="tagMapFiles" if="tagMaps">
    <!-- Stores tag on the filesystem so map files can be compared -->
	<echo file="${mapTag.properties}">
		lastMapTag=${buildId}
	</echo>
	<cvs dest="${buildDirectory}/maps/org.eclipse.releng" command="tag ${buildId}" />
</target>

<!-- ===================================================================== -->
<!-- Steps to do before setup -->
<!-- ===================================================================== -->
<target name="preSetup">
</target>

	

<!-- ===================================================================== -->
<!-- Steps to do after setup but before starting the build proper -->
<!-- ===================================================================== -->
<target name="postSetup" >
<!--fetch projects required to build swt gtk64-->
	<property name="featureOnly" value="false"/>
	<property name="featureAndPlugins" value="true"/>
	<property name="featuresRecursively" value="false"/>
	<ant antfile="genericTargets.xml" dir="${pde.build.scripts}" target="fetchElement">
		<property name="type" value="fragment" />
		<property name="id" value="org.eclipse.swt.gtk.linux.x86_64" />
	</ant>
	<ant antfile="genericTargets.xml" dir="${pde.build.scripts}" target="fetchElement">
		<property name="type" value="fragment" />
		<property name="id" value="org.eclipse.swt.win32.win32.x86" />
	</ant>
</target>

<!-- ===================================================================== -->
<!-- Steps to do before fetching the build elements -->
<!-- ===================================================================== -->
<target name="preFetch">
</target>

<!-- ===================================================================== -->
<!-- Steps to do after the fetch -->
<!-- ===================================================================== -->
<target name="postFetch">
	<ant antfile="${genericTargets}" target="fetchElement">
		<property name="type" value="feature" />
		<property name="id" value="org.eclipse.platform.launchers" />
	</ant>
	<zip zipfile="${buildDirectory}/plugins/org.eclipse.platform/launchersrc.zip" basedir="${buildDirectory}/features/org.eclipse.platform.launchers" includes="library/" />

		<!--fetch and compile swt tools-->
	<ant antfile="genericTargets.xml" dir="${pde.build.scripts}" target="fetchElement">
		<property name="type" value="plugin" />
		<property name="id" value="org.eclipse.swt.tools" />
	</ant>
	<ant antfile="genericTargets.xml" dir="${pde.build.scripts}" target="generateScript">
		<property name="type" value="plugin" />
		<property name="id" value="org.eclipse.swt.tools" />
	</ant>
	<ant antfile="build.xml" dir="${buildDirectory}/plugins/org.eclipse.swt.win32.win32.x86" target="build.jars">
		<property name="type" value="plugin" />
		<property name="id" value="org.eclipse.swt.win32.win32.x86" />
	</ant>
	<ant antfile="build.xml" dir="${buildDirectory}/plugins/org.eclipse.swt.tools" target="build.jars">
		<property name="type" value="plugin" />
		<property name="id" value="org.eclipse.swt.tools" />
		<property name="baseos" value="win32" />
		<property name="basews" value="win32" />
		<property name="basearch" value="x86" />
	</ant>

	<!--place linux motif about.html in temp location where it will be copied into root of eclipse at assembly time-->
	<property name="linux.motif.rootfiles" value="${buildDirectory}/features/org.eclipse.platform/linux.motif" />
	<mkdir dir="${linux.motif.rootfiles}" />
	<copy tofile="${linux.motif.rootfiles}/about.html" file="${buildDirectory}/plugins/org.eclipse.swt.motif.linux.x86/about_open_motif.html" failonerror="false"/>
	<copy todir="${linux.motif.rootfiles}">
		<fileset dir="${buildDirectory}/plugins/org.eclipse.swt.motif.linux.x86">
			<include name="about_files/**"/>
		</fileset>
	</copy>

</target>	

<!-- ===================================================================== -->
<!-- Steps to do before generating build scripts -->
<!-- ===================================================================== -->
<target name="preGenerate">
</target>

<!-- ===================================================================== -->
<!-- Steps to do after generating the build scripts -->
<!-- ===================================================================== -->
<target name="postGenerate">
	<antcall target="clean" />
	<antcall target="buildSourceDrops" />
</target>

<!-- ===================================================================== -->
<!-- Steps to do before assembling -->
<!-- ===================================================================== -->
<target name="preAssemble">

</target>

<!-- ===================================================================== -->
<!-- Steps to do after assembling-->
<!-- ===================================================================== -->
<target name="postAssemble">
	<!--copy javadoc logs to posting directory-->
	<copy file="${buildDirectory}/plugins/org.eclipse.platform.doc.isv/doc.bin.log" tofile="${postingDirectory}/${buildLabel}/compilelogs/platform.doc.isv.javadoc.txt" failonerror="false"/>
	<copy file="${buildDirectory}/plugins/org.eclipse.jdt.doc.isv/doc.bin.log" tofile="${postingDirectory}/${buildLabel}/compilelogs/jdt.doc.isv.javadoc.txt" failonerror="false"/>
	<copy file="${buildDirectory}/plugins/org.eclipse.pde.doc.user/doc.bin.log" tofile="${postingDirectory}/${buildLabel}/compilelogs/pde.doc.user.javadoc.txt" failonerror="false"/>
	<copy file="${buildDirectory}/plugins/org.eclipse.platform.doc.isv/platformconvert.txt" tofile="${postingDirectory}/${buildLabel}/compilelogs/platform.doc.isv.schema.txt" failonerror="false"/>
	<copy file="${buildDirectory}/plugins/org.eclipse.jdt.doc.isv/jdtconvert.txt" tofile="${postingDirectory}/${buildLabel}/compilelogs/jdt.doc.isv.schema.txt" failonerror="false"/>
	<copy file="${buildDirectory}/plugins/org.eclipse.pde.doc.user/pdeconvert.txt" tofile="${postingDirectory}/${buildLabel}/compilelogs/pde.doc.user.schema.txt" failonerror="false"/>
</target>


<!-- ===================================================================== -->
<!-- Steps to do before running the build.xmls for the elements being built. -->
<!-- ===================================================================== -->
<target name="preProcess">
	<replace dir="${buildDirectory}/plugins" value="${buildId}" token="@build@">
		<include name="**/about.mappings" />
	</replace>
	<replace dir="${buildDirectory}/features/org.eclipse.platform" value="${buildId}" token="@build@">
		<include name="**/config.ini" />
	</replace>
</target>

<!-- ===================================================================== -->
<!-- Steps to do after running the build.xmls for the elements being built. -->
<!-- ===================================================================== -->
<target name="postProcess">
	<condition property="logsAvailable">
		<istrue value="${javacVerbose}"/> 
	</condition>
	<antcall target="gatherLogs" />
</target>

<!-- ===================================================================== -->
<!-- Steps to do after everything is built and assembled -->
<!-- (e.g., testing, posting, emailing, ...) -->
<!-- ===================================================================== -->
<target name="postBuild">
</target>

<!-- ===================================================================== -->
<!-- Helper targets -->
<!-- ===================================================================== -->
<target name="gatherLogs" if="logsAvailable">

	<mkdir dir="${postingDirectory}/${buildLabel}/compilelogs" />
	<antcall target="allElements">
		<param name="target" value="gatherLogs" />
	</antcall>
	<unzip dest="${postingDirectory}/${buildLabel}/compilelogs" overwrite="true">
		<fileset dir="${buildDirectory}/features/org.eclipse.sdk">
			<include name="*.log.zip" />
		</fileset>
	</unzip>
</target>

<target name="clean" unless="noclean">
	<antcall target="allElements">
		<param name="target" value="cleanElement" />
	</antcall>	
</target>

<!-- ===================================================================== -->
		<!-- Targets called before extracting binary distributables.               -->
		<!-- ===================================================================== -->
		<target name="buildSourceDrops">
			<mkdir dir="${postingDirectory}/${buildLabel}" />
			<mkdir dir="${postingDirectory}/${buildLabel}/checksum" />
			<property name="tempDir" value="${basedir}/temp" />
			<mkdir dir="${tempDir}/buildScripts" />

			<copy file="${buildDirectory}/label.properties" todir="${tempDir}/buildScripts" />		

			<copy todir="${tempDir}/buildScripts" flatten="true" overwrite="true">
				<fileset dir="${eclipse.build.scripts}/sdk/srcBuild" excludes="incl,fetch/**,jdtcoresrc/**" />
			</copy>
			<mkdir dir="${tempDir}/buildScripts/jdtcoresrc"/>
			<copy todir="${tempDir}/buildScripts/jdtcoresrc">
				<fileset dir="${eclipse.build.scripts}/sdk/srcBuild/jdtcoresrc"/>
			</copy>

			<!--  set correct permissions on linux script -->
			<chmod file="${tempDir}/buildScripts/build" perm="755" />

			<!--copy example doc and generate extension-point doc-->
			<ant antfile="buildDoc.xml" target="convertSchemaToHtml" dir="${buildDirectory}/plugins/org.eclipse.platform.doc.isv"/>
			<ant antfile="buildDoc.xml" target="examplesDocCopy" dir="${buildDirectory}/plugins/org.eclipse.platform.doc.isv"/>
			<ant antfile="buildDoc.xml" target="convertSchemaToHtml" dir="${buildDirectory}/plugins/org.eclipse.jdt.doc.isv"/>
			<ant antfile="buildDoc.xml" target="examplesDocCopy" dir="${buildDirectory}/plugins/org.eclipse.jdt.doc.isv"/>
			<ant antfile="buildDoc.xml" target="convertSchemaToHtml" dir="${buildDirectory}/plugins/org.eclipse.pde.doc.user"/>
			
			<!--copy help indexes -->
			<ant antfile="build.xml" target="build.index" dir="${buildDirectory}/plugins/org.eclipse.platform.doc.isv"/>
			<ant antfile="build.xml" target="build.index" dir="${buildDirectory}/plugins/org.eclipse.platform.doc.isv"/>
			<ant antfile="build.xml" target="build.index" dir="${buildDirectory}/plugins/org.eclipse.jdt.doc.isv"/>
			<ant antfile="build.xml" target="build.index" dir="${buildDirectory}/plugins/org.eclipse.jdt.doc.isv"/>
			<ant antfile="build.xml" target="build.index" dir="${buildDirectory}/plugins/org.eclipse.pde.doc.user"/>			

			<copy todir="${tempDir}/buildScripts">
				<fileset dir="${buildDirectory}" excludes="features/*example*/**,plugins/*example*/**" includes="features/*/build.xml,features/*.source*/**,plugins/*/build.xml,plugins/*.source*/**,fetch_*.xml,assemble*.xml,plugins/org.eclipse.swt.tools/**,plugins/*doc*/**" />
			</copy>
			<!--ensure linux drops are created as .tar.gz files -->
		    <replace dir="${tempDir}/buildScripts" includes="assemble*" excludes="*win32*,*hpux*,*solaris*,*aix*" token=".zip" value=".tar.gz"/>
			
			<!-- create drop containing the fetch scripts, no source -->
			<exec dir="${tempDir}" executable="zip">
				<arg line="-q ${postingDirectory}/${buildLabel}/eclipse-sourceBuild-srcFetch-${buildId}.zip -r ." />
			</exec>

			<!--generate md5-->
			<checksum file="${postingDirectory}/${buildLabel}/eclipse-sourceBuild-srcFetch-${buildId}.zip" property="md5"/>
			<echo message="${md5} *eclipse-sourceBuild-srcFetch-${buildId}.zip" file="${postingDirectory}/${buildLabel}/checksum/eclipse-sourceBuild-srcFetch-${buildId}.zip.md5"/>

			<!--  create zip with all source for an Eclipse SDK  -->
			<copy todir="${tempDir}/buildScripts">
				<fileset dir="${buildDirectory}" includes="features/,plugins/" excludes="features/*example*/**,plugins/*example*/**" />
			</copy>
			<copy todir="${tempDir}/buildScripts" flatten="true" overwrite="true">
				<fileset dir="${eclipse.build.scripts}/sdk/srcBuild" excludes="fetch/**,incl,jdtcoresrc/**" />
			</copy>

			<!-- fetch scripts are not when source already included in zip file -->
			<delete>
				<fileset dir="${tempDir}/buildScripts" includes="fetch*.xml" />
			</delete>

			<!--  set correct permissions on linux script -->
			<chmod file="${tempDir}/buildScripts/build" perm="755" />
			<exec dir="${tempDir}/buildScripts" executable="zip">
				<arg line="-q ${postingDirectory}/${buildLabel}/eclipse-sourceBuild-srcIncluded-${buildId}.zip -r ." />
			</exec>
			<checksum file="${postingDirectory}/${buildLabel}/eclipse-sourceBuild-srcIncluded-${buildId}.zip" property="md5.2"/>
			<echo message="${md5.2} *eclipse-sourceBuild-srcIncluded-${buildId}.zip" file="${postingDirectory}/${buildLabel}/checksum/eclipse-sourceBuild-srcIncluded-${buildId}.zip.md5"/>

			<copy file="${eclipse.build.scripts}/sdk/srcBuild/incl/instructions.html" tofile="${postingDirectory}/${buildLabel}/srcIncludedBuildInstructions.html" />
			<copy file="${eclipse.build.scripts}/sdk/srcBuild/fetch/instructions.html" tofile="${postingDirectory}/${buildLabel}/srcFetchBuildInstructions.html" />

			<delete dir="${tempDir}/" />
		</target>
	
	<target name="getSdkExamplesPlugins">
		    <ant antfile="build.xml" dir="${pde.build.scripts}" target="preBuild">
				<property name="builder" value="${eclipse.build.scripts}/sdk.examples" />
			</ant>
			<ant antfile="build.xml" dir="${pde.build.scripts}" target="fetch">
				<property name="builder" value="${eclipse.build.scripts}/sdk.examples" />
			</ant>
		</target>

<!-- ===================================================================== -->
<!-- Default target                                                        -->
<!-- ===================================================================== -->
<target name="noDefault">
	<echo message="You must specify a target when invoking this file" />
</target>


</project>
