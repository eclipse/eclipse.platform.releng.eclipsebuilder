<project name="Eclipse SDK Source Build" default="run" basedir=".">

	<!--  default target that runs complete build  -->
	<target name="run" depends="fetch,insertBuildId,compile,compilelibs,install" />

	<!--  all features required to build eclipse sdk and javadoc  -->
	<target name="allElements">
		<ant antfile="${buildDirectory}/features/org.eclipse.sdk/build.xml" target="${target}" dir="${buildDirectory}/features/org.eclipse.sdk" />
	</target>

	<target name="fetch" depends="init" if="srcFetch">
		<touch file="${cvspass}" />
		<property name="featureOnly" value="true" />
		<property name="featureAndPlugins" value="true" />
		<property name="featuresRecursively" value="true" />
		<ant antfile="fetch_org.eclipse.platform.launchers.xml" />
		<ant antfile="fetch_org.eclipse.sdk.xml" />
		
		<!--copy linux motif about_files to in temp location where it will be copied into root of eclipse at assembly time-->
				<property name="linux.motif.rootfiles" value="${buildDirectory}/features/org.eclipse.platform/about_files/linux.motif.x86" />
				<mkdir dir="${linux.motif.rootfiles}" />
				<copy tofile="${linux.motif.rootfiles}/about.html" file="${buildDirectory}/plugins/org.eclipse.swt.motif.linux.x86/about_launcher_libraries.html" />
				<copy todir="${linux.motif.rootfiles}">
					<fileset dir="${buildDirectory}/plugins/org.eclipse.swt.motif.linux.x86"
						includes="						
						about_files/mlpl-v10.html,
						about_files/mpl-v11.txt"						
					/>
				</copy>
				
				<!--copy linux gtk x86 about_files to in temp location where it will be copied into root of eclipse at assembly time-->
				<property name="linux.gtk.x86.rootfiles" value="${buildDirectory}/features/org.eclipse.platform/about_files/linux.gtk.x86" />
				<mkdir dir="${linux.gtk.x86.rootfiles}" />
				<copy tofile="${linux.gtk.x86.rootfiles}/about.html" file="${buildDirectory}/plugins/org.eclipse.swt.gtk.linux.x86/about_launcher_libraries.html" />

				<copy todir="${linux.gtk.x86.rootfiles}">
					<fileset dir="${buildDirectory}/plugins/org.eclipse.swt.gtk.linux.x86"
						includes="about_files/mpl-v11.txt"
					/>
				</copy>
				
				<!--copy linux gtk x86_64 about_files to in temp location where it will be copied into root of eclipse at assembly time-->
				<property name="linux.gtk.x86_64.rootfiles" value="${buildDirectory}/features/org.eclipse.platform/about_files/linux.gtk.x86_64" />
				<mkdir dir="${linux.gtk.x86_64.rootfiles}" />
				<copy tofile="${linux.gtk.x86_64.rootfiles}/about.html" file="${buildDirectory}/plugins/org.eclipse.swt.gtk.linux.x86_64/about_launcher_libraries.html" />

				<copy todir="${linux.gtk.x86_64.rootfiles}">
					<fileset dir="${buildDirectory}/plugins/org.eclipse.swt.gtk.linux.x86_64"
						includes="about_files/mpl-v11.txt"
					/>
				</copy>		
	</target>

	<!--     Fill in values for original timestamp in all about.mappings files  -->
	<target name="insertBuildId" depends="init">
		<replace dir="${buildDirectory}/plugins" value="${buildId}" token="@build@">
			<include name="**/about.mappings" />
		</replace>
		<replace dir="${buildDirectory}" value="${buildId}" token="@build@">
			<include name="**/configuration/config.ini" />
		</replace>
	</target>

	<!--  
		  Compiles jars for all sdk plugins, and generates javadoc.
		  Deletes previously compiled jars first.
	-->
	<target name="compile" depends="init,clean">
		<echo message="Compiling..." />
		<record name="compilelog.txt" action="start" />
		<antcall target="allElements">
			<param name="target" value="build.jars" />
		</antcall>
		<record name="compilelog.txt" action="stop" />
	</target>

	<target name="compilelibs" depends="init,clean,compile" if="libsconfig">
		<property name="swtlibs" value="${buildDirectory}/swttmp" />
		<mkdir dir="${swtlibs}" />

		<!-- unzip swt zips -->
		<unzip dest="${swtlibs}">
			<fileset dir="${buildDirectory}/plugins/org.eclipse.rcp.source.${installOs}.${installWs}.${installArch}/src/">
				<include name="org.eclipse.swt.${installWs}.${installOs}.${installArch}_*/*.zip" />
			</fileset>
		</unzip>
		<exec dir="${swtlibs}/" executable="sh" failonerror="true">
			<arg line="build.sh" />
		</exec>
		<property name="swtdir" value="${buildDirectory}/plugins/org.eclipse.swt.${installWs}.${installOs}.${installArch}" />
		<mkdir dir="${swtdir}" />
		<move todir="${swtdir}/">
			<fileset dir="${swtlibs}">
				<include name="**/*.so" />
			</fileset>
		</move>
		<!--unzip launcher -->
		<property name="launcherlibs" value="${buildDirectory}/launchertmp" />
		<mkdir dir="${launcherlibs}" />
		<unzip dest="${launcherlibs}">
			<fileset dir="${buildDirectory}/plugins/org.eclipse.platform.source/src/">
				<include name="org.eclipse.platform_*/launchersrc.zip" />
			</fileset>
		</unzip>
		<exec dir="${launcherlibs}/library/${installWs}/" executable="sh" failonerror="true">
			<arg line="build.sh" />
		</exec>
		<move file="${launcherlibs}/library/${installWs}/eclipse" todir="${launcherlibs}/" />
	</target>



	<!--create an installable eclipse runtime-->
	<target name="install" depends="init">
		<echo message="Assembling..." />


		<!--task used in the assembly and doc generation-->
		<!--the defining class must be built in compile target-->
		<taskdef name="eclipse.idReplacer" classname="org.eclipse.pde.internal.build.tasks.IdReplaceTask" classpath="${buildDirectory}/plugins/org.eclipse.pde.build/lib/pdebuild-ant.jar" />
		<taskdef name="eclipse.brand" classname="org.eclipse.pde.internal.build.tasks.BrandTask" classpath="${buildDirectory}/plugins/org.eclipse.pde.build/lib/pdebuild-ant.jar;${buildDirectory}/plugins/org.eclipse.pde.build/pdebuild.jar" />


		<!--root directory of zip file-->
		<property name="collectingFolder" value="eclipse" />
		<property name="archivePrefix" value="eclipse" />

		<!--zip executable flags to use on unix, mac -->
		<condition property="zipargs" value="-y -qq">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>

		<!--default zip executable flags-->
		<property name="zipargs" value="-qq" />

		<ant antfile="assemble.org.eclipse.sdk.${installOs}.${installWs}.${installArch}.xml">
			<!--set property to delay building of doc.zips to later.  Doc built in this step would be missing extension point doc
			and help indeces.-->
			<property name="doc.zip.present" value="true" />
		</ant>
		<antcall target="build.doc.plugins" />
		<echo message="Done." />
	</target>

	<target name="build.doc.plugins">
		<!--Build doc plug-ins using antRunner in eclipse to gain access to classpath required for
		 pde.convertSchemaToHTML and help.buildHelpIndex tasks which are used when generating extension-point and help indeces.-->
		<antcall target="install.eclipse.${archive.format}" />

		<java fork="true" jar="${buildDirectory}/eclipse/startup.jar" dir="${buildDirectory}/plugins/org.eclipse.platform.doc.isv" output="platform.doc.isv.txt">
			<arg line="-data ${buildDirectory}/workspace -application org.eclipse.ant.core.antRunner gather.bin.parts -Ddestination.temp.folder=${buildDirectory}/tmp/eclipse/plugins/" />
		</java>
		<java fork="true" jar="${buildDirectory}/eclipse/startup.jar" dir="${buildDirectory}/plugins/org.eclipse.platform.doc.user" output="platform.doc.user.txt">
			<arg line="-data ${buildDirectory}/workspace -application org.eclipse.ant.core.antRunner gather.bin.parts -Ddestination.temp.folder=${buildDirectory}/tmp/eclipse/plugins/" />
		</java>
		<java fork="true" jar="${buildDirectory}/eclipse/startup.jar" dir="${buildDirectory}/plugins/org.eclipse.jdt.doc.isv" output="jdt.doc.isv.txt">
			<arg line="-data ${buildDirectory}/workspace -application org.eclipse.ant.core.antRunner gather.bin.parts -Ddestination.temp.folder=${buildDirectory}/tmp/eclipse/plugins/" />
		</java>
		<java fork="true" jar="${buildDirectory}/eclipse/startup.jar" dir="${buildDirectory}/plugins/org.eclipse.jdt.doc.user" output="jdt.doc.user.txt">
			<arg line="-data ${buildDirectory}/workspace -application org.eclipse.ant.core.antRunner gather.bin.parts -Ddestination.temp.folder=${buildDirectory}/tmp/eclipse/plugins/" />
		</java>
		<java fork="true" jar="${buildDirectory}/eclipse/startup.jar" dir="${buildDirectory}/plugins/org.eclipse.pde.doc.user" output="pde.doc.user.txt">
			<arg line="-data ${buildDirectory}/workspace -application org.eclipse.ant.core.antRunner gather.bin.parts -Ddestination.temp.folder=${buildDirectory}/tmp/eclipse/plugins/" />
		</java>

		<!--remove files created by running eclipse and incomplete doc plugins before adding in rebuilt doc plugins-->
		<delete includeemptydirs="true">
			<fileset dir="${buildDirectory}/eclipse/configuration" excludes="config.ini" />
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="${buildDirectory}/eclipse/plugins" includes="*doc*/**" />
		</delete>

		<!--copy in newly built doc plugins-->
		<copy todir="${buildDirectory}/eclipse/plugins">
			<fileset dir="${buildDirectory}/tmp/eclipse/plugins" includes="*doc*/**" />
		</copy>

		<move todir="${buildDirectory}/${buildLabel}-old">
			<fileset dir="${buildDirectory}/${buildLabel}" />
		</move>
		<mkdir dir="${buildDirectory}/${buildLabel}" />
		<antcall target="archive.eclipse.${archive.format}" />
		<delete dir="${buildDirectory}/${buildLabel}-old" />
	</target>

	<!--helper targets used to build and include doc plug-ins-->
	<target name="install.eclipse.tar">
		<apply executable="tar" dir="${buildDirectory}">
			<arg value="-xzf" />
			<fileset dir="${buildDirectory}/${buildLabel}">
				<patternset>
					<include name="**/*.tar.gz" />
				</patternset>
			</fileset>
		</apply>
	</target>

	<target name="install.eclipse.zip">
		<exec dir="${buildDirectory}" executable="unzip" failonerror="true">
			<arg line="-qq ${buildDirectory}/${buildLabel}/*.zip" />
		</exec>
	</target>

	<target name="archive.eclipse.tar">
		<exec dir="${buildDirectory}" executable="tar" failonerror="true">
			<arg line="-cf ${buildDirectory}/${buildLabel}/${installOs}-${installWs}-${installArch}-sdk.tar eclipse" />
		</exec>
		<exec dir="${buildDirectory}" executable="gzip" failonerror="true">
			<arg line="${buildDirectory}/${buildLabel}/${installOs}-${installWs}-${installArch}-sdk.tar" />
		</exec>
	</target>

	<target name="archive.eclipse.zip">
		<exec dir="${buildDirectory}" executable="zip" failonerror="true">
			<arg line="-qq ${buildDirectory}/${buildLabel}/${installOs}-${installWs}-${installArch}-sdk -r eclipse" />
		</exec>
	</target>

	<!--  Deletes jars that are to be recompiled  -->
	<target name="clean" depends="init">
		<echo message="Deleting jars to recompile..." />
		<antcall target="allElements">
			<param name="target" value="clean" />
		</antcall>
	</target>

	<target name="init">
		<!--directory in which to collect installable eclipse-->
		<property name="buildLabel" value="result" />

		<!--  directory where to perform the build  -->
		<property name="buildDirectory" value="${basedir}" />

		<!--  identifies build type and original build date  -->
		<property file="${basedir}/label.properties" />

		<!--location of .cvspass file-->
		<condition property="cvspass" value="c:\.cvspass">
			<os family="windows" />
		</condition>
		<property name="cvspass" value="${user.home}/.cvspass" />

		<!--bootclasspath-->
		<path id="default.bootclasspath">
			<fileset dir="${java.home}/lib">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="mac.bootclasspath">
			<fileset dir="${java.home}/..">
				<include name="Classes/**/*.jar" />
			</fileset>
		</path>
		<property name="mac.bootclasspath" refid="mac.bootclasspath" />
		<condition property="bootclasspath" value="${mac.bootclasspath}">
			<os family="mac" />
		</condition>
		<property name="bootclasspath" refid="default.bootclasspath" />

		<!--set the compiler and compiler arguments-->
		<!--the default compiler is set to the one used by eclipse rel. eng. -->
		<condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
			<available file="${basedir}/ecj.jar" />
		</condition>
		<condition property="compilerArg" value="-enableJavadoc -encoding ISO-8859-1">
			<equals arg1="${build.compiler}" arg2="org.eclipse.jdt.core.JDTCompilerAdapter" />
		</condition>
		<fail message="The Eclipse compiler (ecj.jar) cannot be found.">
			<condition>
				<not>
					<equals arg1="${build.compiler}" arg2="org.eclipse.jdt.core.JDTCompilerAdapter" />
				</not>
			</condition>
		</fail>
		<property name="compilerArg" value="-encoding ISO-8859-1" />
		<property name="javacSource" value="1.3" />
		<property name="javacTarget" value="1.2" />
		<property name="javacDebugInfo" value="true" />
		<property name="javacFailOnError" value="true" />

		<!--required property setting to build bundles in Eclipse 3.x stream builds -->
		<property name="buildingOSGi" value="true" />

		<!--indentifies this as a srcFetch build-->
		<available file="fetch_org.eclipse.platform.launchers.xml" property="srcFetch" />

		<!-- determines if libraries need to be recompiled for specific platforms -->
		<condition property="libsconfig">
			<or>
				<equals arg1="${installOs}-${installWs}-${installArch}" arg2="linux-gtk-ppc64" />
				<equals arg1="${installOs}-${installWs}-${installArch}" arg2="hpux-motif-ia64" />
				<equals arg1="${installOs}-${installWs}-${installArch}" arg2="hpux-motif-ia64_32" />
			</or>
		</condition>

		<!--used to add doc plug-ins to result after initial assembly-->
		<condition property="archive.format" value="tar">
			<equals arg1="${installOs}" arg2="linux" />
		</condition>
		<property name="archive.format" value="zip" />
	</target>

</project>
